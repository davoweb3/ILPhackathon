{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\n * all but the simplest QR Codes.</p>\n *\n * @author Sean Owen\n */\nvar AlignmentPattern = /** @class */function (_super) {\n  __extends(AlignmentPattern, _super);\n  function AlignmentPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/) {\n    var _this = _super.call(this, posX, posY) || this;\n    _this.estimatedModuleSize = estimatedModuleSize;\n    return _this;\n  }\n  /**\n   * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\n   * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n   */\n  AlignmentPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n    if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n      return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n    }\n    return false;\n  };\n  /**\n   * Combines this object's current estimate of a finder pattern position and module size\n   * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\n   */\n  AlignmentPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n    var combinedX = (this.getX() + j) / 2.0;\n    var combinedY = (this.getY() + i) / 2.0;\n    var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;\n    return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\n  };\n  return AlignmentPattern;\n}(ResultPoint_1.default);\nexports.default = AlignmentPattern;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/AlignmentPattern.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;AAEH;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;;;;AAKG;AACH,IAAA,gBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8C,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;EAE1C,SAAA,gBAAA,CAAmB,IAAY,CAAA,WAAW,IAAY,CAAA,WAAmB,mBAA2B,CAAA,WAAS;IAA7G,IAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAI,EAAE,IAAI,CAAC,IAAA,IAAA;IADoD,KAAA,CAAA,mBAAmB,GAAnB,mBAAmB;;EAE5F;EAEA;;;AAGG;EACI,gBAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,UAAkB,CAAA,WAAW,CAAS,CAAA,WAAW,CAAS,CAAA,WAAS;IAClF,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE;MACpF,IAAM,cAAc,GAAqB,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;MACxF,OAAO,cAAc,IAAI,GAAG,IAAI,cAAc,IAAI,IAAI,CAAC,mBAAmB;IAC7E;IACD,OAAO,KAAK;EAChB,CAAC;EAED;;;AAGG;EACI,gBAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,CAAS,CAAA,WAAW,CAAS,CAAA,WAAW,aAAqB,CAAA,WAAS;IACzF,IAAM,SAAS,GAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG;IAC3D,IAAM,SAAS,GAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG;IAC3D,IAAM,kBAAkB,GAAqB,CAAC,IAAI,CAAC,mBAAmB,GAAG,aAAa,IAAI,GAAG;IAC7F,OAAO,IAAI,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,CAAC;EACzE,CAAC;EAEL,OAAA,gBAAC;AAAD,CAAC,CA7B6C,aAAA,CAAA,OAAW,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\n * all but the simplest QR Codes.</p>\n *\n * @author Sean Owen\n */\nvar AlignmentPattern = /** @class */ (function (_super) {\n    __extends(AlignmentPattern, _super);\n    function AlignmentPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/) {\n        var _this = _super.call(this, posX, posY) || this;\n        _this.estimatedModuleSize = estimatedModuleSize;\n        return _this;\n    }\n    /**\n     * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\n     * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n     */\n    AlignmentPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n        if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n            var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n        }\n        return false;\n    };\n    /**\n     * Combines this object's current estimate of a finder pattern position and module size\n     * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\n     */\n    AlignmentPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n        var combinedX = (this.getX() + j) / 2.0;\n        var combinedY = (this.getY() + i) / 2.0;\n        var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;\n        return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\n    };\n    return AlignmentPattern;\n}(ResultPoint_1.default));\nexports.default = AlignmentPattern;\n//# sourceMappingURL=AlignmentPattern.js.map"]},"metadata":{},"sourceType":"script"}