{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar BitSource_1 = require(\"../../common/BitSource\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Mode;\n(function (Mode) {\n  Mode[Mode[\"PAD_ENCODE\"] = 0] = \"PAD_ENCODE\";\n  Mode[Mode[\"ASCII_ENCODE\"] = 1] = \"ASCII_ENCODE\";\n  Mode[Mode[\"C40_ENCODE\"] = 2] = \"C40_ENCODE\";\n  Mode[Mode[\"TEXT_ENCODE\"] = 3] = \"TEXT_ENCODE\";\n  Mode[Mode[\"ANSIX12_ENCODE\"] = 4] = \"ANSIX12_ENCODE\";\n  Mode[Mode[\"EDIFACT_ENCODE\"] = 5] = \"EDIFACT_ENCODE\";\n  Mode[Mode[\"BASE256_ENCODE\"] = 6] = \"BASE256_ENCODE\";\n})(Mode || (Mode = {}));\n/**\n * <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes\n * in one Data Matrix Code. This class decodes the bits back into text.</p>\n *\n * <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>\n *\n * @author bbrown@google.com (Brian Brown)\n * @author Sean Owen\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  DecodedBitStreamParser.decode = function (bytes) {\n    var bits = new BitSource_1.default(bytes);\n    var result = new StringBuilder_1.default();\n    var resultTrailer = new StringBuilder_1.default();\n    var byteSegments = new Array();\n    var mode = Mode.ASCII_ENCODE;\n    do {\n      if (mode === Mode.ASCII_ENCODE) {\n        mode = this.decodeAsciiSegment(bits, result, resultTrailer);\n      } else {\n        switch (mode) {\n          case Mode.C40_ENCODE:\n            this.decodeC40Segment(bits, result);\n            break;\n          case Mode.TEXT_ENCODE:\n            this.decodeTextSegment(bits, result);\n            break;\n          case Mode.ANSIX12_ENCODE:\n            this.decodeAnsiX12Segment(bits, result);\n            break;\n          case Mode.EDIFACT_ENCODE:\n            this.decodeEdifactSegment(bits, result);\n            break;\n          case Mode.BASE256_ENCODE:\n            this.decodeBase256Segment(bits, result, byteSegments);\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n        mode = Mode.ASCII_ENCODE;\n      }\n    } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);\n    if (resultTrailer.length() > 0) {\n      result.append(resultTrailer.toString());\n    }\n    return new DecoderResult_1.default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2\n   */\n  DecodedBitStreamParser.decodeAsciiSegment = function (bits, result, resultTrailer) {\n    var upperShift = false;\n    do {\n      var oneByte = bits.readBits(8);\n      if (oneByte === 0) {\n        throw new FormatException_1.default();\n      } else if (oneByte <= 128) {\n        // ASCII data (ASCII value + 1)\n        if (upperShift) {\n          oneByte += 128;\n          // upperShift = false;\n        }\n\n        result.append(String.fromCharCode(oneByte - 1));\n        return Mode.ASCII_ENCODE;\n      } else if (oneByte === 129) {\n        // Pad\n        return Mode.PAD_ENCODE;\n      } else if (oneByte <= 229) {\n        // 2-digit data 00-99 (Numeric Value + 130)\n        var value = oneByte - 130;\n        if (value < 10) {\n          // pad with '0' for single digit values\n          result.append('0');\n        }\n        result.append('' + value);\n      } else {\n        switch (oneByte) {\n          case 230:\n            // Latch to C40 encodation\n            return Mode.C40_ENCODE;\n          case 231:\n            // Latch to Base 256 encodation\n            return Mode.BASE256_ENCODE;\n          case 232:\n            // FNC1\n            result.append(String.fromCharCode(29)); // translate as ASCII 29\n            break;\n          case 233: // Structured Append\n          case 234:\n            // Reader Programming\n            // Ignore these symbols for now\n            // throw ReaderException.getInstance();\n            break;\n          case 235:\n            // Upper Shift (shift to Extended ASCII)\n            upperShift = true;\n            break;\n          case 236:\n            // 05 Macro\n            result.append('[)>\\u001E05\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n          case 237:\n            // 06 Macro\n            result.append('[)>\\u001E06\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n          case 238:\n            // Latch to ANSI X12 encodation\n            return Mode.ANSIX12_ENCODE;\n          case 239:\n            // Latch to Text encodation\n            return Mode.TEXT_ENCODE;\n          case 240:\n            // Latch to EDIFACT encodation\n            return Mode.EDIFACT_ENCODE;\n          case 241:\n            // ECI Character\n            // TODO(bbrown): I think we need to support ECI\n            // throw ReaderException.getInstance();\n            // Ignore this symbol for now\n            break;\n          default:\n            // Not to be used in ASCII encodation\n            // but work around encoders that end with 254, latch back to ASCII\n            if (oneByte !== 254 || bits.available() !== 0) {\n              throw new FormatException_1.default();\n            }\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n    return Mode.ASCII_ENCODE;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.5 and Annex C, Table C.1\n   */\n  DecodedBitStreamParser.decodeC40Segment = function (bits, result) {\n    // Three C40 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with C40 doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.C40_BASIC_SET_CHARS.length) {\n              var c40char = this.C40_BASIC_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n            shift = 0;\n            break;\n          case 2:\n            if (cValue < this.C40_SHIFT2_SET_CHARS.length) {\n              var c40char = this.C40_SHIFT2_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n                  break;\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n            shift = 0;\n            break;\n          case 3:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 224));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue + 96));\n            }\n            shift = 0;\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.6 and Annex C, Table C.2\n   */\n  DecodedBitStreamParser.decodeTextSegment = function (bits, result) {\n    // Three Text values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with Text doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {\n              var textChar = this.TEXT_BASIC_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n            shift = 0;\n            break;\n          case 2:\n            // Shift 2 for Text is the same encoding as C40\n            if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n                  break;\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n            shift = 0;\n            break;\n          case 3:\n            if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n              shift = 0;\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.7\n   */\n  DecodedBitStreamParser.decodeAnsiX12Segment = function (bits, result) {\n    // Three ANSI X12 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    var cValues = [];\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (cValue) {\n          case 0:\n            // X12 segment terminator <CR>\n            result.append('\\r');\n            break;\n          case 1:\n            // X12 segment separator *\n            result.append('*');\n            break;\n          case 2:\n            // X12 sub-element separator >\n            result.append('>');\n            break;\n          case 3:\n            // space\n            result.append(' ');\n            break;\n          default:\n            if (cValue < 14) {\n              // 0 - 9\n              result.append(String.fromCharCode(cValue + 44));\n            } else if (cValue < 40) {\n              // A - Z\n              result.append(String.fromCharCode(cValue + 51));\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  DecodedBitStreamParser.parseTwoBytes = function (firstByte, secondByte, result) {\n    var fullBitValue = (firstByte << 8) + secondByte - 1;\n    var temp = Math.floor(fullBitValue / 1600);\n    result[0] = temp;\n    fullBitValue -= temp * 1600;\n    temp = Math.floor(fullBitValue / 40);\n    result[1] = temp;\n    result[2] = fullBitValue - temp * 40;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.8 and Annex C Table C.3\n   */\n  DecodedBitStreamParser.decodeEdifactSegment = function (bits, result) {\n    do {\n      // If there is only two or less bytes left then it will be encoded as ASCII\n      if (bits.available() <= 16) {\n        return;\n      }\n      for (var i = 0; i < 4; i++) {\n        var edifactValue = bits.readBits(6);\n        // Check for the unlatch character\n        if (edifactValue === 0x1F) {\n          // 011111\n          // Read rest of byte, which should be 0, and stop\n          var bitsLeft = 8 - bits.getBitOffset();\n          if (bitsLeft !== 8) {\n            bits.readBits(bitsLeft);\n          }\n          return;\n        }\n        if ((edifactValue & 0x20) === 0) {\n          // no 1 in the leading (6th) bit\n          edifactValue |= 0x40; // Add a leading 01 to the 6 bit binary value\n        }\n\n        result.append(String.fromCharCode(edifactValue));\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.9 and Annex B, B.2\n   */\n  DecodedBitStreamParser.decodeBase256Segment = function (bits, result, byteSegments) {\n    // Figure out how long the Base 256 Segment is.\n    var codewordPosition = 1 + bits.getByteOffset(); // position is 1-indexed\n    var d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    var count;\n    if (d1 === 0) {\n      // Read the remainder of the symbol\n      count = bits.available() / 8 | 0;\n    } else if (d1 < 250) {\n      count = d1;\n    } else {\n      count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    }\n    // We're seeing NegativeArraySizeException errors from users.\n    if (count < 0) {\n      throw new FormatException_1.default();\n    }\n    var bytes = new Uint8Array(count);\n    for (var i = 0; i < count; i++) {\n      // Have seen this particular error in the wild, such as at\n      // http://www.bcgen.com/demo/IDAutomationStreamingDataMatrix.aspx?MODE=3&D=Fred&PFMT=3&PT=F&X=0.3&O=0&LM=0.2\n      if (bits.available() < 8) {\n        throw new FormatException_1.default();\n      }\n      bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    }\n    byteSegments.push(bytes);\n    try {\n      result.append(StringEncoding_1.default.decode(bytes, StringUtils_1.default.ISO88591));\n    } catch (uee) {\n      throw new IllegalStateException_1.default('Platform does not support required encoding: ' + uee.message);\n    }\n  };\n  /**\n   * See ISO 16022:2006, Annex B, B.2\n   */\n  DecodedBitStreamParser.unrandomize255State = function (randomizedBase256Codeword, base256CodewordPosition) {\n    var pseudoRandomNumber = 149 * base256CodewordPosition % 255 + 1;\n    var tempVariable = randomizedBase256Codeword - pseudoRandomNumber;\n    return tempVariable >= 0 ? tempVariable : tempVariable + 256;\n  };\n  /**\n   * See ISO 16022:2006, Annex C Table C.1\n   * The C40 Basic Character Set (*'s used for placeholders for the shift values)\n   */\n  DecodedBitStreamParser.C40_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  DecodedBitStreamParser.C40_SHIFT2_SET_CHARS = ['!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_'];\n  /**\n   * See ISO 16022:2006, Annex C Table C.2\n   * The Text Basic Character Set (*'s used for placeholders for the shift values)\n   */\n  DecodedBitStreamParser.TEXT_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  // Shift 2 for Text is the same encoding as C40\n  DecodedBitStreamParser.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser.C40_SHIFT2_SET_CHARS;\n  DecodedBitStreamParser.TEXT_SHIFT3_SET_CHARS = ['`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', String.fromCharCode(127)];\n  return DecodedBitStreamParser;\n}();\nexports.default = DecodedBitStreamParser;","map":{"version":3,"names":["DecoderResult_1","require","BitSource_1","StringBuilder_1","StringEncoding_1","StringUtils_1","FormatException_1","IllegalStateException_1","Mode","DecodedBitStreamParser","decode","bytes","bits","default","result","resultTrailer","byteSegments","Array","mode","ASCII_ENCODE","decodeAsciiSegment","C40_ENCODE","decodeC40Segment","TEXT_ENCODE","decodeTextSegment","ANSIX12_ENCODE","decodeAnsiX12Segment","EDIFACT_ENCODE","decodeEdifactSegment","BASE256_ENCODE","decodeBase256Segment","PAD_ENCODE","available","length","append","toString","upperShift","oneByte","readBits","String","fromCharCode","value","insert","cValues","shift","firstByte","parseTwoBytes","i","cValue","C40_BASIC_SET_CHARS","c40char","charCodeAt","C40_SHIFT2_SET_CHARS","TEXT_BASIC_SET_CHARS","textChar","TEXT_SHIFT2_SET_CHARS","TEXT_SHIFT3_SET_CHARS","secondByte","fullBitValue","temp","Math","floor","edifactValue","bitsLeft","getBitOffset","codewordPosition","getByteOffset","d1","unrandomize255State","count","Uint8Array","push","ISO88591","uee","message","randomizedBase256Codeword","base256CodewordPosition","pseudoRandomNumber","tempVariable"],"sources":["../../../../src/core/datamatrix/decoder/DecodedBitStreamParser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}