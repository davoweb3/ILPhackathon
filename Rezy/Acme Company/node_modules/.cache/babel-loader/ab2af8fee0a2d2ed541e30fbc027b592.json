{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\nvar FormatInformation = /** @class */function () {\n  function FormatInformation(formatInfo /*int*/) {\n    // Bits 3,4\n    this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits(formatInfo >> 3 & 0x03);\n    // Bottom 3 bits\n    this.dataMask = /*(byte) */formatInfo & 0x07;\n  }\n  FormatInformation.numBitsDiffering = function (a /*int*/, b /*int*/) {\n    return Integer_1.default.bitCount(a ^ b);\n  };\n  /**\n   * @param maskedFormatInfo1 format info indicator, with mask still applied\n   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n   *  to establish best match\n   * @return information about the format it specifies, or {@code null}\n   *  if doesn't seem to match any known pattern\n   */\n  FormatInformation.decodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n    var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n    if (formatInfo !== null) {\n      return formatInfo;\n    }\n    // Should return null, but, some QR codes apparently\n    // do not mask this info. Try again by actually masking the pattern\n    // first\n    return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n  };\n  FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n    var e_1, _a;\n    // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestFormatInfo = 0;\n    try {\n      for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var decodeInfo = _c.value;\n        var targetInfo = decodeInfo[0];\n        if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n          // Found an exact match\n          return new FormatInformation(decodeInfo[1]);\n        }\n        var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n        if (bitsDifference < bestDifference) {\n          bestFormatInfo = decodeInfo[1];\n          bestDifference = bitsDifference;\n        }\n        if (maskedFormatInfo1 !== maskedFormatInfo2) {\n          // also try the other option\n          bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n          if (bitsDifference < bestDifference) {\n            bestFormatInfo = decodeInfo[1];\n            bestDifference = bitsDifference;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n    // differing means we found a match\n    if (bestDifference <= 3) {\n      return new FormatInformation(bestFormatInfo);\n    }\n    return null;\n  };\n  FormatInformation.prototype.getErrorCorrectionLevel = function () {\n    return this.errorCorrectionLevel;\n  };\n  FormatInformation.prototype.getDataMask = function () {\n    return this.dataMask;\n  };\n  /*@Override*/\n  FormatInformation.prototype.hashCode = function () {\n    return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;\n  };\n  /*@Override*/\n  FormatInformation.prototype.equals = function (o) {\n    if (!(o instanceof FormatInformation)) {\n      return false;\n    }\n    var other = o;\n    return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;\n  };\n  FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n  /**\n   * See ISO 18004:2006, Annex C, Table C.1\n   */\n  FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [Int32Array.from([0x5412, 0x00]), Int32Array.from([0x5125, 0x01]), Int32Array.from([0x5E7C, 0x02]), Int32Array.from([0x5B4B, 0x03]), Int32Array.from([0x45F9, 0x04]), Int32Array.from([0x40CE, 0x05]), Int32Array.from([0x4F97, 0x06]), Int32Array.from([0x4AA0, 0x07]), Int32Array.from([0x77C4, 0x08]), Int32Array.from([0x72F3, 0x09]), Int32Array.from([0x7DAA, 0x0A]), Int32Array.from([0x789D, 0x0B]), Int32Array.from([0x662F, 0x0C]), Int32Array.from([0x6318, 0x0D]), Int32Array.from([0x6C41, 0x0E]), Int32Array.from([0x6976, 0x0F]), Int32Array.from([0x1689, 0x10]), Int32Array.from([0x13BE, 0x11]), Int32Array.from([0x1CE7, 0x12]), Int32Array.from([0x19D0, 0x13]), Int32Array.from([0x0762, 0x14]), Int32Array.from([0x0255, 0x15]), Int32Array.from([0x0D0C, 0x16]), Int32Array.from([0x083B, 0x17]), Int32Array.from([0x355F, 0x18]), Int32Array.from([0x3068, 0x19]), Int32Array.from([0x3F31, 0x1A]), Int32Array.from([0x3A06, 0x1B]), Int32Array.from([0x24B4, 0x1C]), Int32Array.from([0x2183, 0x1D]), Int32Array.from([0x2EDA, 0x1E]), Int32Array.from([0x2BED, 0x1F])];\n  return FormatInformation;\n}();\nexports.default = FormatInformation;","map":{"version":3,"names":["ErrorCorrectionLevel_1","require","Integer_1","FormatInformation","formatInfo","errorCorrectionLevel","default","forBits","dataMask","numBitsDiffering","a","b","bitCount","decodeFormatInformation","maskedFormatInfo1","maskedFormatInfo2","doDecodeFormatInformation","FORMAT_INFO_MASK_QR","bestDifference","Number","MAX_SAFE_INTEGER","bestFormatInfo","_b","__values","FORMAT_INFO_DECODE_LOOKUP","_c","next","done","decodeInfo","value","targetInfo","bitsDifference","prototype","getErrorCorrectionLevel","getDataMask","hashCode","getBits","equals","o","other","Int32Array","from"],"sources":["../../../../src/core/qrcode/decoder/FormatInformation.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAEA;;;;;;;;AAQA,IAAAE,iBAAA;EA6CI,SAAAA,kBAAoBC,UAAkB,CAAC,SAAO;IAC1C;IACA,IAAI,CAACC,oBAAoB,GAAGL,sBAAA,CAAAM,OAAoB,CAACC,OAAO,CAAEH,UAAU,IAAI,CAAC,GAAI,IAAI,CAAC;IAClF;IACA,IAAI,CAACI,QAAQ,GAAG,WAAYJ,UAAU,GAAG,IAAK;EAClD;EAEcD,iBAAA,CAAAM,gBAAgB,GAA9B,UAA+BC,CAAS,CAAC,SAASC,CAAS,CAAC,SAAO;IAC/D,OAAOT,SAAA,CAAAI,OAAO,CAACM,QAAQ,CAACF,CAAC,GAAGC,CAAC,CAAC;EAClC,CAAC;EAED;;;;;;;EAOcR,iBAAA,CAAAU,uBAAuB,GAArC,UAAsCC,iBAAyB,CAAC,SAASC,iBAAyB,CAAC,SAAO;IACtG,IAAMX,UAAU,GAAGD,iBAAiB,CAACa,yBAAyB,CAACF,iBAAiB,EAAEC,iBAAiB,CAAC;IACpG,IAAIX,UAAU,KAAK,IAAI,EAAE;MACrB,OAAOA,UAAU;;IAErB;IACA;IACA;IACA,OAAOD,iBAAiB,CAACa,yBAAyB,CAACF,iBAAiB,GAAGX,iBAAiB,CAACc,mBAAmB,EACxGF,iBAAiB,GAAGZ,iBAAiB,CAACc,mBAAmB,CAAC;EAClE,CAAC;EAEcd,iBAAA,CAAAa,yBAAyB,GAAxC,UAAyCF,iBAAyB,CAAC,SAASC,iBAAyB,CAAC,SAAO;;IACzG;IACA,IAAIG,cAAc,GAAGC,MAAM,CAACC,gBAAgB;IAC5C,IAAIC,cAAc,GAAG,CAAC;;MACtB,KAAyB,IAAAC,EAAA,GAAAC,QAAA,CAAApB,iBAAiB,CAACqB,yBAAyB,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAAjE,IAAME,UAAU,GAAAH,EAAA,CAAAI,KAAA;QACjB,IAAMC,UAAU,GAAGF,UAAU,CAAC,CAAC,CAAC;QAChC,IAAIE,UAAU,KAAKhB,iBAAiB,IAAIgB,UAAU,KAAKf,iBAAiB,EAAE;UACtE;UACA,OAAO,IAAIZ,iBAAiB,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;;QAE/C,IAAIG,cAAc,GAAG5B,iBAAiB,CAACM,gBAAgB,CAACK,iBAAiB,EAAEgB,UAAU,CAAC;QACtF,IAAIC,cAAc,GAAGb,cAAc,EAAE;UACjCG,cAAc,GAAGO,UAAU,CAAC,CAAC,CAAC;UAC9BV,cAAc,GAAGa,cAAc;;QAEnC,IAAIjB,iBAAiB,KAAKC,iBAAiB,EAAE;UACzC;UACAgB,cAAc,GAAG5B,iBAAiB,CAACM,gBAAgB,CAACM,iBAAiB,EAAEe,UAAU,CAAC;UAClF,IAAIC,cAAc,GAAGb,cAAc,EAAE;YACjCG,cAAc,GAAGO,UAAU,CAAC,CAAC,CAAC;YAC9BV,cAAc,GAAGa,cAAc;;;;;;;;;;;;;;;IAI3C;IACA;IACA,IAAIb,cAAc,IAAI,CAAC,EAAE;MACrB,OAAO,IAAIf,iBAAiB,CAACkB,cAAc,CAAC;;IAEhD,OAAO,IAAI;EACf,CAAC;EAEMlB,iBAAA,CAAA6B,SAAA,CAAAC,uBAAuB,GAA9B;IACI,OAAO,IAAI,CAAC5B,oBAAoB;EACpC,CAAC;EAEMF,iBAAA,CAAA6B,SAAA,CAAAE,WAAW,GAAlB;IACI,OAAO,IAAI,CAAC1B,QAAQ;EACxB,CAAC;EAED;EACOL,iBAAA,CAAA6B,SAAA,CAAAG,QAAQ,GAAf;IACI,OAAQ,IAAI,CAAC9B,oBAAoB,CAAC+B,OAAO,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC5B,QAAQ;EACrE,CAAC;EAED;EACOL,iBAAA,CAAA6B,SAAA,CAAAK,MAAM,GAAb,UAAcC,CAAS;IACnB,IAAI,EAAEA,CAAC,YAAYnC,iBAAiB,CAAC,EAAE;MACnC,OAAO,KAAK;;IAEhB,IAAMoC,KAAK,GAAsBD,CAAC;IAClC,OAAO,IAAI,CAACjC,oBAAoB,KAAKkC,KAAK,CAAClC,oBAAoB,IAC3D,IAAI,CAACG,QAAQ,KAAK+B,KAAK,CAAC/B,QAAQ;EACxC,CAAC;EA9HcL,iBAAA,CAAAc,mBAAmB,GAAG,MAAM;EAE3C;;;EAGed,iBAAA,CAAAqB,yBAAyB,GAAG,CACvCgB,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAC/BD,UAAU,CAACC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAClC;EA0FL,OAAAtC,iBAAC;CAAA,EAlID;kBAAqBA,iBAAiB"},"metadata":{},"sourceType":"script"}