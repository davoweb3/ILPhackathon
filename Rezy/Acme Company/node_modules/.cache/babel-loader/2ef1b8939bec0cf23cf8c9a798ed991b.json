{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.oned {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar Result_1 = require(\"../Result\");\nvar ResultPoint_1 = require(\"../ResultPoint\");\nvar OneDReader_1 = require(\"./OneDReader\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\nvar FormatException_1 = require(\"../FormatException\");\nvar ChecksumException_1 = require(\"../ChecksumException\");\n/**\n * <p>Decodes Code 128 barcodes.</p>\n *\n * @author Sean Owen\n */\nvar Code128Reader = /** @class */function (_super) {\n  __extends(Code128Reader, _super);\n  function Code128Reader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Code128Reader.findStartPattern = function (row) {\n    var width = row.getSize();\n    var rowOffset = row.getNextSet(0);\n    var counterPosition = 0;\n    var counters = [0, 0, 0, 0, 0, 0];\n    var patternStart = rowOffset;\n    var isWhite = false;\n    var patternLength = 6;\n    for (var i = rowOffset; i < width; i++) {\n      if (row.get(i) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          var bestVariance = Code128Reader.MAX_AVG_VARIANCE;\n          var bestMatch = -1;\n          for (var startCode = Code128Reader.CODE_START_A; startCode <= Code128Reader.CODE_START_C; startCode++) {\n            var variance = OneDReader_1.default.patternMatchVariance(counters, Code128Reader.CODE_PATTERNS[startCode], Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n            if (variance < bestVariance) {\n              bestVariance = variance;\n              bestMatch = startCode;\n            }\n          }\n          // Look for whitespace before start pattern, >= 50% of width of start pattern\n          if (bestMatch >= 0 && row.isRange(Math.max(0, patternStart - (i - patternStart) / 2), patternStart, false)) {\n            return [patternStart, i, bestMatch];\n          }\n          patternStart += counters[0] + counters[1];\n          counters.splice(0, 2);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  Code128Reader.decodeCode = function (row, counters, rowOffset) {\n    OneDReader_1.default.recordPattern(row, rowOffset, counters);\n    var bestVariance = Code128Reader.MAX_AVG_VARIANCE; // worst variance we'll accept\n    var bestMatch = -1;\n    for (var d = 0; d < Code128Reader.CODE_PATTERNS.length; d++) {\n      var pattern = Code128Reader.CODE_PATTERNS[d];\n      var variance = this.patternMatchVariance(counters, pattern, Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n      if (variance < bestVariance) {\n        bestVariance = variance;\n        bestMatch = d;\n      }\n    }\n    // TODO We're overlooking the fact that the STOP pattern has 7 values, not 6.\n    if (bestMatch >= 0) {\n      return bestMatch;\n    } else {\n      throw new NotFoundException_1.default();\n    }\n  };\n  Code128Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var convertFNC1 = hints && hints.get(DecodeHintType_1.default.ASSUME_GS1) === true;\n    var startPatternInfo = Code128Reader.findStartPattern(row);\n    var startCode = startPatternInfo[2];\n    var currentRawCodesIndex = 0;\n    var rawCodes = new Uint8Array(20);\n    rawCodes[currentRawCodesIndex++] = startCode;\n    var codeSet;\n    switch (startCode) {\n      case Code128Reader.CODE_START_A:\n        codeSet = Code128Reader.CODE_CODE_A;\n        break;\n      case Code128Reader.CODE_START_B:\n        codeSet = Code128Reader.CODE_CODE_B;\n        break;\n      case Code128Reader.CODE_START_C:\n        codeSet = Code128Reader.CODE_CODE_C;\n        break;\n      default:\n        throw new FormatException_1.default();\n    }\n    var done = false;\n    var isNextShifted = false;\n    var result = '';\n    var lastStart = startPatternInfo[0];\n    var nextStart = startPatternInfo[1];\n    var counters = [0, 0, 0, 0, 0, 0];\n    var lastCode = 0;\n    var code = 0;\n    var checksumTotal = startCode;\n    var multiplier = 0;\n    var lastCharacterWasPrintable = true;\n    var upperMode = false;\n    var shiftUpperMode = false;\n    while (!done) {\n      var unshift = isNextShifted;\n      isNextShifted = false;\n      // Save off last code\n      lastCode = code;\n      // Decode another code from image\n      code = Code128Reader.decodeCode(row, counters, nextStart);\n      rawCodes[currentRawCodesIndex++] = code;\n      // Remember whether the last code was printable or not (excluding CODE_STOP)\n      if (code !== Code128Reader.CODE_STOP) {\n        lastCharacterWasPrintable = true;\n      }\n      // Add to checksum computation (if not CODE_STOP of course)\n      if (code !== Code128Reader.CODE_STOP) {\n        multiplier++;\n        checksumTotal += multiplier * code;\n      }\n      // Advance to where the next code will to start\n      lastStart = nextStart;\n      nextStart += counters.reduce(function (previous, current) {\n        return previous + current;\n      }, 0);\n      // Take care of illegal start codes\n      switch (code) {\n        case Code128Reader.CODE_START_A:\n        case Code128Reader.CODE_START_B:\n        case Code128Reader.CODE_START_C:\n          throw new FormatException_1.default();\n      }\n      switch (codeSet) {\n        case Code128Reader.CODE_CODE_A:\n          if (code < 64) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(' '.charCodeAt(0) + code);\n            } else {\n              result += String.fromCharCode(' '.charCodeAt(0) + code + 128);\n            }\n            shiftUpperMode = false;\n          } else if (code < 96) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(code - 64);\n            } else {\n              result += String.fromCharCode(code + 64);\n            }\n            shiftUpperMode = false;\n          } else {\n            // Don't let CODE_STOP, which always appears, affect whether whether we think the last\n            // code was printable or not.\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_FNC_2:\n              case Code128Reader.CODE_FNC_3:\n                // do nothing?\n                break;\n              case Code128Reader.CODE_FNC_4_A:\n                if (!upperMode && shiftUpperMode) {\n                  upperMode = true;\n                  shiftUpperMode = false;\n                } else if (upperMode && shiftUpperMode) {\n                  upperMode = false;\n                  shiftUpperMode = false;\n                } else {\n                  shiftUpperMode = true;\n                }\n                break;\n              case Code128Reader.CODE_SHIFT:\n                isNextShifted = true;\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_CODE_B:\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_CODE_C:\n                codeSet = Code128Reader.CODE_CODE_C;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n        case Code128Reader.CODE_CODE_B:\n          if (code < 96) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(' '.charCodeAt(0) + code);\n            } else {\n              result += String.fromCharCode(' '.charCodeAt(0) + code + 128);\n            }\n            shiftUpperMode = false;\n          } else {\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_FNC_2:\n              case Code128Reader.CODE_FNC_3:\n                // do nothing?\n                break;\n              case Code128Reader.CODE_FNC_4_B:\n                if (!upperMode && shiftUpperMode) {\n                  upperMode = true;\n                  shiftUpperMode = false;\n                } else if (upperMode && shiftUpperMode) {\n                  upperMode = false;\n                  shiftUpperMode = false;\n                } else {\n                  shiftUpperMode = true;\n                }\n                break;\n              case Code128Reader.CODE_SHIFT:\n                isNextShifted = true;\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_A:\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_C:\n                codeSet = Code128Reader.CODE_CODE_C;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n        case Code128Reader.CODE_CODE_C:\n          if (code < 100) {\n            if (code < 10) {\n              result += '0';\n            }\n            result += code;\n          } else {\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_CODE_A:\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_B:\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n      }\n      // Unshift back to another code set if we were shifted\n      if (unshift) {\n        codeSet = codeSet === Code128Reader.CODE_CODE_A ? Code128Reader.CODE_CODE_B : Code128Reader.CODE_CODE_A;\n      }\n    }\n    var lastPatternSize = nextStart - lastStart;\n    // Check for ample whitespace following pattern, but, to do this we first need to remember that\n    // we fudged decoding CODE_STOP since it actually has 7 bars, not 6. There is a black bar left\n    // to read off. Would be slightly better to properly read. Here we just skip it:\n    nextStart = row.getNextUnset(nextStart);\n    if (!row.isRange(nextStart, Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2), false)) {\n      throw new NotFoundException_1.default();\n    }\n    // Pull out from sum the value of the penultimate check code\n    checksumTotal -= multiplier * lastCode;\n    // lastCode is the checksum then:\n    if (checksumTotal % 103 !== lastCode) {\n      throw new ChecksumException_1.default();\n    }\n    // Need to pull out the check digits from string\n    var resultLength = result.length;\n    if (resultLength === 0) {\n      // false positive\n      throw new NotFoundException_1.default();\n    }\n    // Only bother if the result had at least one character, and if the checksum digit happened to\n    // be a printable character. If it was just interpreted as a control code, nothing to remove.\n    if (resultLength > 0 && lastCharacterWasPrintable) {\n      if (codeSet === Code128Reader.CODE_CODE_C) {\n        result = result.substring(0, resultLength - 2);\n      } else {\n        result = result.substring(0, resultLength - 1);\n      }\n    }\n    var left = (startPatternInfo[1] + startPatternInfo[0]) / 2.0;\n    var right = lastStart + lastPatternSize / 2.0;\n    var rawCodesSize = rawCodes.length;\n    var rawBytes = new Uint8Array(rawCodesSize);\n    for (var i = 0; i < rawCodesSize; i++) {\n      rawBytes[i] = rawCodes[i];\n    }\n    var points = [new ResultPoint_1.default(left, rowNumber), new ResultPoint_1.default(right, rowNumber)];\n    return new Result_1.default(result, rawBytes, 0, points, BarcodeFormat_1.default.CODE_128, new Date().getTime());\n  };\n  Code128Reader.CODE_PATTERNS = [[2, 1, 2, 2, 2, 2], [2, 2, 2, 1, 2, 2], [2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 3], [1, 2, 1, 3, 2, 2], [1, 3, 1, 2, 2, 2], [1, 2, 2, 2, 1, 3], [1, 2, 2, 3, 1, 2], [1, 3, 2, 2, 1, 2], [2, 2, 1, 2, 1, 3], [2, 2, 1, 3, 1, 2], [2, 3, 1, 2, 1, 2], [1, 1, 2, 2, 3, 2], [1, 2, 2, 1, 3, 2], [1, 2, 2, 2, 3, 1], [1, 1, 3, 2, 2, 2], [1, 2, 3, 1, 2, 2], [1, 2, 3, 2, 2, 1], [2, 2, 3, 2, 1, 1], [2, 2, 1, 1, 3, 2], [2, 2, 1, 2, 3, 1], [2, 1, 3, 2, 1, 2], [2, 2, 3, 1, 1, 2], [3, 1, 2, 1, 3, 1], [3, 1, 1, 2, 2, 2], [3, 2, 1, 1, 2, 2], [3, 2, 1, 2, 2, 1], [3, 1, 2, 2, 1, 2], [3, 2, 2, 1, 1, 2], [3, 2, 2, 2, 1, 1], [2, 1, 2, 1, 2, 3], [2, 1, 2, 3, 2, 1], [2, 3, 2, 1, 2, 1], [1, 1, 1, 3, 2, 3], [1, 3, 1, 1, 2, 3], [1, 3, 1, 3, 2, 1], [1, 1, 2, 3, 1, 3], [1, 3, 2, 1, 1, 3], [1, 3, 2, 3, 1, 1], [2, 1, 1, 3, 1, 3], [2, 3, 1, 1, 1, 3], [2, 3, 1, 3, 1, 1], [1, 1, 2, 1, 3, 3], [1, 1, 2, 3, 3, 1], [1, 3, 2, 1, 3, 1], [1, 1, 3, 1, 2, 3], [1, 1, 3, 3, 2, 1], [1, 3, 3, 1, 2, 1], [3, 1, 3, 1, 2, 1], [2, 1, 1, 3, 3, 1], [2, 3, 1, 1, 3, 1], [2, 1, 3, 1, 1, 3], [2, 1, 3, 3, 1, 1], [2, 1, 3, 1, 3, 1], [3, 1, 1, 1, 2, 3], [3, 1, 1, 3, 2, 1], [3, 3, 1, 1, 2, 1], [3, 1, 2, 1, 1, 3], [3, 1, 2, 3, 1, 1], [3, 3, 2, 1, 1, 1], [3, 1, 4, 1, 1, 1], [2, 2, 1, 4, 1, 1], [4, 3, 1, 1, 1, 1], [1, 1, 1, 2, 2, 4], [1, 1, 1, 4, 2, 2], [1, 2, 1, 1, 2, 4], [1, 2, 1, 4, 2, 1], [1, 4, 1, 1, 2, 2], [1, 4, 1, 2, 2, 1], [1, 1, 2, 2, 1, 4], [1, 1, 2, 4, 1, 2], [1, 2, 2, 1, 1, 4], [1, 2, 2, 4, 1, 1], [1, 4, 2, 1, 1, 2], [1, 4, 2, 2, 1, 1], [2, 4, 1, 2, 1, 1], [2, 2, 1, 1, 1, 4], [4, 1, 3, 1, 1, 1], [2, 4, 1, 1, 1, 2], [1, 3, 4, 1, 1, 1], [1, 1, 1, 2, 4, 2], [1, 2, 1, 1, 4, 2], [1, 2, 1, 2, 4, 1], [1, 1, 4, 2, 1, 2], [1, 2, 4, 1, 1, 2], [1, 2, 4, 2, 1, 1], [4, 1, 1, 2, 1, 2], [4, 2, 1, 1, 1, 2], [4, 2, 1, 2, 1, 1], [2, 1, 2, 1, 4, 1], [2, 1, 4, 1, 2, 1], [4, 1, 2, 1, 2, 1], [1, 1, 1, 1, 4, 3], [1, 1, 1, 3, 4, 1], [1, 3, 1, 1, 4, 1], [1, 1, 4, 1, 1, 3], [1, 1, 4, 3, 1, 1], [4, 1, 1, 1, 1, 3], [4, 1, 1, 3, 1, 1], [1, 1, 3, 1, 4, 1], [1, 1, 4, 1, 3, 1], [3, 1, 1, 1, 4, 1], [4, 1, 1, 1, 3, 1], [2, 1, 1, 4, 1, 2], [2, 1, 1, 2, 1, 4], [2, 1, 1, 2, 3, 2], [2, 3, 3, 1, 1, 1, 2]];\n  Code128Reader.MAX_AVG_VARIANCE = 0.25;\n  Code128Reader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n  Code128Reader.CODE_SHIFT = 98;\n  Code128Reader.CODE_CODE_C = 99;\n  Code128Reader.CODE_CODE_B = 100;\n  Code128Reader.CODE_CODE_A = 101;\n  Code128Reader.CODE_FNC_1 = 102;\n  Code128Reader.CODE_FNC_2 = 97;\n  Code128Reader.CODE_FNC_3 = 96;\n  Code128Reader.CODE_FNC_4_A = 101;\n  Code128Reader.CODE_FNC_4_B = 100;\n  Code128Reader.CODE_START_A = 103;\n  Code128Reader.CODE_START_B = 104;\n  Code128Reader.CODE_START_C = 105;\n  Code128Reader.CODE_STOP = 106;\n  return Code128Reader;\n}(OneDReader_1.default);\nexports.default = Code128Reader;","map":{"version":3,"names":["BarcodeFormat_1","require","DecodeHintType_1","Result_1","ResultPoint_1","OneDReader_1","NotFoundException_1","FormatException_1","ChecksumException_1","Code128Reader","_super","__extends","findStartPattern","row","width","getSize","rowOffset","getNextSet","counterPosition","counters","patternStart","isWhite","patternLength","i","get","bestVariance","MAX_AVG_VARIANCE","bestMatch","startCode","CODE_START_A","CODE_START_C","variance","default","patternMatchVariance","CODE_PATTERNS","MAX_INDIVIDUAL_VARIANCE","isRange","Math","max","splice","decodeCode","recordPattern","d","length","pattern","prototype","decodeRow","rowNumber","hints","convertFNC1","ASSUME_GS1","startPatternInfo","currentRawCodesIndex","rawCodes","Uint8Array","codeSet","CODE_CODE_A","CODE_START_B","CODE_CODE_B","CODE_CODE_C","done","isNextShifted","result","lastStart","nextStart","lastCode","code","checksumTotal","multiplier","lastCharacterWasPrintable","upperMode","shiftUpperMode","unshift","CODE_STOP","reduce","previous","current","String","fromCharCode","charCodeAt","CODE_FNC_1","CODE_FNC_2","CODE_FNC_3","CODE_FNC_4_A","CODE_SHIFT","CODE_FNC_4_B","lastPatternSize","getNextUnset","min","resultLength","substring","left","right","rawCodesSize","rawBytes","points","CODE_128","Date","getTime"],"sources":["../../../src/core/oned/Code128Reader.ts"],"sourcesContent":[null],"mappings":"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CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEXzB,aAAA,CAAAiB,gBAAgB,GAAG,IAAI;EACvBjB,aAAA,CAAA0B,uBAAuB,GAAG,GAAG;EAE7B1B,aAAA,CAAA2E,UAAU,GAAG,EAAE;EAEf3E,aAAA,CAAAkD,WAAW,GAAG,EAAE;EAChBlD,aAAA,CAAAiD,WAAW,GAAG,GAAG;EACjBjD,aAAA,CAAA+C,WAAW,GAAG,GAAG;EAEjB/C,aAAA,CAAAuE,UAAU,GAAG,GAAG;EAChBvE,aAAA,CAAAwE,UAAU,GAAG,EAAE;EACfxE,aAAA,CAAAyE,UAAU,GAAG,EAAE;EACfzE,aAAA,CAAA0E,YAAY,GAAG,GAAG;EAClB1E,aAAA,CAAA4E,YAAY,GAAG,GAAG;EAElB5E,aAAA,CAAAoB,YAAY,GAAG,GAAG;EAClBpB,aAAA,CAAAgD,YAAY,GAAG,GAAG;EAClBhD,aAAA,CAAAqB,YAAY,GAAG,GAAG;EAClBrB,aAAA,CAAAgE,SAAS,GAAG,GAAG;EA2WlC,OAAAhE,aAAC;CAAA,CA5e0CJ,YAAA,CAAA2B,OAAU;kBAAhCvB,aAAa"},"metadata":{},"sourceType":"script"}