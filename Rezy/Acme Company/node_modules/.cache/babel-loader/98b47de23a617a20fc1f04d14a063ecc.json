{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\nvar BitArray_1 = require(\"../../common/BitArray\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar QRCode_1 = require(\"./QRCode\");\nvar MaskUtil_1 = require(\"./MaskUtil\");\nvar WriterException_1 = require(\"../../WriterException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\nvar MatrixUtil = /** @class */function () {\n  function MatrixUtil() {\n    // do nothing\n  }\n  // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n  //\n  // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n  // with the ByteMatrix initialized all to zero.\n  MatrixUtil.clearMatrix = function (matrix) {\n    // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n    matrix.clear( /*(byte) */ /*-1*/255);\n  };\n  // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n  // success, store the result in \"matrix\" and return true.\n  MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\n    MatrixUtil.clearMatrix(matrix);\n    MatrixUtil.embedBasicPatterns(version, matrix);\n    // Type information appear with any version.\n    MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\n    // Version info appear if version >= 7.\n    MatrixUtil.maybeEmbedVersionInfo(version, matrix);\n    // Data should be embedded at end.\n    MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n  };\n  // Embed basic patterns. On success, modify the matrix and return true.\n  // The basic patterns are:\n  // - Position detection patterns\n  // - Timing patterns\n  // - Dark dot at the left bottom corner\n  // - Position adjustment patterns, if need be\n  MatrixUtil.embedBasicPatterns = function (version, matrix) {\n    // Let's get started with embedding big squares at corners.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\n    // Then, embed the dark dot at the left bottom corner.\n    MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\n    // Position adjustment patterns appear if version >= 2.\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\n    // Timing patterns should be embedded after position adj. patterns.\n    MatrixUtil.embedTimingPatterns(matrix);\n  };\n  // Embed type information. On success, modify the matrix.\n  MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern /*int*/, matrix) {\n    var typeInfoBits = new BitArray_1.default();\n    MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n    for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n      // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n      // \"typeInfoBits\".\n      var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\n      // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n      var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n      var x1 = coordinates[0];\n      var y1 = coordinates[1];\n      matrix.setBoolean(x1, y1, bit);\n      if (i < 8) {\n        // Right top corner.\n        var x2 = matrix.getWidth() - i - 1;\n        var y2 = 8;\n        matrix.setBoolean(x2, y2, bit);\n      } else {\n        // Left bottom corner.\n        var x2 = 8;\n        var y2 = matrix.getHeight() - 7 + (i - 8);\n        matrix.setBoolean(x2, y2, bit);\n      }\n    }\n  };\n  // Embed version information if need be. On success, modify the matrix and return true.\n  // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n  MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n    if (version.getVersionNumber() < 7) {\n      // Version info is necessary if version >= 7.\n      return; // Don't need version info.\n    }\n\n    var versionInfoBits = new BitArray_1.default();\n    MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n    var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n    for (var i = 0; i < 6; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        // Place bits in LSB (least significant bit) to MSB order.\n        var bit = versionInfoBits.get(bitIndex);\n        bitIndex--;\n        // Left bottom corner.\n        matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\n        // Right bottom corner.\n        matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n      }\n    }\n  };\n  // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n  // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n  // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n  MatrixUtil.embedDataBits = function (dataBits, maskPattern /*int*/, matrix) {\n    var bitIndex = 0;\n    var direction = -1;\n    // Start from the right bottom cell.\n    var x = matrix.getWidth() - 1;\n    var y = matrix.getHeight() - 1;\n    while (x > 0) {\n      // Skip the vertical timing pattern.\n      if (x === 6) {\n        x -= 1;\n      }\n      while (y >= 0 && y < matrix.getHeight()) {\n        for (var i = 0; i < 2; ++i) {\n          var xx = x - i;\n          // Skip the cell if it's not empty.\n          if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n            continue;\n          }\n          var bit = void 0;\n          if (bitIndex < dataBits.getSize()) {\n            bit = dataBits.get(bitIndex);\n            ++bitIndex;\n          } else {\n            // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n            // in 8.4.9 of JISX0510:2004 (p. 24).\n            bit = false;\n          }\n          // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n          if (maskPattern !== 255 && MaskUtil_1.default.getDataMaskBit(maskPattern, xx, y)) {\n            bit = !bit;\n          }\n          matrix.setBoolean(xx, y, bit);\n        }\n        y += direction;\n      }\n      direction = -direction; // Reverse the direction.\n      y += direction;\n      x -= 2; // Move to the left.\n    }\n    // All bits should be consumed.\n    if (bitIndex !== dataBits.getSize()) {\n      throw new WriterException_1.default('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n    }\n  };\n  // Return the position of the most significant bit set (one: to) in the \"value\". The most\n  // significant bit is position 32. If there is no bit set, return 0. Examples:\n  // - findMSBSet(0) => 0\n  // - findMSBSet(1) => 1\n  // - findMSBSet(255) => 8\n  MatrixUtil.findMSBSet = function (value /*int*/) {\n    return 32 - Integer_1.default.numberOfLeadingZeros(value);\n  };\n  // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n  // code is used for encoding type information and version information.\n  // Example: Calculation of version information of 7.\n  // f(x) is created from 7.\n  //   - 7 = 000111 in 6 bits\n  //   - f(x) = x^2 + x^1 + x^0\n  // g(x) is given by the standard (p. 67)\n  //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n  // Multiply f(x) by x^(18 - 6)\n  //   - f'(x) = f(x) * x^(18 - 6)\n  //   - f'(x) = x^14 + x^13 + x^12\n  // Calculate the remainder of f'(x) / g(x)\n  //         x^2\n  //         __________________________________________________\n  //   g(x) )x^14 + x^13 + x^12\n  //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n  //         --------------------------------------------------\n  //                              x^11 + x^10 + x^7 + x^4 + x^2\n  //\n  // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n  // Encode it in binary: 110010010100\n  // The return value is 0xc94 (1100 1001 0100)\n  //\n  // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n  // operations. We don't care if coefficients are positive or negative.\n  MatrixUtil.calculateBCHCode = function (value /*int*/, poly /*int*/) {\n    if (poly === 0) {\n      throw new IllegalArgumentException_1.default('0 polynomial');\n    }\n    // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n    // from 13 to make it 12.\n    var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n    value <<= msbSetInPoly - 1;\n    // Do the division business using exclusive-or operations.\n    while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n      value ^= poly << MatrixUtil.findMSBSet(value) - msbSetInPoly;\n    }\n    // Now the \"value\" is the remainder (i.e. the BCH code)\n    return value;\n  };\n  // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n  // Encode error correction level and mask pattern. See 8.9 of\n  // JISX0510:2004 (p.45) for details.\n  MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern /*int*/, bits) {\n    if (!QRCode_1.default.isValidMaskPattern(maskPattern)) {\n      throw new WriterException_1.default('Invalid mask pattern');\n    }\n    var typeInfo = ecLevel.getBits() << 3 | maskPattern;\n    bits.appendBits(typeInfo, 5);\n    var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n    bits.appendBits(bchCode, 10);\n    var maskBits = new BitArray_1.default();\n    maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n    bits.xor(maskBits);\n    if (bits.getSize() !== 15) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  };\n  // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n  // See 8.10 of JISX0510:2004 (p.45) for details.\n  MatrixUtil.makeVersionInfoBits = function (version, bits) {\n    bits.appendBits(version.getVersionNumber(), 6);\n    var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n    bits.appendBits(bchCode, 12);\n    if (bits.getSize() !== 18) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  };\n  // Check if \"value\" is empty.\n  MatrixUtil.isEmpty = function (value /*int*/) {\n    return value === 255; // -1\n  };\n\n  MatrixUtil.embedTimingPatterns = function (matrix) {\n    // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n    // separation patterns (1: size). Thus, 8 = 7 + 1.\n    for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n      var bit = (i + 1) % 2;\n      // Horizontal line.\n      if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n        matrix.setNumber(i, 6, bit);\n      }\n      // Vertical line.\n      if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n        matrix.setNumber(6, i, bit);\n      }\n    }\n  };\n  // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n  MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n    if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n      throw new WriterException_1.default();\n    }\n    matrix.setNumber(8, matrix.getHeight() - 8, 1);\n  };\n  MatrixUtil.embedHorizontalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var x = 0; x < 8; ++x) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n        throw new WriterException_1.default();\n      }\n      matrix.setNumber(xStart + x, yStart, 0);\n    }\n  };\n  MatrixUtil.embedVerticalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 7; ++y) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n        throw new WriterException_1.default();\n      }\n      matrix.setNumber(xStart, yStart + y, 0);\n    }\n  };\n  MatrixUtil.embedPositionAdjustmentPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 5; ++y) {\n      var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n      for (var x = 0; x < 5; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n  MatrixUtil.embedPositionDetectionPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n    for (var y = 0; y < 7; ++y) {\n      var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n      for (var x = 0; x < 7; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n  // Embed position detection patterns and surrounding vertical/horizontal separators.\n  MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n    // Embed three big squares at corners.\n    var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\n    // Left top corner.\n    MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\n    // Right top corner.\n    MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\n    // Embed horizontal separation patterns around the squares.\n    var hspWidth = 8;\n    // Left top corner.\n    MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\n    // Right top corner.\n    MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\n    // Embed vertical separation patterns around the squares.\n    var vspSize = 7;\n    // Left top corner.\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\n    // Right top corner.\n    MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\n    // Left bottom corner.\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n  };\n  // Embed position adjustment patterns if need be.\n  MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n    if (version.getVersionNumber() < 2) {\n      // The patterns appear if version >= 2\n      return;\n    }\n    var index = version.getVersionNumber() - 1;\n    var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n    for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n      var y = coordinates[i];\n      if (y >= 0) {\n        for (var j = 0; j !== length_1; j++) {\n          var x = coordinates[j];\n          if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n            // If the cell is unset, we embed the position adjustment pattern here.\n            // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n            // left top corner.\n            MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n          }\n        }\n      }\n    }\n  };\n  MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1, 1, 1])]);\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1])]);\n  // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([Int32Array.from([-1, -1, -1, -1, -1, -1, -1]), Int32Array.from([6, 18, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, -1, -1, -1, -1, -1]), Int32Array.from([6, 26, -1, -1, -1, -1, -1]), Int32Array.from([6, 30, -1, -1, -1, -1, -1]), Int32Array.from([6, 34, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, 38, -1, -1, -1, -1]), Int32Array.from([6, 24, 42, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, -1, -1, -1, -1]), Int32Array.from([6, 28, 50, -1, -1, -1, -1]), Int32Array.from([6, 30, 54, -1, -1, -1, -1]), Int32Array.from([6, 32, 58, -1, -1, -1, -1]), Int32Array.from([6, 34, 62, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, 66, -1, -1, -1]), Int32Array.from([6, 26, 48, 70, -1, -1, -1]), Int32Array.from([6, 26, 50, 74, -1, -1, -1]), Int32Array.from([6, 30, 54, 78, -1, -1, -1]), Int32Array.from([6, 30, 56, 82, -1, -1, -1]), Int32Array.from([6, 30, 58, 86, -1, -1, -1]), Int32Array.from([6, 34, 62, 90, -1, -1, -1]), Int32Array.from([6, 28, 50, 72, 94, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, -1, -1]), Int32Array.from([6, 30, 54, 78, 102, -1, -1]), Int32Array.from([6, 28, 54, 80, 106, -1, -1]), Int32Array.from([6, 32, 58, 84, 110, -1, -1]), Int32Array.from([6, 30, 58, 86, 114, -1, -1]), Int32Array.from([6, 34, 62, 90, 118, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, 122, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, -1]), Int32Array.from([6, 26, 52, 78, 104, 130, -1]), Int32Array.from([6, 30, 56, 82, 108, 134, -1]), Int32Array.from([6, 34, 60, 86, 112, 138, -1]), Int32Array.from([6, 30, 58, 86, 114, 142, -1]), Int32Array.from([6, 34, 62, 90, 118, 146, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, 150]), Int32Array.from([6, 24, 50, 76, 102, 128, 154]), Int32Array.from([6, 28, 54, 80, 106, 132, 158]), Int32Array.from([6, 32, 58, 84, 110, 136, 162]), Int32Array.from([6, 26, 54, 82, 110, 138, 166]), Int32Array.from([6, 30, 58, 86, 114, 142, 170])]);\n  // Type info cells at the left top corner.\n  MatrixUtil.TYPE_INFO_COORDINATES = Array.from([Int32Array.from([8, 0]), Int32Array.from([8, 1]), Int32Array.from([8, 2]), Int32Array.from([8, 3]), Int32Array.from([8, 4]), Int32Array.from([8, 5]), Int32Array.from([8, 7]), Int32Array.from([8, 8]), Int32Array.from([7, 8]), Int32Array.from([5, 8]), Int32Array.from([4, 8]), Int32Array.from([3, 8]), Int32Array.from([2, 8]), Int32Array.from([1, 8]), Int32Array.from([0, 8])]);\n  // From Appendix D in JISX0510:2004 (p. 67)\n  MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n  // From Appendix C in JISX0510:2004 (p.65).\n  MatrixUtil.TYPE_INFO_POLY = 0x537;\n  MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n  return MatrixUtil;\n}();\nexports.default = MatrixUtil;","map":{"version":3,"names":["BitArray_1","require","Integer_1","QRCode_1","MaskUtil_1","WriterException_1","IllegalArgumentException_1","MatrixUtil","clearMatrix","matrix","clear","buildMatrix","dataBits","ecLevel","version","maskPattern","embedBasicPatterns","embedTypeInfo","maybeEmbedVersionInfo","embedDataBits","embedPositionDetectionPatternsAndSeparators","embedDarkDotAtLeftBottomCorner","maybeEmbedPositionAdjustmentPatterns","embedTimingPatterns","typeInfoBits","default","makeTypeInfoBits","i","size","getSize","bit","get","coordinates","TYPE_INFO_COORDINATES","x1","y1","setBoolean","x2","getWidth","y2","getHeight","getVersionNumber","versionInfoBits","makeVersionInfoBits","bitIndex","j","direction","x","y","xx","isEmpty","getDataMaskBit","findMSBSet","value","numberOfLeadingZeros","calculateBCHCode","poly","msbSetInPoly","bits","isValidMaskPattern","typeInfo","getBits","appendBits","bchCode","TYPE_INFO_POLY","maskBits","TYPE_INFO_MASK_PATTERN","xor","VERSION_INFO_POLY","setNumber","embedHorizontalSeparationPattern","xStart","yStart","embedVerticalSeparationPattern","embedPositionAdjustmentPattern","patternY","POSITION_ADJUSTMENT_PATTERN","embedPositionDetectionPattern","POSITION_DETECTION_PATTERN","pdpWidth","length","hspWidth","vspSize","index","POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE","length_1","Array","from","Int32Array"],"sources":["../../../../src/core/qrcode/encoder/MatrixUtil.ts"],"sourcesContent":[null],"mappings":"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,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAC9CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAC9CC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EA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"},"metadata":{},"sourceType":"script"}