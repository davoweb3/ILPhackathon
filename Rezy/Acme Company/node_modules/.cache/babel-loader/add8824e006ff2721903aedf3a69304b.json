{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FormatException_1 = require(\"../../../../FormatException\");\nvar IllegalStateException_1 = require(\"../../../../IllegalStateException\");\nvar StringBuilder_1 = require(\"../../../../util/StringBuilder\");\nvar DecodedChar_1 = require(\"./DecodedChar\");\nvar DecodedNumeric_1 = require(\"./DecodedNumeric\");\nvar DecodedInformation_1 = require(\"./DecodedInformation\");\nvar FieldParser_1 = require(\"./FieldParser\");\nvar BlockParsedResult_1 = require(\"./BlockParsedResult\");\nvar GeneralAppIdDecoder = /** @class */function () {\n  function GeneralAppIdDecoder(information) {\n    this.buffer = new StringBuilder_1.default();\n    this.information = information;\n  }\n  GeneralAppIdDecoder.prototype.decodeAllCodes = function (buff, initialPosition) {\n    var currentPosition = initialPosition;\n    var remaining = null;\n    do {\n      var info = this.decodeGeneralPurposeField(currentPosition, remaining);\n      var parsedFields = FieldParser_1.default.parseFieldsInGeneralPurpose(info.getNewString());\n      if (parsedFields != null) {\n        buff.append(parsedFields);\n      }\n      if (info.isRemaining()) {\n        remaining = \"\" + info.getRemainingValue();\n      } else {\n        remaining = null;\n      }\n      if (currentPosition == info.getNewPosition()) {\n        // No step forward!\n        break;\n      }\n      currentPosition = info.getNewPosition();\n    } while (true);\n    return buff.toString();\n  };\n  GeneralAppIdDecoder.prototype.isStillNumeric = function (pos) {\n    // It's numeric if it still has 7 positions\n    // and one of the first 4 bits is \"1\".\n    if (pos + 7 > this.information.getSize()) {\n      return pos + 4 <= this.information.getSize();\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return true;\n      }\n    }\n    return this.information.get(pos + 3);\n  };\n  GeneralAppIdDecoder.prototype.decodeNumeric = function (pos) {\n    if (pos + 7 > this.information.getSize()) {\n      var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);\n      if (numeric_1 == 0) {\n        return new DecodedNumeric_1.default(this.information.getSize(), DecodedNumeric_1.default.FNC1, DecodedNumeric_1.default.FNC1);\n      }\n      return new DecodedNumeric_1.default(this.information.getSize(), numeric_1 - 1, DecodedNumeric_1.default.FNC1);\n    }\n    var numeric = this.extractNumericValueFromBitArray(pos, 7);\n    var digit1 = (numeric - 8) / 11;\n    var digit2 = (numeric - 8) % 11;\n    return new DecodedNumeric_1.default(pos + 7, digit1, digit2);\n  };\n  GeneralAppIdDecoder.prototype.extractNumericValueFromBitArray = function (pos, bits) {\n    return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\n  };\n  GeneralAppIdDecoder.extractNumericValueFromBitArray = function (information, pos, bits) {\n    var value = 0;\n    for (var i = 0; i < bits; ++i) {\n      if (information.get(pos + i)) {\n        value |= 1 << bits - i - 1;\n      }\n    }\n    return value;\n  };\n  GeneralAppIdDecoder.prototype.decodeGeneralPurposeField = function (pos, remaining) {\n    //this.buffer.setLength(0);\n    this.buffer.setLengthToZero();\n    if (remaining != null) {\n      this.buffer.append(remaining);\n    }\n    this.current.setPosition(pos);\n    var lastDecoded = this.parseBlocks();\n    if (lastDecoded != null && lastDecoded.isRemaining()) {\n      return new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\n    }\n    return new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n  };\n  GeneralAppIdDecoder.prototype.parseBlocks = function () {\n    var isFinished;\n    var result;\n    do {\n      var initialPosition = this.current.getPosition();\n      if (this.current.isAlpha()) {\n        result = this.parseAlphaBlock();\n        isFinished = result.isFinished();\n      } else if (this.current.isIsoIec646()) {\n        result = this.parseIsoIec646Block();\n        isFinished = result.isFinished();\n      } else {\n        // it must be numeric\n        result = this.parseNumericBlock();\n        isFinished = result.isFinished();\n      }\n      var positionChanged = initialPosition != this.current.getPosition();\n      if (!positionChanged && !isFinished) {\n        break;\n      }\n    } while (!isFinished);\n    return result.getDecodedInformation();\n  };\n  GeneralAppIdDecoder.prototype.parseNumericBlock = function () {\n    while (this.isStillNumeric(this.current.getPosition())) {\n      var numeric = this.decodeNumeric(this.current.getPosition());\n      this.current.setPosition(numeric.getNewPosition());\n      if (numeric.isFirstDigitFNC1()) {\n        var information = void 0;\n        if (numeric.isSecondDigitFNC1()) {\n          information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n        } else {\n          information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\n        }\n        return new BlockParsedResult_1.default(true, information);\n      }\n      this.buffer.append(numeric.getFirstDigit());\n      if (numeric.isSecondDigitFNC1()) {\n        var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult_1.default(true, information);\n      }\n      this.buffer.append(numeric.getSecondDigit());\n    }\n    if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\n      this.current.setAlpha();\n      this.current.incrementPosition(4);\n    }\n    return new BlockParsedResult_1.default(false);\n  };\n  GeneralAppIdDecoder.prototype.parseIsoIec646Block = function () {\n    while (this.isStillIsoIec646(this.current.getPosition())) {\n      var iso = this.decodeIsoIec646(this.current.getPosition());\n      this.current.setPosition(iso.getNewPosition());\n      if (iso.isFNC1()) {\n        var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult_1.default(true, information);\n      }\n      this.buffer.append(iso.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setAlpha();\n    }\n    return new BlockParsedResult_1.default(false);\n  };\n  GeneralAppIdDecoder.prototype.parseAlphaBlock = function () {\n    while (this.isStillAlpha(this.current.getPosition())) {\n      var alpha = this.decodeAlphanumeric(this.current.getPosition());\n      this.current.setPosition(alpha.getNewPosition());\n      if (alpha.isFNC1()) {\n        var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n        return new BlockParsedResult_1.default(true, information); //end of the char block\n      }\n\n      this.buffer.append(alpha.getValue());\n    }\n    if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n      this.current.incrementPosition(3);\n      this.current.setNumeric();\n    } else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n      if (this.current.getPosition() + 5 < this.information.getSize()) {\n        this.current.incrementPosition(5);\n      } else {\n        this.current.setPosition(this.information.getSize());\n      }\n      this.current.setIsoIec646();\n    }\n    return new BlockParsedResult_1.default(false);\n  };\n  GeneralAppIdDecoder.prototype.isStillIsoIec646 = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 7 > this.information.getSize()) {\n      return false;\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 116) {\n      return true;\n    }\n    if (pos + 8 > this.information.getSize()) {\n      return false;\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    return eightBitValue >= 232 && eightBitValue < 253;\n  };\n  GeneralAppIdDecoder.prototype.decodeIsoIec646 = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue == 15) {\n      return new DecodedChar_1.default(pos + 5, DecodedChar_1.default.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar_1.default(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n    if (sevenBitValue >= 64 && sevenBitValue < 90) {\n      return new DecodedChar_1.default(pos + 7, \"\" + (sevenBitValue + 1));\n    }\n    if (sevenBitValue >= 90 && sevenBitValue < 116) {\n      return new DecodedChar_1.default(pos + 7, \"\" + (sevenBitValue + 7));\n    }\n    var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n    var c;\n    switch (eightBitValue) {\n      case 232:\n        c = '!';\n        break;\n      case 233:\n        c = '\"';\n        break;\n      case 234:\n        c = '%';\n        break;\n      case 235:\n        c = '&';\n        break;\n      case 236:\n        c = '\\'';\n        break;\n      case 237:\n        c = '(';\n        break;\n      case 238:\n        c = ')';\n        break;\n      case 239:\n        c = '*';\n        break;\n      case 240:\n        c = '+';\n        break;\n      case 241:\n        c = ',';\n        break;\n      case 242:\n        c = '-';\n        break;\n      case 243:\n        c = '.';\n        break;\n      case 244:\n        c = '/';\n        break;\n      case 245:\n        c = ':';\n        break;\n      case 246:\n        c = ';';\n        break;\n      case 247:\n        c = '<';\n        break;\n      case 248:\n        c = '=';\n        break;\n      case 249:\n        c = '>';\n        break;\n      case 250:\n        c = '?';\n        break;\n      case 251:\n        c = '_';\n        break;\n      case 252:\n        c = ' ';\n        break;\n      default:\n        throw new FormatException_1.default();\n    }\n    return new DecodedChar_1.default(pos + 8, c);\n  };\n  GeneralAppIdDecoder.prototype.isStillAlpha = function (pos) {\n    if (pos + 5 > this.information.getSize()) {\n      return false;\n    }\n    // We now check if it's a valid 5-bit value (0..9 and FNC1)\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue >= 5 && fiveBitValue < 16) {\n      return true;\n    }\n    if (pos + 6 > this.information.getSize()) {\n      return false;\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\n  };\n\n  GeneralAppIdDecoder.prototype.decodeAlphanumeric = function (pos) {\n    var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n    if (fiveBitValue == 15) {\n      return new DecodedChar_1.default(pos + 5, DecodedChar_1.default.FNC1);\n    }\n    if (fiveBitValue >= 5 && fiveBitValue < 15) {\n      return new DecodedChar_1.default(pos + 5, '0' + (fiveBitValue - 5));\n    }\n    var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n    if (sixBitValue >= 32 && sixBitValue < 58) {\n      return new DecodedChar_1.default(pos + 6, '' + (sixBitValue + 33));\n    }\n    var c;\n    switch (sixBitValue) {\n      case 58:\n        c = '*';\n        break;\n      case 59:\n        c = ',';\n        break;\n      case 60:\n        c = '-';\n        break;\n      case 61:\n        c = '.';\n        break;\n      case 62:\n        c = '/';\n        break;\n      default:\n        throw new IllegalStateException_1.default(\"Decoding invalid alphanumeric value: \" + sixBitValue);\n    }\n    return new DecodedChar_1.default(pos + 6, c);\n  };\n  GeneralAppIdDecoder.prototype.isAlphaTo646ToAlphaLatch = function (pos) {\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\n      if (i == 2) {\n        if (!this.information.get(pos + 2)) {\n          return false;\n        }\n      } else if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isAlphaOr646ToNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 3 positions and they are all zeros\n    if (pos + 3 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = pos; i < pos + 3; ++i) {\n      if (this.information.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  GeneralAppIdDecoder.prototype.isNumericToAlphaNumericLatch = function (pos) {\n    // Next is alphanumeric if there are 4 positions and they are all zeros, or\n    // if there is a subset of this just before the end of the symbol\n    if (pos + 1 > this.information.getSize()) {\n      return false;\n    }\n    for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\n      if (this.information.get(pos + i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return GeneralAppIdDecoder;\n}();\nexports.default = GeneralAppIdDecoder;","map":{"version":3,"sources":["../../../../../../src/core/oned/rss/expanded/decoders/GeneralAppIdDecoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FormatException_1 = require(\"../../../../FormatException\");\nvar IllegalStateException_1 = require(\"../../../../IllegalStateException\");\nvar StringBuilder_1 = require(\"../../../../util/StringBuilder\");\nvar DecodedChar_1 = require(\"./DecodedChar\");\nvar DecodedNumeric_1 = require(\"./DecodedNumeric\");\nvar DecodedInformation_1 = require(\"./DecodedInformation\");\nvar FieldParser_1 = require(\"./FieldParser\");\nvar BlockParsedResult_1 = require(\"./BlockParsedResult\");\nvar GeneralAppIdDecoder = /** @class */ (function () {\n    function GeneralAppIdDecoder(information) {\n        this.buffer = new StringBuilder_1.default();\n        this.information = information;\n    }\n    GeneralAppIdDecoder.prototype.decodeAllCodes = function (buff, initialPosition) {\n        var currentPosition = initialPosition;\n        var remaining = null;\n        do {\n            var info = this.decodeGeneralPurposeField(currentPosition, remaining);\n            var parsedFields = FieldParser_1.default.parseFieldsInGeneralPurpose(info.getNewString());\n            if (parsedFields != null) {\n                buff.append(parsedFields);\n            }\n            if (info.isRemaining()) {\n                remaining = \"\" + info.getRemainingValue();\n            }\n            else {\n                remaining = null;\n            }\n            if (currentPosition == info.getNewPosition()) { // No step forward!\n                break;\n            }\n            currentPosition = info.getNewPosition();\n        } while (true);\n        return buff.toString();\n    };\n    GeneralAppIdDecoder.prototype.isStillNumeric = function (pos) {\n        // It's numeric if it still has 7 positions\n        // and one of the first 4 bits is \"1\".\n        if (pos + 7 > this.information.getSize()) {\n            return pos + 4 <= this.information.getSize();\n        }\n        for (var i = pos; i < pos + 3; ++i) {\n            if (this.information.get(i)) {\n                return true;\n            }\n        }\n        return this.information.get(pos + 3);\n    };\n    GeneralAppIdDecoder.prototype.decodeNumeric = function (pos) {\n        if (pos + 7 > this.information.getSize()) {\n            var numeric_1 = this.extractNumericValueFromBitArray(pos, 4);\n            if (numeric_1 == 0) {\n                return new DecodedNumeric_1.default(this.information.getSize(), DecodedNumeric_1.default.FNC1, DecodedNumeric_1.default.FNC1);\n            }\n            return new DecodedNumeric_1.default(this.information.getSize(), numeric_1 - 1, DecodedNumeric_1.default.FNC1);\n        }\n        var numeric = this.extractNumericValueFromBitArray(pos, 7);\n        var digit1 = (numeric - 8) / 11;\n        var digit2 = (numeric - 8) % 11;\n        return new DecodedNumeric_1.default(pos + 7, digit1, digit2);\n    };\n    GeneralAppIdDecoder.prototype.extractNumericValueFromBitArray = function (pos, bits) {\n        return GeneralAppIdDecoder.extractNumericValueFromBitArray(this.information, pos, bits);\n    };\n    GeneralAppIdDecoder.extractNumericValueFromBitArray = function (information, pos, bits) {\n        var value = 0;\n        for (var i = 0; i < bits; ++i) {\n            if (information.get(pos + i)) {\n                value |= 1 << (bits - i - 1);\n            }\n        }\n        return value;\n    };\n    GeneralAppIdDecoder.prototype.decodeGeneralPurposeField = function (pos, remaining) {\n        //this.buffer.setLength(0);\n        this.buffer.setLengthToZero();\n        if (remaining != null) {\n            this.buffer.append(remaining);\n        }\n        this.current.setPosition(pos);\n        var lastDecoded = this.parseBlocks();\n        if (lastDecoded != null && lastDecoded.isRemaining()) {\n            return new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString(), lastDecoded.getRemainingValue());\n        }\n        return new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n    };\n    GeneralAppIdDecoder.prototype.parseBlocks = function () {\n        var isFinished;\n        var result;\n        do {\n            var initialPosition = this.current.getPosition();\n            if (this.current.isAlpha()) {\n                result = this.parseAlphaBlock();\n                isFinished = result.isFinished();\n            }\n            else if (this.current.isIsoIec646()) {\n                result = this.parseIsoIec646Block();\n                isFinished = result.isFinished();\n            }\n            else { // it must be numeric\n                result = this.parseNumericBlock();\n                isFinished = result.isFinished();\n            }\n            var positionChanged = initialPosition != this.current.getPosition();\n            if (!positionChanged && !isFinished) {\n                break;\n            }\n        } while (!isFinished);\n        return result.getDecodedInformation();\n    };\n    GeneralAppIdDecoder.prototype.parseNumericBlock = function () {\n        while (this.isStillNumeric(this.current.getPosition())) {\n            var numeric = this.decodeNumeric(this.current.getPosition());\n            this.current.setPosition(numeric.getNewPosition());\n            if (numeric.isFirstDigitFNC1()) {\n                var information = void 0;\n                if (numeric.isSecondDigitFNC1()) {\n                    information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n                }\n                else {\n                    information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString(), numeric.getSecondDigit());\n                }\n                return new BlockParsedResult_1.default(true, information);\n            }\n            this.buffer.append(numeric.getFirstDigit());\n            if (numeric.isSecondDigitFNC1()) {\n                var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n                return new BlockParsedResult_1.default(true, information);\n            }\n            this.buffer.append(numeric.getSecondDigit());\n        }\n        if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {\n            this.current.setAlpha();\n            this.current.incrementPosition(4);\n        }\n        return new BlockParsedResult_1.default(false);\n    };\n    GeneralAppIdDecoder.prototype.parseIsoIec646Block = function () {\n        while (this.isStillIsoIec646(this.current.getPosition())) {\n            var iso = this.decodeIsoIec646(this.current.getPosition());\n            this.current.setPosition(iso.getNewPosition());\n            if (iso.isFNC1()) {\n                var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n                return new BlockParsedResult_1.default(true, information);\n            }\n            this.buffer.append(iso.getValue());\n        }\n        if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n            this.current.incrementPosition(3);\n            this.current.setNumeric();\n        }\n        else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n            if (this.current.getPosition() + 5 < this.information.getSize()) {\n                this.current.incrementPosition(5);\n            }\n            else {\n                this.current.setPosition(this.information.getSize());\n            }\n            this.current.setAlpha();\n        }\n        return new BlockParsedResult_1.default(false);\n    };\n    GeneralAppIdDecoder.prototype.parseAlphaBlock = function () {\n        while (this.isStillAlpha(this.current.getPosition())) {\n            var alpha = this.decodeAlphanumeric(this.current.getPosition());\n            this.current.setPosition(alpha.getNewPosition());\n            if (alpha.isFNC1()) {\n                var information = new DecodedInformation_1.default(this.current.getPosition(), this.buffer.toString());\n                return new BlockParsedResult_1.default(true, information); //end of the char block\n            }\n            this.buffer.append(alpha.getValue());\n        }\n        if (this.isAlphaOr646ToNumericLatch(this.current.getPosition())) {\n            this.current.incrementPosition(3);\n            this.current.setNumeric();\n        }\n        else if (this.isAlphaTo646ToAlphaLatch(this.current.getPosition())) {\n            if (this.current.getPosition() + 5 < this.information.getSize()) {\n                this.current.incrementPosition(5);\n            }\n            else {\n                this.current.setPosition(this.information.getSize());\n            }\n            this.current.setIsoIec646();\n        }\n        return new BlockParsedResult_1.default(false);\n    };\n    GeneralAppIdDecoder.prototype.isStillIsoIec646 = function (pos) {\n        if (pos + 5 > this.information.getSize()) {\n            return false;\n        }\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n        if (fiveBitValue >= 5 && fiveBitValue < 16) {\n            return true;\n        }\n        if (pos + 7 > this.information.getSize()) {\n            return false;\n        }\n        var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n        if (sevenBitValue >= 64 && sevenBitValue < 116) {\n            return true;\n        }\n        if (pos + 8 > this.information.getSize()) {\n            return false;\n        }\n        var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n        return eightBitValue >= 232 && eightBitValue < 253;\n    };\n    GeneralAppIdDecoder.prototype.decodeIsoIec646 = function (pos) {\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n        if (fiveBitValue == 15) {\n            return new DecodedChar_1.default(pos + 5, DecodedChar_1.default.FNC1);\n        }\n        if (fiveBitValue >= 5 && fiveBitValue < 15) {\n            return new DecodedChar_1.default(pos + 5, ('0' + (fiveBitValue - 5)));\n        }\n        var sevenBitValue = this.extractNumericValueFromBitArray(pos, 7);\n        if (sevenBitValue >= 64 && sevenBitValue < 90) {\n            return new DecodedChar_1.default(pos + 7, (\"\" + (sevenBitValue + 1)));\n        }\n        if (sevenBitValue >= 90 && sevenBitValue < 116) {\n            return new DecodedChar_1.default(pos + 7, (\"\" + (sevenBitValue + 7)));\n        }\n        var eightBitValue = this.extractNumericValueFromBitArray(pos, 8);\n        var c;\n        switch (eightBitValue) {\n            case 232:\n                c = '!';\n                break;\n            case 233:\n                c = '\"';\n                break;\n            case 234:\n                c = '%';\n                break;\n            case 235:\n                c = '&';\n                break;\n            case 236:\n                c = '\\'';\n                break;\n            case 237:\n                c = '(';\n                break;\n            case 238:\n                c = ')';\n                break;\n            case 239:\n                c = '*';\n                break;\n            case 240:\n                c = '+';\n                break;\n            case 241:\n                c = ',';\n                break;\n            case 242:\n                c = '-';\n                break;\n            case 243:\n                c = '.';\n                break;\n            case 244:\n                c = '/';\n                break;\n            case 245:\n                c = ':';\n                break;\n            case 246:\n                c = ';';\n                break;\n            case 247:\n                c = '<';\n                break;\n            case 248:\n                c = '=';\n                break;\n            case 249:\n                c = '>';\n                break;\n            case 250:\n                c = '?';\n                break;\n            case 251:\n                c = '_';\n                break;\n            case 252:\n                c = ' ';\n                break;\n            default:\n                throw new FormatException_1.default();\n        }\n        return new DecodedChar_1.default(pos + 8, c);\n    };\n    GeneralAppIdDecoder.prototype.isStillAlpha = function (pos) {\n        if (pos + 5 > this.information.getSize()) {\n            return false;\n        }\n        // We now check if it's a valid 5-bit value (0..9 and FNC1)\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n        if (fiveBitValue >= 5 && fiveBitValue < 16) {\n            return true;\n        }\n        if (pos + 6 > this.information.getSize()) {\n            return false;\n        }\n        var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n        return sixBitValue >= 16 && sixBitValue < 63; // 63 not included\n    };\n    GeneralAppIdDecoder.prototype.decodeAlphanumeric = function (pos) {\n        var fiveBitValue = this.extractNumericValueFromBitArray(pos, 5);\n        if (fiveBitValue == 15) {\n            return new DecodedChar_1.default(pos + 5, DecodedChar_1.default.FNC1);\n        }\n        if (fiveBitValue >= 5 && fiveBitValue < 15) {\n            return new DecodedChar_1.default(pos + 5, ('0' + (fiveBitValue - 5)));\n        }\n        var sixBitValue = this.extractNumericValueFromBitArray(pos, 6);\n        if (sixBitValue >= 32 && sixBitValue < 58) {\n            return new DecodedChar_1.default(pos + 6, ('' + (sixBitValue + 33)));\n        }\n        var c;\n        switch (sixBitValue) {\n            case 58:\n                c = '*';\n                break;\n            case 59:\n                c = ',';\n                break;\n            case 60:\n                c = '-';\n                break;\n            case 61:\n                c = '.';\n                break;\n            case 62:\n                c = '/';\n                break;\n            default:\n                throw new IllegalStateException_1.default(\"Decoding invalid alphanumeric value: \" + sixBitValue);\n        }\n        return new DecodedChar_1.default(pos + 6, c);\n    };\n    GeneralAppIdDecoder.prototype.isAlphaTo646ToAlphaLatch = function (pos) {\n        if (pos + 1 > this.information.getSize()) {\n            return false;\n        }\n        for (var i = 0; i < 5 && i + pos < this.information.getSize(); ++i) {\n            if (i == 2) {\n                if (!this.information.get(pos + 2)) {\n                    return false;\n                }\n            }\n            else if (this.information.get(pos + i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    GeneralAppIdDecoder.prototype.isAlphaOr646ToNumericLatch = function (pos) {\n        // Next is alphanumeric if there are 3 positions and they are all zeros\n        if (pos + 3 > this.information.getSize()) {\n            return false;\n        }\n        for (var i = pos; i < pos + 3; ++i) {\n            if (this.information.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    GeneralAppIdDecoder.prototype.isNumericToAlphaNumericLatch = function (pos) {\n        // Next is alphanumeric if there are 4 positions and they are all zeros, or\n        // if there is a subset of this just before the end of the symbol\n        if (pos + 1 > this.information.getSize()) {\n            return false;\n        }\n        for (var i = 0; i < 4 && i + pos < this.information.getSize(); ++i) {\n            if (this.information.get(pos + i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return GeneralAppIdDecoder;\n}());\nexports.default = GeneralAppIdDecoder;\n//# sourceMappingURL=GeneralAppIdDecoder.js.map"]},"metadata":{},"sourceType":"script"}