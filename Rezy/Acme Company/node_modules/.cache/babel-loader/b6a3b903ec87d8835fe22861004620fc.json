{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar __1 = require(\"../../..\");\nvar Integer_1 = require(\"../../util/Integer\");\n// import java.util.Arrays;\nvar Table;\n(function (Table) {\n  Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n  Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n  Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n  Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n  Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n  Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n})(Table || (Table = {}));\n/**\n * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n * the Aztec Code from an image.</p>\n *\n * @author David Olivier\n */\nvar Decoder = /** @class */function () {\n  function Decoder() {}\n  Decoder.prototype.decode = function (detectorResult) {\n    this.ddata = detectorResult;\n    var matrix = detectorResult.getBits();\n    var rawbits = this.extractBits(matrix);\n    var correctedBits = this.correctBits(rawbits);\n    var rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n    var result = Decoder.getEncodedData(correctedBits);\n    var decoderResult = new DecoderResult_1.default(rawBytes, result, null, null);\n    decoderResult.setNumBits(correctedBits.length);\n    return decoderResult;\n  };\n  // This method is used for testing the high-level encoder\n  Decoder.highLevelDecode = function (correctedBits) {\n    return this.getEncodedData(correctedBits);\n  };\n  /**\n   * Gets the string encoded in the aztec code bits\n   *\n   * @return the decoded string\n   */\n  Decoder.getEncodedData = function (correctedBits) {\n    var endIndex = correctedBits.length;\n    var latchTable = Table.UPPER; // table most recently latched to\n    var shiftTable = Table.UPPER; // table to use for the next read\n    var result = '';\n    var index = 0;\n    while (index < endIndex) {\n      if (shiftTable === Table.BINARY) {\n        if (endIndex - index < 5) {\n          break;\n        }\n        var length_1 = Decoder.readCode(correctedBits, index, 5);\n        index += 5;\n        if (length_1 === 0) {\n          if (endIndex - index < 11) {\n            break;\n          }\n          length_1 = Decoder.readCode(correctedBits, index, 11) + 31;\n          index += 11;\n        }\n        for (var charCount = 0; charCount < length_1; charCount++) {\n          if (endIndex - index < 8) {\n            index = endIndex; // Force outer loop to exit\n            break;\n          }\n          var code = Decoder.readCode(correctedBits, index, 8);\n          result += /*(char)*/__1.StringUtils.castAsNonUtf8Char(code);\n          index += 8;\n        }\n        // Go back to whatever mode we had been in\n        shiftTable = latchTable;\n      } else {\n        var size = shiftTable === Table.DIGIT ? 4 : 5;\n        if (endIndex - index < size) {\n          break;\n        }\n        var code = Decoder.readCode(correctedBits, index, size);\n        index += size;\n        var str = Decoder.getCharacter(shiftTable, code);\n        if (str.startsWith('CTRL_')) {\n          // Table changes\n          // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n          // That's including when that mode is a shift.\n          // Our test case dlusbs.png for issue #642 exercises that.\n          latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n          shiftTable = Decoder.getTable(str.charAt(5));\n          if (str.charAt(6) === 'L') {\n            latchTable = shiftTable;\n          }\n        } else {\n          result += str;\n          // Go back to whatever mode we had been in\n          shiftTable = latchTable;\n        }\n      }\n    }\n    return result;\n  };\n  /**\n   * gets the table corresponding to the char passed\n   */\n  Decoder.getTable = function (t) {\n    switch (t) {\n      case 'L':\n        return Table.LOWER;\n      case 'P':\n        return Table.PUNCT;\n      case 'M':\n        return Table.MIXED;\n      case 'D':\n        return Table.DIGIT;\n      case 'B':\n        return Table.BINARY;\n      case 'U':\n      default:\n        return Table.UPPER;\n    }\n  };\n  /**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */\n  Decoder.getCharacter = function (table, code) {\n    switch (table) {\n      case Table.UPPER:\n        return Decoder.UPPER_TABLE[code];\n      case Table.LOWER:\n        return Decoder.LOWER_TABLE[code];\n      case Table.MIXED:\n        return Decoder.MIXED_TABLE[code];\n      case Table.PUNCT:\n        return Decoder.PUNCT_TABLE[code];\n      case Table.DIGIT:\n        return Decoder.DIGIT_TABLE[code];\n      default:\n        // Should not reach here.\n        throw new IllegalStateException_1.default('Bad table');\n    }\n  };\n  /**\n   * <p>Performs RS error correction on an array of bits.</p>\n   *\n   * @return the corrected array\n   * @throws FormatException if the input contains too many errors\n   */\n  Decoder.prototype.correctBits = function (rawbits) {\n    var gf;\n    var codewordSize;\n    if (this.ddata.getNbLayers() <= 2) {\n      codewordSize = 6;\n      gf = GenericGF_1.default.AZTEC_DATA_6;\n    } else if (this.ddata.getNbLayers() <= 8) {\n      codewordSize = 8;\n      gf = GenericGF_1.default.AZTEC_DATA_8;\n    } else if (this.ddata.getNbLayers() <= 22) {\n      codewordSize = 10;\n      gf = GenericGF_1.default.AZTEC_DATA_10;\n    } else {\n      codewordSize = 12;\n      gf = GenericGF_1.default.AZTEC_DATA_12;\n    }\n    var numDataCodewords = this.ddata.getNbDatablocks();\n    var numCodewords = rawbits.length / codewordSize;\n    if (numCodewords < numDataCodewords) {\n      throw new FormatException_1.default();\n    }\n    var offset = rawbits.length % codewordSize;\n    var dataWords = new Int32Array(numCodewords);\n    for (var i = 0; i < numCodewords; i++, offset += codewordSize) {\n      dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n    }\n    try {\n      var rsDecoder = new ReedSolomonDecoder_1.default(gf);\n      rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n    } catch (ex) {\n      throw new FormatException_1.default(ex);\n    }\n    // Now perform the unstuffing operation.\n    // First, count how many bits are going to be thrown out as stuffing\n    var mask = (1 << codewordSize) - 1;\n    var stuffedBits = 0;\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n      if (dataWord === 0 || dataWord === mask) {\n        throw new FormatException_1.default();\n      } else if (dataWord === 1 || dataWord === mask - 1) {\n        stuffedBits++;\n      }\n    }\n    // Now, actually unpack the bits and remove the stuffing\n    var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n    var index = 0;\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n      if (dataWord === 1 || dataWord === mask - 1) {\n        // next codewordSize-1 bits are all zeros or all ones\n        correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);\n        // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n        index += codewordSize - 1;\n      } else {\n        for (var bit = codewordSize - 1; bit >= 0; --bit) {\n          correctedBits[index++] = (dataWord & 1 << bit) !== 0;\n        }\n      }\n    }\n    return correctedBits;\n  };\n  /**\n   * Gets the array of bits from an Aztec Code matrix\n   *\n   * @return the array of bits\n   */\n  Decoder.prototype.extractBits = function (matrix) {\n    var compact = this.ddata.isCompact();\n    var layers = this.ddata.getNbLayers();\n    var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n    var alignmentMap = new Int32Array(baseMatrixSize);\n    var rawbits = new Array(this.totalBitsInLayer(layers, compact));\n    if (compact) {\n      for (var i = 0; i < alignmentMap.length; i++) {\n        alignmentMap[i] = i;\n      }\n    } else {\n      var matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision(Integer_1.default.truncDivision(baseMatrixSize, 2) - 1, 15);\n      var origCenter = baseMatrixSize / 2;\n      var center = Integer_1.default.truncDivision(matrixSize, 2);\n      for (var i = 0; i < origCenter; i++) {\n        var newOffset = i + Integer_1.default.truncDivision(i, 15);\n        alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n        alignmentMap[origCenter + i] = center + newOffset + 1;\n      }\n    }\n    for (var i = 0, rowOffset = 0; i < layers; i++) {\n      var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n      // The top-left most point of this layer is <low, low> (not including alignment lines)\n      var low = i * 2;\n      // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n      var high = baseMatrixSize - 1 - low;\n      // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n      for (var j = 0; j < rowSize; j++) {\n        var columnOffset = j * 2;\n        for (var k = 0; k < 2; k++) {\n          // left column\n          rawbits[rowOffset + columnOffset + k] = matrix.get(alignmentMap[low + k], alignmentMap[low + j]);\n          // bottom row\n          rawbits[rowOffset + 2 * rowSize + columnOffset + k] = matrix.get(alignmentMap[low + j], alignmentMap[high - k]);\n          // right column\n          rawbits[rowOffset + 4 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - k], alignmentMap[high - j]);\n          // top row\n          rawbits[rowOffset + 6 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n        }\n      }\n      rowOffset += rowSize * 8;\n    }\n    return rawbits;\n  };\n  /**\n   * Reads a code of given length and at given index in an array of bits\n   */\n  Decoder.readCode = function (rawbits, startIndex, length) {\n    var res = 0;\n    for (var i = startIndex; i < startIndex + length; i++) {\n      res <<= 1;\n      if (rawbits[i]) {\n        res |= 0x01;\n      }\n    }\n    return res;\n  };\n  /**\n   * Reads a code of length 8 in an array of bits, padding with zeros\n   */\n  Decoder.readByte = function (rawbits, startIndex) {\n    var n = rawbits.length - startIndex;\n    if (n >= 8) {\n      return Decoder.readCode(rawbits, startIndex, 8);\n    }\n    return Decoder.readCode(rawbits, startIndex, n) << 8 - n;\n  };\n  /**\n   * Packs a bit array into bytes, most significant bit first\n   */\n  Decoder.convertBoolArrayToByteArray = function (boolArr) {\n    var byteArr = new Uint8Array((boolArr.length + 7) / 8);\n    for (var i = 0; i < byteArr.length; i++) {\n      byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n    }\n    return byteArr;\n  };\n  Decoder.prototype.totalBitsInLayer = function (layers, compact) {\n    return ((compact ? 88 : 112) + 16 * layers) * layers;\n  };\n  Decoder.UPPER_TABLE = ['CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.LOWER_TABLE = ['CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.MIXED_TABLE = [\n  // Module parse failed: Octal literal in strict mode (50:29)\n  // so number string were scaped\n  'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n', '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_', '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'];\n  Decoder.PUNCT_TABLE = ['', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'];\n  Decoder.DIGIT_TABLE = ['CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'];\n  return Decoder;\n}();\nexports.default = Decoder;","map":{"version":3,"names":["DecoderResult_1","require","GenericGF_1","ReedSolomonDecoder_1","IllegalStateException_1","FormatException_1","__1","Integer_1","Table","Decoder","prototype","decode","detectorResult","ddata","matrix","getBits","rawbits","extractBits","correctedBits","correctBits","rawBytes","convertBoolArrayToByteArray","result","getEncodedData","decoderResult","default","setNumBits","length","highLevelDecode","endIndex","latchTable","UPPER","shiftTable","index","BINARY","length_1","readCode","charCount","code","StringUtils","castAsNonUtf8Char","size","DIGIT","str","getCharacter","startsWith","getTable","charAt","t","LOWER","PUNCT","MIXED","table","UPPER_TABLE","LOWER_TABLE","MIXED_TABLE","PUNCT_TABLE","DIGIT_TABLE","gf","codewordSize","getNbLayers","AZTEC_DATA_6","AZTEC_DATA_8","AZTEC_DATA_10","AZTEC_DATA_12","numDataCodewords","getNbDatablocks","numCodewords","offset","dataWords","Int32Array","i","rsDecoder","ex","mask","stuffedBits","dataWord","Array","fill","bit","compact","isCompact","layers","baseMatrixSize","alignmentMap","totalBitsInLayer","matrixSize","truncDivision","origCenter","center","newOffset","rowOffset","rowSize","low","high","j","columnOffset","k","get","startIndex","res","readByte","n","boolArr","byteArr","Uint8Array"],"sources":["../../../../src/core/aztec/decoder/Decoder.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}