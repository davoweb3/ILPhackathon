{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\n * It allows the algorithm to vary polymorphically, for example allowing a very expensive\n * thresholding technique for servers and a fast one for mobile. It also permits the implementation\n * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar Binarizer = /** @class */function () {\n  function Binarizer(source) {\n    this.source = source;\n  }\n  Binarizer.prototype.getLuminanceSource = function () {\n    return this.source;\n  };\n  Binarizer.prototype.getWidth = function () {\n    return this.source.getWidth();\n  };\n  Binarizer.prototype.getHeight = function () {\n    return this.source.getHeight();\n  };\n  return Binarizer;\n}();\nexports.default = Binarizer;","map":{"version":3,"sources":["../../src/core/Binarizer.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;AAQH;;;;;;;AAOG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAEI,SAAA,SAAA,CAA8B,MAAuB,EAAA;IAAvB,IAAA,CAAA,MAAM,GAAN,MAAM;EAAqB;EAElD,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,YAAA;IACI,OAAO,IAAI,CAAC,MAAM;EACtB,CAAC;EAuCM,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;EACjC,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACI,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;EAClC,CAAC;EACL,OAAA,SAAC;AAAD,CAAC,EAAA;AAED,OAAA,CAAA,OAAA,GAAe,SAAS","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\n * It allows the algorithm to vary polymorphically, for example allowing a very expensive\n * thresholding technique for servers and a fast one for mobile. It also permits the implementation\n * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar Binarizer = /** @class */ (function () {\n    function Binarizer(source) {\n        this.source = source;\n    }\n    Binarizer.prototype.getLuminanceSource = function () {\n        return this.source;\n    };\n    Binarizer.prototype.getWidth = function () {\n        return this.source.getWidth();\n    };\n    Binarizer.prototype.getHeight = function () {\n        return this.source.getHeight();\n    };\n    return Binarizer;\n}());\nexports.default = Binarizer;\n//# sourceMappingURL=Binarizer.js.map"]},"metadata":{},"sourceType":"script"}