{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGF_1 = require(\"./GenericGF\");\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar ReedSolomonException_1 = require(\"../../ReedSolomonException\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/**\n * <p>Implements Reed-Solomon decoding, as the name implies.</p>\n *\n * <p>The algorithm will not be explained here, but the following references were helpful\n * in creating this implementation:</p>\n *\n * <ul>\n * <li>Bruce Maggs.\n * <a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps\">\n * \"Decoding Reed-Solomon Codes\"</a> (see discussion of Forney's Formula)</li>\n * <li>J.I. Hall. <a href=\"www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf\">\n * \"Chapter 5. Generalized Reed-Solomon Codes\"</a>\n * (see discussion of Euclidean algorithm)</li>\n * </ul>\n *\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n * port of his C++ Reed-Solomon implementation.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n * @author sanfordsquires\n */\nvar ReedSolomonDecoder = /** @class */function () {\n  function ReedSolomonDecoder(field) {\n    this.field = field;\n  }\n  /**\n   * <p>Decodes given set of received codewords, which include both data and error-correction\n   * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n   * in the input.</p>\n   *\n   * @param received data and error-correction codewords\n   * @param twoS number of error-correction codewords available\n   * @throws ReedSolomonException if decoding fails for any reason\n   */\n  ReedSolomonDecoder.prototype.decode = function (received, twoS /*int*/) {\n    var field = this.field;\n    var poly = new GenericGFPoly_1.default(field, received);\n    var syndromeCoefficients = new Int32Array(twoS);\n    var noError = true;\n    for (var i = 0; i < twoS; i++) {\n      var evalResult = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n      syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalResult;\n      if (evalResult !== 0) {\n        noError = false;\n      }\n    }\n    if (noError) {\n      return;\n    }\n    var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);\n    var sigmaOmega = this.runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n    var sigma = sigmaOmega[0];\n    var omega = sigmaOmega[1];\n    var errorLocations = this.findErrorLocations(sigma);\n    var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);\n    for (var i = 0; i < errorLocations.length; i++) {\n      var position = received.length - 1 - field.log(errorLocations[i]);\n      if (position < 0) {\n        throw new ReedSolomonException_1.default('Bad error location');\n      }\n      received[position] = GenericGF_1.default.addOrSubtract(received[position], errorMagnitudes[i]);\n    }\n  };\n  ReedSolomonDecoder.prototype.runEuclideanAlgorithm = function (a, b, R /*int*/) {\n    // Assume a's degree is >= b's\n    if (a.getDegree() < b.getDegree()) {\n      var temp = a;\n      a = b;\n      b = temp;\n    }\n    var field = this.field;\n    var rLast = a;\n    var r = b;\n    var tLast = field.getZero();\n    var t = field.getOne();\n    // Run Euclidean algorithm until r's degree is less than R/2\n    while (r.getDegree() >= (R / 2 | 0)) {\n      var rLastLast = rLast;\n      var tLastLast = tLast;\n      rLast = r;\n      tLast = t;\n      // Divide rLastLast by rLast, with quotient in q and remainder in r\n      if (rLast.isZero()) {\n        // Oops, Euclidean algorithm already terminated?\n        throw new ReedSolomonException_1.default('r_{i-1} was zero');\n      }\n      r = rLastLast;\n      var q = field.getZero();\n      var denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());\n      var dltInverse = field.inverse(denominatorLeadingTerm);\n      while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {\n        var degreeDiff = r.getDegree() - rLast.getDegree();\n        var scale = field.multiply(r.getCoefficient(r.getDegree()), dltInverse);\n        q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n        r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n      }\n      t = q.multiply(tLast).addOrSubtract(tLastLast);\n      if (r.getDegree() >= rLast.getDegree()) {\n        throw new IllegalStateException_1.default('Division algorithm failed to reduce polynomial?');\n      }\n    }\n    var sigmaTildeAtZero = t.getCoefficient(0);\n    if (sigmaTildeAtZero === 0) {\n      throw new ReedSolomonException_1.default('sigmaTilde(0) was zero');\n    }\n    var inverse = field.inverse(sigmaTildeAtZero);\n    var sigma = t.multiplyScalar(inverse);\n    var omega = r.multiplyScalar(inverse);\n    return [sigma, omega];\n  };\n  ReedSolomonDecoder.prototype.findErrorLocations = function (errorLocator) {\n    // This is a direct application of Chien's search\n    var numErrors = errorLocator.getDegree();\n    if (numErrors === 1) {\n      // shortcut\n      return Int32Array.from([errorLocator.getCoefficient(1)]);\n    }\n    var result = new Int32Array(numErrors);\n    var e = 0;\n    var field = this.field;\n    for (var i = 1; i < field.getSize() && e < numErrors; i++) {\n      if (errorLocator.evaluateAt(i) === 0) {\n        result[e] = field.inverse(i);\n        e++;\n      }\n    }\n    if (e !== numErrors) {\n      throw new ReedSolomonException_1.default('Error locator degree does not match number of roots');\n    }\n    return result;\n  };\n  ReedSolomonDecoder.prototype.findErrorMagnitudes = function (errorEvaluator, errorLocations) {\n    // This is directly applying Forney's Formula\n    var s = errorLocations.length;\n    var result = new Int32Array(s);\n    var field = this.field;\n    for (var i = 0; i < s; i++) {\n      var xiInverse = field.inverse(errorLocations[i]);\n      var denominator = 1;\n      for (var j = 0; j < s; j++) {\n        if (i !== j) {\n          // denominator = field.multiply(denominator,\n          //    GenericGF.addOrSubtract(1, field.multiply(errorLocations[j], xiInverse)))\n          // Above should work but fails on some Apple and Linux JDKs due to a Hotspot bug.\n          // Below is a funny-looking workaround from Steven Parkes\n          var term = field.multiply(errorLocations[j], xiInverse);\n          var termPlus1 = (term & 0x1) === 0 ? term | 1 : term & ~1;\n          denominator = field.multiply(denominator, termPlus1);\n        }\n      }\n      result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n      if (field.getGeneratorBase() !== 0) {\n        result[i] = field.multiply(result[i], xiInverse);\n      }\n    }\n    return result;\n  };\n  return ReedSolomonDecoder;\n}();\nexports.default = ReedSolomonDecoder;","map":{"version":3,"names":["GenericGF_1","require","GenericGFPoly_1","ReedSolomonException_1","IllegalStateException_1","ReedSolomonDecoder","field","prototype","decode","received","twoS","poly","default","syndromeCoefficients","Int32Array","noError","i","evalResult","evaluateAt","exp","getGeneratorBase","length","syndrome","sigmaOmega","runEuclideanAlgorithm","buildMonomial","sigma","omega","errorLocations","findErrorLocations","errorMagnitudes","findErrorMagnitudes","position","log","addOrSubtract","a","b","R","getDegree","temp","rLast","r","tLast","getZero","t","getOne","rLastLast","tLastLast","isZero","q","denominatorLeadingTerm","getCoefficient","dltInverse","inverse","degreeDiff","scale","multiply","multiplyByMonomial","sigmaTildeAtZero","multiplyScalar","errorLocator","numErrors","from","result","e","getSize","errorEvaluator","s","xiInverse","denominator","j","term","termPlus1"],"sources":["../../../../src/core/common/reedsolomon/ReedSolomonDecoder.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}