{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n/*import java.util.List;*/\n/**\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\n * as well as a String interpretation of those bytes, if applicable.</p>\n *\n * @author Sean Owen\n */\nvar DecoderResult = /** @class */function () {\n  // public constructor(rawBytes: Uint8Array,\n  //                      text: string,\n  //                      List<Uint8Array> byteSegments,\n  //                      String ecLevel) {\n  //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n  // }\n  function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\n    if (structuredAppendSequenceNumber === void 0) {\n      structuredAppendSequenceNumber = -1;\n    }\n    if (structuredAppendParity === void 0) {\n      structuredAppendParity = -1;\n    }\n    this.rawBytes = rawBytes;\n    this.text = text;\n    this.byteSegments = byteSegments;\n    this.ecLevel = ecLevel;\n    this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n    this.structuredAppendParity = structuredAppendParity;\n    this.numBits = rawBytes === undefined || rawBytes === null ? 0 : 8 * rawBytes.length;\n  }\n  /**\n   * @return raw bytes representing the result, or {@code null} if not applicable\n   */\n  DecoderResult.prototype.getRawBytes = function () {\n    return this.rawBytes;\n  };\n  /**\n   * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n   * @since 3.3.0\n   */\n  DecoderResult.prototype.getNumBits = function () {\n    return this.numBits;\n  };\n  /**\n   * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\n   * @since 3.3.0\n   */\n  DecoderResult.prototype.setNumBits = function (numBits /*int*/) {\n    this.numBits = numBits;\n  };\n  /**\n   * @return text representation of the result\n   */\n  DecoderResult.prototype.getText = function () {\n    return this.text;\n  };\n  /**\n   * @return list of byte segments in the result, or {@code null} if not applicable\n   */\n  DecoderResult.prototype.getByteSegments = function () {\n    return this.byteSegments;\n  };\n  /**\n   * @return name of error correction level used, or {@code null} if not applicable\n   */\n  DecoderResult.prototype.getECLevel = function () {\n    return this.ecLevel;\n  };\n  /**\n   * @return number of errors corrected, or {@code null} if not applicable\n   */\n  DecoderResult.prototype.getErrorsCorrected = function () {\n    return this.errorsCorrected;\n  };\n  DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected /*Integer*/) {\n    this.errorsCorrected = errorsCorrected;\n  };\n  /**\n   * @return number of erasures corrected, or {@code null} if not applicable\n   */\n  DecoderResult.prototype.getErasures = function () {\n    return this.erasures;\n  };\n  DecoderResult.prototype.setErasures = function (erasures /*Integer*/) {\n    this.erasures = erasures;\n  };\n  /**\n   * @return arbitrary additional metadata\n   */\n  DecoderResult.prototype.getOther = function () {\n    return this.other;\n  };\n  DecoderResult.prototype.setOther = function (other) {\n    this.other = other;\n  };\n  DecoderResult.prototype.hasStructuredAppend = function () {\n    return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n  };\n  DecoderResult.prototype.getStructuredAppendParity = function () {\n    return this.structuredAppendParity;\n  };\n  DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\n    return this.structuredAppendSequenceNumber;\n  };\n  return DecoderResult;\n}();\nexports.default = DecoderResult;","map":{"version":3,"names":["DecoderResult","rawBytes","text","byteSegments","ecLevel","structuredAppendSequenceNumber","structuredAppendParity","numBits","undefined","length","prototype","getRawBytes","getNumBits","setNumBits","getText","getByteSegments","getECLevel","getErrorsCorrected","errorsCorrected","setErrorsCorrected","getErasures","erasures","setErasures","getOther","other","setOther","hasStructuredAppend","getStructuredAppendParity","getStructuredAppendSequenceNumber"],"sources":["../../../src/core/common/DecoderResult.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;AAEA;;;;;;;AAOA,IAAAA,aAAA;EAOI;EACA;EACA;EACA;EACA;EACA;EAEA,SAAAA,cAA2BC,QAAoB,EACnCC,IAAY,EACZC,YAA0B,EAC1BC,OAAe,EACfC,8BAAmD,EACnDC,sBAA2C;IAD3C,IAAAD,8BAAA;MAAAA,8BAAA,IAAkD,CAAC;IAAA;IACnD,IAAAC,sBAAA;MAAAA,sBAAA,IAA0C,CAAC;IAAA;IAL5B,KAAAL,QAAQ,GAARA,QAAQ;IACvB,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,8BAA8B,GAA9BA,8BAA8B;IAC9B,KAAAC,sBAAsB,GAAtBA,sBAAsB;IAC9B,IAAI,CAACC,OAAO,GAAIN,QAAQ,KAAKO,SAAS,IAAIP,QAAQ,KAAK,IAAI,GAAI,CAAC,GAAG,CAAC,GAAGA,QAAQ,CAACQ,MAAM;EAC1F;EAEA;;;EAGOT,aAAA,CAAAU,SAAA,CAAAC,WAAW,GAAlB;IACI,OAAO,IAAI,CAACV,QAAQ;EACxB,CAAC;EAED;;;;EAIOD,aAAA,CAAAU,SAAA,CAAAE,UAAU,GAAjB;IACI,OAAO,IAAI,CAACL,OAAO;EACvB,CAAC;EAED;;;;EAIOP,aAAA,CAAAU,SAAA,CAAAG,UAAU,GAAjB,UAAkBN,OAAe,CAAC,SAAO;IACrC,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B,CAAC;EAED;;;EAGOP,aAAA,CAAAU,SAAA,CAAAI,OAAO,GAAd;IACI,OAAO,IAAI,CAACZ,IAAI;EACpB,CAAC;EAED;;;EAGOF,aAAA,CAAAU,SAAA,CAAAK,eAAe,GAAtB;IACI,OAAO,IAAI,CAACZ,YAAY;EAC5B,CAAC;EAED;;;EAGOH,aAAA,CAAAU,SAAA,CAAAM,UAAU,GAAjB;IACI,OAAO,IAAI,CAACZ,OAAO;EACvB,CAAC;EAED;;;EAGOJ,aAAA,CAAAU,SAAA,CAAAO,kBAAkB,GAAzB;IACI,OAAO,IAAI,CAACC,eAAe;EAC/B,CAAC;EAEMlB,aAAA,CAAAU,SAAA,CAAAS,kBAAkB,GAAzB,UAA0BD,eAAuB,cAAW;IACxD,IAAI,CAACA,eAAe,GAAGA,eAAe;EAC1C,CAAC;EAED;;;EAGOlB,aAAA,CAAAU,SAAA,CAAAU,WAAW,GAAlB;IACI,OAAO,IAAI,CAACC,QAAQ;EACxB,CAAC;EAEMrB,aAAA,CAAAU,SAAA,CAAAY,WAAW,GAAlB,UAAmBD,QAAgB,cAAW;IAC1C,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B,CAAC;EAED;;;EAGOrB,aAAA,CAAAU,SAAA,CAAAa,QAAQ,GAAf;IACI,OAAO,IAAI,CAACC,KAAK;EACrB,CAAC;EAEMxB,aAAA,CAAAU,SAAA,CAAAe,QAAQ,GAAf,UAAgBD,KAAU;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB,CAAC;EAEMxB,aAAA,CAAAU,SAAA,CAAAgB,mBAAmB,GAA1B;IACI,OAAO,IAAI,CAACpB,sBAAsB,IAAI,CAAC,IAAI,IAAI,CAACD,8BAA8B,IAAI,CAAC;EACvF,CAAC;EAEML,aAAA,CAAAU,SAAA,CAAAiB,yBAAyB,GAAhC;IACI,OAAO,IAAI,CAACrB,sBAAsB;EACtC,CAAC;EAEMN,aAAA,CAAAU,SAAA,CAAAkB,iCAAiC,GAAxC;IACI,OAAO,IAAI,CAACvB,8BAA8B;EAC9C,CAAC;EAEL,OAAAL,aAAC;AAAD,CAAC,EAhHD"},"metadata":{},"sourceType":"script"}