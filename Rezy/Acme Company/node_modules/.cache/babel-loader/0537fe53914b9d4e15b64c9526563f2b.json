{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Ponyfill for Java's Integer class.\n */\nvar Integer = /** @class */function () {\n  function Integer() {}\n  Integer.numberOfTrailingZeros = function (i) {\n    var y;\n    if (i === 0) return 32;\n    var n = 31;\n    y = i << 16;\n    if (y !== 0) {\n      n -= 16;\n      i = y;\n    }\n    y = i << 8;\n    if (y !== 0) {\n      n -= 8;\n      i = y;\n    }\n    y = i << 4;\n    if (y !== 0) {\n      n -= 4;\n      i = y;\n    }\n    y = i << 2;\n    if (y !== 0) {\n      n -= 2;\n      i = y;\n    }\n    return n - (i << 1 >>> 31);\n  };\n  Integer.numberOfLeadingZeros = function (i) {\n    // HD, Figure 5-6\n    if (i === 0) {\n      return 32;\n    }\n    var n = 1;\n    if (i >>> 16 === 0) {\n      n += 16;\n      i <<= 16;\n    }\n    if (i >>> 24 === 0) {\n      n += 8;\n      i <<= 8;\n    }\n    if (i >>> 28 === 0) {\n      n += 4;\n      i <<= 4;\n    }\n    if (i >>> 30 === 0) {\n      n += 2;\n      i <<= 2;\n    }\n    n -= i >>> 31;\n    return n;\n  };\n  Integer.toHexString = function (i) {\n    return i.toString(16);\n  };\n  Integer.toBinaryString = function (intNumber) {\n    return String(parseInt(String(intNumber), 2));\n  };\n  // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n  // Returns:\n  // the number of one-bits in the two's complement binary representation of the specified int value.\n  Integer.bitCount = function (i) {\n    // HD, Figure 5-2\n    i = i - (i >>> 1 & 0x55555555);\n    i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n    i = i + (i >>> 4) & 0x0f0f0f0f;\n    i = i + (i >>> 8);\n    i = i + (i >>> 16);\n    return i & 0x3f;\n  };\n  Integer.truncDivision = function (dividend, divisor) {\n    return Math.trunc(dividend / divisor);\n  };\n  /**\n   * Converts A string to an integer.\n   * @param s A string to convert into a number.\n   * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n   */\n  Integer.parseInt = function (num, radix) {\n    if (radix === void 0) {\n      radix = undefined;\n    }\n    return parseInt(num, radix);\n  };\n  Integer.MIN_VALUE_32_BITS = -2147483648;\n  Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n  return Integer;\n}();\nexports.default = Integer;","map":{"version":3,"names":["Integer","numberOfTrailingZeros","i","y","n","numberOfLeadingZeros","toHexString","toString","toBinaryString","intNumber","String","parseInt","bitCount","truncDivision","dividend","divisor","Math","trunc","num","radix","undefined","MIN_VALUE_32_BITS","MAX_VALUE","Number","MAX_SAFE_INTEGER"],"sources":["../../../src/core/util/Integer.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}