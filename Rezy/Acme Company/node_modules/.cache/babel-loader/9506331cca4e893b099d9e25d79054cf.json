{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVOTRADE\\\\Desktop\\\\Rezy barcode\\\\scanner\\\\scanner\\\\src\\\\scan\\\\Scan.js\",\n  _s = $RefreshSig$();\nimport \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3500';\nfunction Scan() {\n  _s();\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [open, setOpen] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n  const handleAccept = () => {\n    // Your logic here\n  };\n  const handleScanWebCam = result => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n\n      // Save the scanned barcode to local storage\n      localStorage.setItem('scanned_barcodes', JSON.stringify(resultText));\n\n      // Call the function to parse and send the data\n      parseAndSendToEndpoint(resultText);\n    }\n  };\n  const getProduct = id => {\n    const foundElement = filteredData.find(item => item.Id === id);\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n  const parseAndSendToEndpoint = result => {\n    // Create an object to hold the data to be sent\n    const dataToSend = {\n      result: result\n    };\n\n    // Define the headers for the POST request\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    // Make the POST request to the endpoint\n    fetch('http://127.0.0.1:3500', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(dataToSend)\n    }).then(response => {\n      if (response.status === 200) {\n        // Request was successful\n        return response.json();\n      } else {\n        // Handle errors here\n        console.error('Error sending data to the endpoint');\n      }\n    }).then(responseData => {\n      // Handle the response from the endpoint if needed\n      console.log('Response from endpoint:', responseData);\n    }).catch(error => {\n      // Handle any network errors here\n      console.error('Network error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"title\",\n        children: \"Step 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan a selected product listed on www.rezy.com, aim to the camera and\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Wait for the confirmation popup, once the bottle is recognized a grant will be generated\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          width: window.innerWidth < 1000 ? \"100%\" : \"25%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xl: 12,\n          lg: 12,\n          md: 12,\n          sm: 12,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(BarcodeScannerComponent, {\n            width: 400,\n            height: 400,\n            facingMode: \"environment\",\n            onUpdate: (err, result) => {\n              if (result) {\n                handleScanWebCam(result.text);\n                console.log(result);\n              } else {\n                setData(\".....Waiting for your bottle\");\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonStyle, {\n        Text: \"Scan!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalStyle, {\n      flag: open\n      // close={handleClose}\n      ,\n      product: producto,\n      accept: handleAccept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Scan, \"OI9CgsItfgwQxM8he8WiQii1+lA=\", false, function () {\n  return [useNavigate];\n});\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["ButtonStyle","ModalStyle","React","useState","Grid","useNavigate","BarcodeScannerComponent","products","jsxDEV","_jsxDEV","URL","Scan","_s","initialData","data","setData","producto","setProducto","open","setOpen","filteredData","setFilteredData","navigate","handleAccept","handleScanWebCam","result","resultText","toString","getProduct","localStorage","setItem","JSON","stringify","parseAndSendToEndpoint","id","foundElement","find","item","Id","dataToSend","headers","fetch","method","body","then","response","status","json","console","error","responseData","log","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","container","style","width","window","innerWidth","xl","lg","md","sm","xs","height","facingMode","onUpdate","err","text","Text","flag","product","accept","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\n\nconst URL = 'http://localhost:3500';\n\nfunction Scan() {\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [open, setOpen] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n\n  const handleAccept = () => {\n    // Your logic here\n  };\n\n  const handleScanWebCam = (result) => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n\n      // Save the scanned barcode to local storage\n      localStorage.setItem('scanned_barcodes', JSON.stringify(resultText));\n\n      // Call the function to parse and send the data\n      parseAndSendToEndpoint(resultText);\n    }\n  };\n\n  const getProduct = (id) => {\n    const foundElement = filteredData.find(item => item.Id === id);\n\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n\n  const parseAndSendToEndpoint = (result) => {\n    // Create an object to hold the data to be sent\n    const dataToSend = { result: result };\n\n    // Define the headers for the POST request\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n\n    // Make the POST request to the endpoint\n    fetch('http://127.0.0.1:3500', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(dataToSend),\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          // Request was successful\n          return response.json();\n        } else {\n          // Handle errors here\n          console.error('Error sending data to the endpoint');\n        }\n      })\n      .then((responseData) => {\n        // Handle the response from the endpoint if needed\n        console.log('Response from endpoint:', responseData);\n      })\n      .catch((error) => {\n        // Handle any network errors here\n        console.error('Network error:', error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <label className=\"title\">Step 1</label>\n        <p>\n          Scan a selected product listed on www.rezy.com, aim to the camera and\n        </p>\n        <p> Wait for the confirmation popup, once the bottle is recognized a grant will be generated</p>\n\n        <Grid container style={{ width: window.innerWidth < 1000 ? \"100%\" : \"25%\" }}>\n          <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n            <BarcodeScannerComponent\n              width={400}\n              height={400}\n              facingMode=\"environment\"\n              onUpdate={(err, result) => {\n                if (result) {\n                  handleScanWebCam(result.text);\n                  console.log(result);\n                } else {\n                  setData(\".....Waiting for your bottle\");\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        <p>{data}</p>\n        <ButtonStyle Text={\"Scan!\"}></ButtonStyle>\n      </div>\n      <ModalStyle\n        flag={open}\n        // close={handleClose}\n        product={producto}\n        accept={handleAccept}\n      ></ModalStyle>\n    </div>\n  );\n}\n\nexport default Scan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}