{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar BitSource_1 = require(\"../../common/BitSource\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Mode;\n(function (Mode) {\n  Mode[Mode[\"PAD_ENCODE\"] = 0] = \"PAD_ENCODE\";\n  Mode[Mode[\"ASCII_ENCODE\"] = 1] = \"ASCII_ENCODE\";\n  Mode[Mode[\"C40_ENCODE\"] = 2] = \"C40_ENCODE\";\n  Mode[Mode[\"TEXT_ENCODE\"] = 3] = \"TEXT_ENCODE\";\n  Mode[Mode[\"ANSIX12_ENCODE\"] = 4] = \"ANSIX12_ENCODE\";\n  Mode[Mode[\"EDIFACT_ENCODE\"] = 5] = \"EDIFACT_ENCODE\";\n  Mode[Mode[\"BASE256_ENCODE\"] = 6] = \"BASE256_ENCODE\";\n})(Mode || (Mode = {}));\n/**\n * <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes\n * in one Data Matrix Code. This class decodes the bits back into text.</p>\n *\n * <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>\n *\n * @author bbrown@google.com (Brian Brown)\n * @author Sean Owen\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  DecodedBitStreamParser.decode = function (bytes) {\n    var bits = new BitSource_1.default(bytes);\n    var result = new StringBuilder_1.default();\n    var resultTrailer = new StringBuilder_1.default();\n    var byteSegments = new Array();\n    var mode = Mode.ASCII_ENCODE;\n    do {\n      if (mode === Mode.ASCII_ENCODE) {\n        mode = this.decodeAsciiSegment(bits, result, resultTrailer);\n      } else {\n        switch (mode) {\n          case Mode.C40_ENCODE:\n            this.decodeC40Segment(bits, result);\n            break;\n          case Mode.TEXT_ENCODE:\n            this.decodeTextSegment(bits, result);\n            break;\n          case Mode.ANSIX12_ENCODE:\n            this.decodeAnsiX12Segment(bits, result);\n            break;\n          case Mode.EDIFACT_ENCODE:\n            this.decodeEdifactSegment(bits, result);\n            break;\n          case Mode.BASE256_ENCODE:\n            this.decodeBase256Segment(bits, result, byteSegments);\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n        mode = Mode.ASCII_ENCODE;\n      }\n    } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);\n    if (resultTrailer.length() > 0) {\n      result.append(resultTrailer.toString());\n    }\n    return new DecoderResult_1.default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2\n   */\n  DecodedBitStreamParser.decodeAsciiSegment = function (bits, result, resultTrailer) {\n    var upperShift = false;\n    do {\n      var oneByte = bits.readBits(8);\n      if (oneByte === 0) {\n        throw new FormatException_1.default();\n      } else if (oneByte <= 128) {\n        // ASCII data (ASCII value + 1)\n        if (upperShift) {\n          oneByte += 128;\n          // upperShift = false;\n        }\n\n        result.append(String.fromCharCode(oneByte - 1));\n        return Mode.ASCII_ENCODE;\n      } else if (oneByte === 129) {\n        // Pad\n        return Mode.PAD_ENCODE;\n      } else if (oneByte <= 229) {\n        // 2-digit data 00-99 (Numeric Value + 130)\n        var value = oneByte - 130;\n        if (value < 10) {\n          // pad with '0' for single digit values\n          result.append('0');\n        }\n        result.append('' + value);\n      } else {\n        switch (oneByte) {\n          case 230:\n            // Latch to C40 encodation\n            return Mode.C40_ENCODE;\n          case 231:\n            // Latch to Base 256 encodation\n            return Mode.BASE256_ENCODE;\n          case 232:\n            // FNC1\n            result.append(String.fromCharCode(29)); // translate as ASCII 29\n            break;\n          case 233: // Structured Append\n          case 234:\n            // Reader Programming\n            // Ignore these symbols for now\n            // throw ReaderException.getInstance();\n            break;\n          case 235:\n            // Upper Shift (shift to Extended ASCII)\n            upperShift = true;\n            break;\n          case 236:\n            // 05 Macro\n            result.append('[)>\\u001E05\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n          case 237:\n            // 06 Macro\n            result.append('[)>\\u001E06\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n          case 238:\n            // Latch to ANSI X12 encodation\n            return Mode.ANSIX12_ENCODE;\n          case 239:\n            // Latch to Text encodation\n            return Mode.TEXT_ENCODE;\n          case 240:\n            // Latch to EDIFACT encodation\n            return Mode.EDIFACT_ENCODE;\n          case 241:\n            // ECI Character\n            // TODO(bbrown): I think we need to support ECI\n            // throw ReaderException.getInstance();\n            // Ignore this symbol for now\n            break;\n          default:\n            // Not to be used in ASCII encodation\n            // but work around encoders that end with 254, latch back to ASCII\n            if (oneByte !== 254 || bits.available() !== 0) {\n              throw new FormatException_1.default();\n            }\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n    return Mode.ASCII_ENCODE;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.5 and Annex C, Table C.1\n   */\n  DecodedBitStreamParser.decodeC40Segment = function (bits, result) {\n    // Three C40 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with C40 doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.C40_BASIC_SET_CHARS.length) {\n              var c40char = this.C40_BASIC_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n            shift = 0;\n            break;\n          case 2:\n            if (cValue < this.C40_SHIFT2_SET_CHARS.length) {\n              var c40char = this.C40_SHIFT2_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n                  break;\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n            shift = 0;\n            break;\n          case 3:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 224));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue + 96));\n            }\n            shift = 0;\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.6 and Annex C, Table C.2\n   */\n  DecodedBitStreamParser.decodeTextSegment = function (bits, result) {\n    // Three Text values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with Text doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {\n              var textChar = this.TEXT_BASIC_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n            shift = 0;\n            break;\n          case 2:\n            // Shift 2 for Text is the same encoding as C40\n            if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n                  break;\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n            shift = 0;\n            break;\n          case 3:\n            if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n              shift = 0;\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.7\n   */\n  DecodedBitStreamParser.decodeAnsiX12Segment = function (bits, result) {\n    // Three ANSI X12 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    var cValues = [];\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n      var firstByte = bits.readBits(8);\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n        switch (cValue) {\n          case 0:\n            // X12 segment terminator <CR>\n            result.append('\\r');\n            break;\n          case 1:\n            // X12 segment separator *\n            result.append('*');\n            break;\n          case 2:\n            // X12 sub-element separator >\n            result.append('>');\n            break;\n          case 3:\n            // space\n            result.append(' ');\n            break;\n          default:\n            if (cValue < 14) {\n              // 0 - 9\n              result.append(String.fromCharCode(cValue + 44));\n            } else if (cValue < 40) {\n              // A - Z\n              result.append(String.fromCharCode(cValue + 51));\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  DecodedBitStreamParser.parseTwoBytes = function (firstByte, secondByte, result) {\n    var fullBitValue = (firstByte << 8) + secondByte - 1;\n    var temp = Math.floor(fullBitValue / 1600);\n    result[0] = temp;\n    fullBitValue -= temp * 1600;\n    temp = Math.floor(fullBitValue / 40);\n    result[1] = temp;\n    result[2] = fullBitValue - temp * 40;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.8 and Annex C Table C.3\n   */\n  DecodedBitStreamParser.decodeEdifactSegment = function (bits, result) {\n    do {\n      // If there is only two or less bytes left then it will be encoded as ASCII\n      if (bits.available() <= 16) {\n        return;\n      }\n      for (var i = 0; i < 4; i++) {\n        var edifactValue = bits.readBits(6);\n        // Check for the unlatch character\n        if (edifactValue === 0x1F) {\n          // 011111\n          // Read rest of byte, which should be 0, and stop\n          var bitsLeft = 8 - bits.getBitOffset();\n          if (bitsLeft !== 8) {\n            bits.readBits(bitsLeft);\n          }\n          return;\n        }\n        if ((edifactValue & 0x20) === 0) {\n          // no 1 in the leading (6th) bit\n          edifactValue |= 0x40; // Add a leading 01 to the 6 bit binary value\n        }\n\n        result.append(String.fromCharCode(edifactValue));\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.9 and Annex B, B.2\n   */\n  DecodedBitStreamParser.decodeBase256Segment = function (bits, result, byteSegments) {\n    // Figure out how long the Base 256 Segment is.\n    var codewordPosition = 1 + bits.getByteOffset(); // position is 1-indexed\n    var d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    var count;\n    if (d1 === 0) {\n      // Read the remainder of the symbol\n      count = bits.available() / 8 | 0;\n    } else if (d1 < 250) {\n      count = d1;\n    } else {\n      count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    }\n    // We're seeing NegativeArraySizeException errors from users.\n    if (count < 0) {\n      throw new FormatException_1.default();\n    }\n    var bytes = new Uint8Array(count);\n    for (var i = 0; i < count; i++) {\n      // Have seen this particular error in the wild, such as at\n      // http://www.bcgen.com/demo/IDAutomationStreamingDataMatrix.aspx?MODE=3&D=Fred&PFMT=3&PT=F&X=0.3&O=0&LM=0.2\n      if (bits.available() < 8) {\n        throw new FormatException_1.default();\n      }\n      bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    }\n    byteSegments.push(bytes);\n    try {\n      result.append(StringEncoding_1.default.decode(bytes, StringUtils_1.default.ISO88591));\n    } catch (uee) {\n      throw new IllegalStateException_1.default('Platform does not support required encoding: ' + uee.message);\n    }\n  };\n  /**\n   * See ISO 16022:2006, Annex B, B.2\n   */\n  DecodedBitStreamParser.unrandomize255State = function (randomizedBase256Codeword, base256CodewordPosition) {\n    var pseudoRandomNumber = 149 * base256CodewordPosition % 255 + 1;\n    var tempVariable = randomizedBase256Codeword - pseudoRandomNumber;\n    return tempVariable >= 0 ? tempVariable : tempVariable + 256;\n  };\n  /**\n   * See ISO 16022:2006, Annex C Table C.1\n   * The C40 Basic Character Set (*'s used for placeholders for the shift values)\n   */\n  DecodedBitStreamParser.C40_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  DecodedBitStreamParser.C40_SHIFT2_SET_CHARS = ['!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_'];\n  /**\n   * See ISO 16022:2006, Annex C Table C.2\n   * The Text Basic Character Set (*'s used for placeholders for the shift values)\n   */\n  DecodedBitStreamParser.TEXT_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  // Shift 2 for Text is the same encoding as C40\n  DecodedBitStreamParser.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser.C40_SHIFT2_SET_CHARS;\n  DecodedBitStreamParser.TEXT_SHIFT3_SET_CHARS = ['`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', String.fromCharCode(127)];\n  return DecodedBitStreamParser;\n}();\nexports.default = DecodedBitStreamParser;","map":{"version":3,"sources":["../../../../src/core/datamatrix/decoder/DecodedBitStreamParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar BitSource_1 = require(\"../../common/BitSource\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Mode;\n(function (Mode) {\n    Mode[Mode[\"PAD_ENCODE\"] = 0] = \"PAD_ENCODE\";\n    Mode[Mode[\"ASCII_ENCODE\"] = 1] = \"ASCII_ENCODE\";\n    Mode[Mode[\"C40_ENCODE\"] = 2] = \"C40_ENCODE\";\n    Mode[Mode[\"TEXT_ENCODE\"] = 3] = \"TEXT_ENCODE\";\n    Mode[Mode[\"ANSIX12_ENCODE\"] = 4] = \"ANSIX12_ENCODE\";\n    Mode[Mode[\"EDIFACT_ENCODE\"] = 5] = \"EDIFACT_ENCODE\";\n    Mode[Mode[\"BASE256_ENCODE\"] = 6] = \"BASE256_ENCODE\";\n})(Mode || (Mode = {}));\n/**\n * <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes\n * in one Data Matrix Code. This class decodes the bits back into text.</p>\n *\n * <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>\n *\n * @author bbrown@google.com (Brian Brown)\n * @author Sean Owen\n */\nvar DecodedBitStreamParser = /** @class */ (function () {\n    function DecodedBitStreamParser() {\n    }\n    DecodedBitStreamParser.decode = function (bytes) {\n        var bits = new BitSource_1.default(bytes);\n        var result = new StringBuilder_1.default();\n        var resultTrailer = new StringBuilder_1.default();\n        var byteSegments = new Array();\n        var mode = Mode.ASCII_ENCODE;\n        do {\n            if (mode === Mode.ASCII_ENCODE) {\n                mode = this.decodeAsciiSegment(bits, result, resultTrailer);\n            }\n            else {\n                switch (mode) {\n                    case Mode.C40_ENCODE:\n                        this.decodeC40Segment(bits, result);\n                        break;\n                    case Mode.TEXT_ENCODE:\n                        this.decodeTextSegment(bits, result);\n                        break;\n                    case Mode.ANSIX12_ENCODE:\n                        this.decodeAnsiX12Segment(bits, result);\n                        break;\n                    case Mode.EDIFACT_ENCODE:\n                        this.decodeEdifactSegment(bits, result);\n                        break;\n                    case Mode.BASE256_ENCODE:\n                        this.decodeBase256Segment(bits, result, byteSegments);\n                        break;\n                    default:\n                        throw new FormatException_1.default();\n                }\n                mode = Mode.ASCII_ENCODE;\n            }\n        } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);\n        if (resultTrailer.length() > 0) {\n            result.append(resultTrailer.toString());\n        }\n        return new DecoderResult_1.default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);\n    };\n    /**\n     * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2\n     */\n    DecodedBitStreamParser.decodeAsciiSegment = function (bits, result, resultTrailer) {\n        var upperShift = false;\n        do {\n            var oneByte = bits.readBits(8);\n            if (oneByte === 0) {\n                throw new FormatException_1.default();\n            }\n            else if (oneByte <= 128) { // ASCII data (ASCII value + 1)\n                if (upperShift) {\n                    oneByte += 128;\n                    // upperShift = false;\n                }\n                result.append(String.fromCharCode(oneByte - 1));\n                return Mode.ASCII_ENCODE;\n            }\n            else if (oneByte === 129) { // Pad\n                return Mode.PAD_ENCODE;\n            }\n            else if (oneByte <= 229) { // 2-digit data 00-99 (Numeric Value + 130)\n                var value = oneByte - 130;\n                if (value < 10) { // pad with '0' for single digit values\n                    result.append('0');\n                }\n                result.append('' + value);\n            }\n            else {\n                switch (oneByte) {\n                    case 230: // Latch to C40 encodation\n                        return Mode.C40_ENCODE;\n                    case 231: // Latch to Base 256 encodation\n                        return Mode.BASE256_ENCODE;\n                    case 232: // FNC1\n                        result.append(String.fromCharCode(29)); // translate as ASCII 29\n                        break;\n                    case 233: // Structured Append\n                    case 234: // Reader Programming\n                        // Ignore these symbols for now\n                        // throw ReaderException.getInstance();\n                        break;\n                    case 235: // Upper Shift (shift to Extended ASCII)\n                        upperShift = true;\n                        break;\n                    case 236: // 05 Macro\n                        result.append('[)>\\u001E05\\u001D');\n                        resultTrailer.insert(0, '\\u001E\\u0004');\n                        break;\n                    case 237: // 06 Macro\n                        result.append('[)>\\u001E06\\u001D');\n                        resultTrailer.insert(0, '\\u001E\\u0004');\n                        break;\n                    case 238: // Latch to ANSI X12 encodation\n                        return Mode.ANSIX12_ENCODE;\n                    case 239: // Latch to Text encodation\n                        return Mode.TEXT_ENCODE;\n                    case 240: // Latch to EDIFACT encodation\n                        return Mode.EDIFACT_ENCODE;\n                    case 241: // ECI Character\n                        // TODO(bbrown): I think we need to support ECI\n                        // throw ReaderException.getInstance();\n                        // Ignore this symbol for now\n                        break;\n                    default:\n                        // Not to be used in ASCII encodation\n                        // but work around encoders that end with 254, latch back to ASCII\n                        if (oneByte !== 254 || bits.available() !== 0) {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                }\n            }\n        } while (bits.available() > 0);\n        return Mode.ASCII_ENCODE;\n    };\n    /**\n     * See ISO 16022:2006, 5.2.5 and Annex C, Table C.1\n     */\n    DecodedBitStreamParser.decodeC40Segment = function (bits, result) {\n        // Three C40 values are encoded in a 16-bit value as\n        // (1600 * C1) + (40 * C2) + C3 + 1\n        // TODO(bbrown): The Upper Shift with C40 doesn't work in the 4 value scenario all the time\n        var upperShift = false;\n        var cValues = [];\n        var shift = 0;\n        do {\n            // If there is only one byte left then it will be encoded as ASCII\n            if (bits.available() === 8) {\n                return;\n            }\n            var firstByte = bits.readBits(8);\n            if (firstByte === 254) { // Unlatch codeword\n                return;\n            }\n            this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n            for (var i = 0; i < 3; i++) {\n                var cValue = cValues[i];\n                switch (shift) {\n                    case 0:\n                        if (cValue < 3) {\n                            shift = cValue + 1;\n                        }\n                        else if (cValue < this.C40_BASIC_SET_CHARS.length) {\n                            var c40char = this.C40_BASIC_SET_CHARS[cValue];\n                            if (upperShift) {\n                                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(c40char);\n                            }\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    case 1:\n                        if (upperShift) {\n                            result.append(String.fromCharCode(cValue + 128));\n                            upperShift = false;\n                        }\n                        else {\n                            result.append(String.fromCharCode(cValue));\n                        }\n                        shift = 0;\n                        break;\n                    case 2:\n                        if (cValue < this.C40_SHIFT2_SET_CHARS.length) {\n                            var c40char = this.C40_SHIFT2_SET_CHARS[cValue];\n                            if (upperShift) {\n                                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(c40char);\n                            }\n                        }\n                        else {\n                            switch (cValue) {\n                                case 27: // FNC1\n                                    result.append(String.fromCharCode(29)); // translate as ASCII 29\n                                    break;\n                                case 30: // Upper Shift\n                                    upperShift = true;\n                                    break;\n                                default:\n                                    throw new FormatException_1.default();\n                            }\n                        }\n                        shift = 0;\n                        break;\n                    case 3:\n                        if (upperShift) {\n                            result.append(String.fromCharCode(cValue + 224));\n                            upperShift = false;\n                        }\n                        else {\n                            result.append(String.fromCharCode(cValue + 96));\n                        }\n                        shift = 0;\n                        break;\n                    default:\n                        throw new FormatException_1.default();\n                }\n            }\n        } while (bits.available() > 0);\n    };\n    /**\n     * See ISO 16022:2006, 5.2.6 and Annex C, Table C.2\n     */\n    DecodedBitStreamParser.decodeTextSegment = function (bits, result) {\n        // Three Text values are encoded in a 16-bit value as\n        // (1600 * C1) + (40 * C2) + C3 + 1\n        // TODO(bbrown): The Upper Shift with Text doesn't work in the 4 value scenario all the time\n        var upperShift = false;\n        var cValues = [];\n        var shift = 0;\n        do {\n            // If there is only one byte left then it will be encoded as ASCII\n            if (bits.available() === 8) {\n                return;\n            }\n            var firstByte = bits.readBits(8);\n            if (firstByte === 254) { // Unlatch codeword\n                return;\n            }\n            this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n            for (var i = 0; i < 3; i++) {\n                var cValue = cValues[i];\n                switch (shift) {\n                    case 0:\n                        if (cValue < 3) {\n                            shift = cValue + 1;\n                        }\n                        else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {\n                            var textChar = this.TEXT_BASIC_SET_CHARS[cValue];\n                            if (upperShift) {\n                                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(textChar);\n                            }\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    case 1:\n                        if (upperShift) {\n                            result.append(String.fromCharCode(cValue + 128));\n                            upperShift = false;\n                        }\n                        else {\n                            result.append(String.fromCharCode(cValue));\n                        }\n                        shift = 0;\n                        break;\n                    case 2:\n                        // Shift 2 for Text is the same encoding as C40\n                        if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {\n                            var textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];\n                            if (upperShift) {\n                                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(textChar);\n                            }\n                        }\n                        else {\n                            switch (cValue) {\n                                case 27: // FNC1\n                                    result.append(String.fromCharCode(29)); // translate as ASCII 29\n                                    break;\n                                case 30: // Upper Shift\n                                    upperShift = true;\n                                    break;\n                                default:\n                                    throw new FormatException_1.default();\n                            }\n                        }\n                        shift = 0;\n                        break;\n                    case 3:\n                        if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {\n                            var textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];\n                            if (upperShift) {\n                                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                                upperShift = false;\n                            }\n                            else {\n                                result.append(textChar);\n                            }\n                            shift = 0;\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    default:\n                        throw new FormatException_1.default();\n                }\n            }\n        } while (bits.available() > 0);\n    };\n    /**\n     * See ISO 16022:2006, 5.2.7\n     */\n    DecodedBitStreamParser.decodeAnsiX12Segment = function (bits, result) {\n        // Three ANSI X12 values are encoded in a 16-bit value as\n        // (1600 * C1) + (40 * C2) + C3 + 1\n        var cValues = [];\n        do {\n            // If there is only one byte left then it will be encoded as ASCII\n            if (bits.available() === 8) {\n                return;\n            }\n            var firstByte = bits.readBits(8);\n            if (firstByte === 254) { // Unlatch codeword\n                return;\n            }\n            this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n            for (var i = 0; i < 3; i++) {\n                var cValue = cValues[i];\n                switch (cValue) {\n                    case 0: // X12 segment terminator <CR>\n                        result.append('\\r');\n                        break;\n                    case 1: // X12 segment separator *\n                        result.append('*');\n                        break;\n                    case 2: // X12 sub-element separator >\n                        result.append('>');\n                        break;\n                    case 3: // space\n                        result.append(' ');\n                        break;\n                    default:\n                        if (cValue < 14) { // 0 - 9\n                            result.append(String.fromCharCode(cValue + 44));\n                        }\n                        else if (cValue < 40) { // A - Z\n                            result.append(String.fromCharCode(cValue + 51));\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                }\n            }\n        } while (bits.available() > 0);\n    };\n    DecodedBitStreamParser.parseTwoBytes = function (firstByte, secondByte, result) {\n        var fullBitValue = (firstByte << 8) + secondByte - 1;\n        var temp = Math.floor(fullBitValue / 1600);\n        result[0] = temp;\n        fullBitValue -= temp * 1600;\n        temp = Math.floor(fullBitValue / 40);\n        result[1] = temp;\n        result[2] = fullBitValue - temp * 40;\n    };\n    /**\n     * See ISO 16022:2006, 5.2.8 and Annex C Table C.3\n     */\n    DecodedBitStreamParser.decodeEdifactSegment = function (bits, result) {\n        do {\n            // If there is only two or less bytes left then it will be encoded as ASCII\n            if (bits.available() <= 16) {\n                return;\n            }\n            for (var i = 0; i < 4; i++) {\n                var edifactValue = bits.readBits(6);\n                // Check for the unlatch character\n                if (edifactValue === 0x1F) { // 011111\n                    // Read rest of byte, which should be 0, and stop\n                    var bitsLeft = 8 - bits.getBitOffset();\n                    if (bitsLeft !== 8) {\n                        bits.readBits(bitsLeft);\n                    }\n                    return;\n                }\n                if ((edifactValue & 0x20) === 0) { // no 1 in the leading (6th) bit\n                    edifactValue |= 0x40; // Add a leading 01 to the 6 bit binary value\n                }\n                result.append(String.fromCharCode(edifactValue));\n            }\n        } while (bits.available() > 0);\n    };\n    /**\n     * See ISO 16022:2006, 5.2.9 and Annex B, B.2\n     */\n    DecodedBitStreamParser.decodeBase256Segment = function (bits, result, byteSegments) {\n        // Figure out how long the Base 256 Segment is.\n        var codewordPosition = 1 + bits.getByteOffset(); // position is 1-indexed\n        var d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n        var count;\n        if (d1 === 0) { // Read the remainder of the symbol\n            count = bits.available() / 8 | 0;\n        }\n        else if (d1 < 250) {\n            count = d1;\n        }\n        else {\n            count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);\n        }\n        // We're seeing NegativeArraySizeException errors from users.\n        if (count < 0) {\n            throw new FormatException_1.default();\n        }\n        var bytes = new Uint8Array(count);\n        for (var i = 0; i < count; i++) {\n            // Have seen this particular error in the wild, such as at\n            // http://www.bcgen.com/demo/IDAutomationStreamingDataMatrix.aspx?MODE=3&D=Fred&PFMT=3&PT=F&X=0.3&O=0&LM=0.2\n            if (bits.available() < 8) {\n                throw new FormatException_1.default();\n            }\n            bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n        }\n        byteSegments.push(bytes);\n        try {\n            result.append(StringEncoding_1.default.decode(bytes, StringUtils_1.default.ISO88591));\n        }\n        catch (uee) {\n            throw new IllegalStateException_1.default('Platform does not support required encoding: ' + uee.message);\n        }\n    };\n    /**\n     * See ISO 16022:2006, Annex B, B.2\n     */\n    DecodedBitStreamParser.unrandomize255State = function (randomizedBase256Codeword, base256CodewordPosition) {\n        var pseudoRandomNumber = ((149 * base256CodewordPosition) % 255) + 1;\n        var tempVariable = randomizedBase256Codeword - pseudoRandomNumber;\n        return tempVariable >= 0 ? tempVariable : tempVariable + 256;\n    };\n    /**\n     * See ISO 16022:2006, Annex C Table C.1\n     * The C40 Basic Character Set (*'s used for placeholders for the shift values)\n     */\n    DecodedBitStreamParser.C40_BASIC_SET_CHARS = [\n        '*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ];\n    DecodedBitStreamParser.C40_SHIFT2_SET_CHARS = [\n        '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.',\n        '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_'\n    ];\n    /**\n     * See ISO 16022:2006, Annex C Table C.2\n     * The Text Basic Character Set (*'s used for placeholders for the shift values)\n     */\n    DecodedBitStreamParser.TEXT_BASIC_SET_CHARS = [\n        '*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    ];\n    // Shift 2 for Text is the same encoding as C40\n    DecodedBitStreamParser.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser.C40_SHIFT2_SET_CHARS;\n    DecodedBitStreamParser.TEXT_SHIFT3_SET_CHARS = [\n        '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', String.fromCharCode(127)\n    ];\n    return DecodedBitStreamParser;\n}());\nexports.default = DecodedBitStreamParser;\n//# sourceMappingURL=DecodedBitStreamParser.js.map"]},"metadata":{},"sourceType":"script"}