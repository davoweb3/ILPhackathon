{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n/*import java.util.Arrays;*/\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar ByteMatrix = /** @class */function () {\n  function ByteMatrix(width /*int*/, height /*int*/) {\n    this.width = width;\n    this.height = height;\n    var bytes = new Array(height); // [height][width]\n    for (var i = 0; i !== height; i++) {\n      bytes[i] = new Uint8Array(width);\n    }\n    this.bytes = bytes;\n  }\n  ByteMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n  ByteMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n  ByteMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n    return this.bytes[y][x];\n  };\n  /**\n   * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n   */\n  ByteMatrix.prototype.getArray = function () {\n    return this.bytes;\n  };\n  // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n  ByteMatrix.prototype.setNumber = function (x /*int*/, y /*int*/, value /*byte|int*/) {\n    this.bytes[y][x] = value;\n  };\n  // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n  //   bytes[y][x] = (byte) value\n  // }\n  ByteMatrix.prototype.setBoolean = function (x /*int*/, y /*int*/, value) {\n    this.bytes[y][x] = /*(byte) */value ? 1 : 0;\n  };\n  ByteMatrix.prototype.clear = function (value /*byte*/) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var aByte = _c.value;\n        Arrays_1.default.fill(aByte, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  ByteMatrix.prototype.equals = function (o) {\n    if (!(o instanceof ByteMatrix)) {\n      return false;\n    }\n    var other = o;\n    if (this.width !== other.width) {\n      return false;\n    }\n    if (this.height !== other.height) {\n      return false;\n    }\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      var otherBytesY = other.bytes[y];\n      for (var x = 0, width = this.width; x < width; ++x) {\n        if (bytesY[x] !== otherBytesY[x]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  /*@Override*/\n  ByteMatrix.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      for (var x = 0, width = this.width; x < width; ++x) {\n        switch (bytesY[x]) {\n          case 0:\n            result.append(' 0');\n            break;\n          case 1:\n            result.append(' 1');\n            break;\n          default:\n            result.append('  ');\n            break;\n        }\n      }\n      result.append('\\n');\n    }\n    return result.toString();\n  };\n  return ByteMatrix;\n}();\nexports.default = ByteMatrix;","map":{"version":3,"names":["Arrays_1","require","StringBuilder_1","ByteMatrix","width","height","bytes","Array","i","Uint8Array","prototype","getHeight","getWidth","get","x","y","getArray","setNumber","value","setBoolean","clear","_b","__values","_c","next","done","aByte","default","fill","equals","o","other","bytesY","otherBytesY","toString","result","append"],"sources":["../../../../src/core/qrcode/encoder/ByteMatrix.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}