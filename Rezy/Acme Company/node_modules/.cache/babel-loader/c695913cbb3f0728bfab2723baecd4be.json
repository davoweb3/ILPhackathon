{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\n/**\n * These are a set of hints that you may pass to Writers to specify their behavior.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar EncodeHintType;\n(function (EncodeHintType) {\n  /**\n   * Specifies what degree of error correction to use, for example in QR Codes.\n   * Type depends on the encoder. For example for QR codes it's type\n   * {@link com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ErrorCorrectionLevel}.\n   * For Aztec it is of type {@link Integer}, representing the minimal percentage of error correction words.\n   * For PDF417 it is of type {@link Integer}, valid values being 0 to 8.\n   * In all cases, it can also be a {@link String} representation of the desired value as well.\n   * Note: an Aztec symbol should have a minimum of 25% EC words.\n   */\n  EncodeHintType[EncodeHintType[\"ERROR_CORRECTION\"] = 0] = \"ERROR_CORRECTION\";\n  /**\n   * Specifies what character encoding to use where applicable (type {@link String})\n   */\n  EncodeHintType[EncodeHintType[\"CHARACTER_SET\"] = 1] = \"CHARACTER_SET\";\n  /**\n   * Specifies the matrix shape for Data Matrix (type {@link com.google.zxing.datamatrix.encoder.SymbolShapeHint})\n   */\n  EncodeHintType[EncodeHintType[\"DATA_MATRIX_SHAPE\"] = 2] = \"DATA_MATRIX_SHAPE\";\n  /**\n   * Specifies a minimum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\n   *\n   * @deprecated use width/height params in\n   * {@link com.google.zxing.datamatrix.DataMatrixWriter#encode(String, BarcodeFormat, int, int)}\n   */\n  /*@Deprecated*/\n  EncodeHintType[EncodeHintType[\"MIN_SIZE\"] = 3] = \"MIN_SIZE\";\n  /**\n   * Specifies a maximum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\n   *\n   * @deprecated without replacement\n   */\n  /*@Deprecated*/\n  EncodeHintType[EncodeHintType[\"MAX_SIZE\"] = 4] = \"MAX_SIZE\";\n  /**\n   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary\n   * by format; for example it controls margin before and after the barcode horizontally for\n   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value).\n   */\n  EncodeHintType[EncodeHintType[\"MARGIN\"] = 5] = \"MARGIN\";\n  /**\n   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or \"true\" or \"false\"\n   * {@link String} value).\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_COMPACT\"] = 6] = \"PDF417_COMPACT\";\n  /**\n   * Specifies what compaction mode to use for PDF417 (type\n   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its\n   * enum values).\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_COMPACTION\"] = 7] = \"PDF417_COMPACTION\";\n  /**\n   * Specifies the minimum and maximum number of rows and columns for PDF417 (type\n   * {@link com.google.zxing.pdf417.encoder.Dimensions Dimensions}).\n   */\n  EncodeHintType[EncodeHintType[\"PDF417_DIMENSIONS\"] = 8] = \"PDF417_DIMENSIONS\";\n  /**\n   * Specifies the required number of layers for an Aztec code.\n   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code.\n   * 0 indicates to use the minimum number of layers (the default).\n   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code.\n   * (Type {@link Integer}, or {@link String} representation of the integer value).\n   */\n  EncodeHintType[EncodeHintType[\"AZTEC_LAYERS\"] = 9] = \"AZTEC_LAYERS\";\n  /**\n   * Specifies the exact version of QR code to be encoded.\n   * (Type {@link Integer}, or {@link String} representation of the integer value).\n   */\n  EncodeHintType[EncodeHintType[\"QR_VERSION\"] = 10] = \"QR_VERSION\";\n})(EncodeHintType || (EncodeHintType = {}));\nexports.default = EncodeHintType;","map":{"version":3,"names":["EncodeHintType","exports","default"],"sources":["../../src/core/EncodeHintType.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;AAKA,IAAKA,cAgFJ;AAhFD,WAAKA,cAAc;EAEf;;;;;;;;;EASAA,cAAA,CAAAA,cAAA,8CAAgB;EAEhB;;;EAGAA,cAAA,CAAAA,cAAA,wCAAa;EAEb;;;EAGAA,cAAA,CAAAA,cAAA,gDAAiB;EAEjB;;;;;;EAMA;EACAA,cAAA,CAAAA,cAAA,8BAAQ;EAER;;;;;EAKA;EACAA,cAAA,CAAAA,cAAA,8BAAQ;EAER;;;;;EAKAA,cAAA,CAAAA,cAAA,0BAAM;EAEN;;;;EAIAA,cAAA,CAAAA,cAAA,0CAAc;EAEd;;;;;EAKAA,cAAA,CAAAA,cAAA,gDAAiB;EAEjB;;;;EAIAA,cAAA,CAAAA,cAAA,gDAAiB;EAEjB;;;;;;;EAOAA,cAAA,CAAAA,cAAA,sCAAY;EAEZ;;;;EAIAA,cAAA,CAAAA,cAAA,mCAAU;AACd,CAAC,EAhFIA,cAAc,KAAdA,cAAc;AAkFnBC,OAAA,CAAAC,OAAA,GAAeF,cAAc"},"metadata":{},"sourceType":"script"}