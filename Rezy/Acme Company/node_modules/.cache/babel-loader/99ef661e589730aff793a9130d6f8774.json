{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.common.CharacterSetECI;\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\n// import com.google.zxing.common.DecoderResult;\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n// import com.google.zxing.pdf417.PDF417ResultMetadata;\nvar PDF417ResultMetadata_1 = require(\"../PDF417ResultMetadata\");\n// import java.io.ByteArrayOutputStream;\n// import java.math.BigInteger;\n// import java.nio.charset.Charset;\n// import java.nio.charset.StandardCharsets;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar Long_1 = require(\"../../util/Long\");\nvar ByteArrayOutputStream_1 = require(\"../../util/ByteArrayOutputStream\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n/*private*/\nvar Mode;\n(function (Mode) {\n  Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n  Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n  Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n  Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n  Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n  Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n})(Mode || (Mode = {}));\n/**\n * Indirectly access the global BigInt constructor, it\n * allows browsers that doesn't support BigInt to run\n * the library without breaking due to \"undefined BigInt\"\n * errors.\n */\nfunction getBigIntConstructor() {\n  if (typeof window !== 'undefined') {\n    return window['BigInt'] || null;\n  }\n  if (typeof global !== 'undefined') {\n    return global['BigInt'] || null;\n  }\n  throw new Error('Can\\'t search globals for BigInt!');\n}\n/**\n * Used to store the BigInt constructor.\n */\nvar BigInteger;\n/**\n * This function creates a bigint value. It allows browsers\n * that doesn't support BigInt to run the rest of the library\n * by not directly accessing the BigInt constructor.\n */\nfunction createBigInt(num) {\n  if (typeof BigInteger === 'undefined') {\n    BigInteger = getBigIntConstructor();\n  }\n  if (BigInteger === null) {\n    throw new Error('BigInt is not supported!');\n  }\n  return BigInteger(num);\n}\nfunction getEXP900() {\n  // in Java - array with length = 16\n  var EXP900 = [];\n  EXP900[0] = createBigInt(1);\n  var nineHundred = createBigInt(900);\n  EXP900[1] = nineHundred;\n  // in Java - array with length = 16\n  for (var i /*int*/ = 2; i < 16; i++) {\n    EXP900[i] = EXP900[i - 1] * nineHundred;\n  }\n  return EXP900;\n}\n/**\n * <p>This class contains the methods for decoding the PDF417 codewords.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author Guenther Grau\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  //   private DecodedBitStreamParser() {\n  // }\n  /**\n   *\n   * @param codewords\n   * @param ecLevel\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.decode = function (codewords, ecLevel) {\n    // pass encoding to result (will be used for decode symbols in byte mode)\n    var result = new StringBuilder_1.default('');\n    // let encoding: Charset = StandardCharsets.ISO_8859_1;\n    var encoding = CharacterSetECI_1.default.ISO8859_1;\n    /**\n     * @note the next command is specific from this TypeScript library\n     * because TS can't properly cast some values to char and\n     * convert it to string later correctly due to encoding\n     * differences from Java version. As reported here:\n     * https://github.com/zxing-js/library/pull/264/files#r382831593\n     */\n    result.enableDecoding(encoding);\n    // Get compaction mode\n    var codeIndex = 1;\n    var code = codewords[codeIndex++];\n    var resultMetadata = new PDF417ResultMetadata_1.default();\n    while (codeIndex < codewords[0]) {\n      switch (code) {\n        case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          codeIndex = DecodedBitStreamParser.byteCompaction(code, codewords, encoding, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n          result.append( /*(char)*/codewords[codeIndex++]);\n          break;\n        case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.ECI_CHARSET:\n          var charsetECI = CharacterSetECI_1.default.getCharacterSetECIByValue(codewords[codeIndex++]);\n          // encoding = Charset.forName(charsetECI.getName());\n          break;\n        case DecodedBitStreamParser.ECI_GENERAL_PURPOSE:\n          // Can't do anything with generic ECI; skip its 2 characters\n          codeIndex += 2;\n          break;\n        case DecodedBitStreamParser.ECI_USER_DEFINED:\n          // Can't do anything with user ECI; skip its 1 character\n          codeIndex++;\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          codeIndex = DecodedBitStreamParser.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          // Should not see these outside a macro block\n          throw new FormatException_1.default();\n        default:\n          // Default to text compaction. During testing numerous barcodes\n          // appeared to be missing the starting mode. In these cases defaulting\n          // to text compaction seems to work.\n          codeIndex--;\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n      }\n      if (codeIndex < codewords.length) {\n        code = codewords[codeIndex++];\n      } else {\n        throw FormatException_1.default.getFormatInstance();\n      }\n    }\n    if (result.length() === 0) {\n      throw FormatException_1.default.getFormatInstance();\n    }\n    var decoderResult = new DecoderResult_1.default(null, result.toString(), null, ecLevel);\n    decoderResult.setOther(resultMetadata);\n    return decoderResult;\n  };\n  /**\n   *\n   * @param int\n   * @param param1\n   * @param codewords\n   * @param int\n   * @param codeIndex\n   * @param PDF417ResultMetadata\n   * @param resultMetadata\n   *\n   * @throws FormatException\n   */\n  // @SuppressWarnings(\"deprecation\")\n  DecodedBitStreamParser.decodeMacroBlock = function (codewords, codeIndex, resultMetadata) {\n    if (codeIndex + DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n      // we must have at least two bytes left for the segment index\n      throw FormatException_1.default.getFormatInstance();\n    }\n    var segmentIndexArray = new Int32Array(DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS);\n    for (var i /*int*/ = 0; i < DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n      segmentIndexArray[i] = codewords[codeIndex];\n    }\n    resultMetadata.setSegmentIndex(Integer_1.default.parseInt(DecodedBitStreamParser.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS)));\n    var fileId = new StringBuilder_1.default();\n    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, fileId);\n    resultMetadata.setFileId(fileId.toString());\n    var optionalFieldsStart = -1;\n    if (codewords[codeIndex] === DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n      optionalFieldsStart = codeIndex + 1;\n    }\n    while (codeIndex < codewords[0]) {\n      switch (codewords[codeIndex]) {\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          codeIndex++;\n          switch (codewords[codeIndex]) {\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n              var fileName = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, fileName);\n              resultMetadata.setFileName(fileName.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n              var sender = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, sender);\n              resultMetadata.setSender(sender.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n              var addressee = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, addressee);\n              resultMetadata.setAddressee(addressee.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n              var segmentCount = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, segmentCount);\n              resultMetadata.setSegmentCount(Integer_1.default.parseInt(segmentCount.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n              var timestamp = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, timestamp);\n              resultMetadata.setTimestamp(Long_1.default.parseLong(timestamp.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n              var checksum = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, checksum);\n              resultMetadata.setChecksum(Integer_1.default.parseInt(checksum.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n              var fileSize = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, fileSize);\n              resultMetadata.setFileSize(Long_1.default.parseLong(fileSize.toString()));\n              break;\n            default:\n              throw FormatException_1.default.getFormatInstance();\n          }\n          break;\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          codeIndex++;\n          resultMetadata.setLastSegment(true);\n          break;\n        default:\n          throw FormatException_1.default.getFormatInstance();\n      }\n    }\n    // copy optional fields to additional options\n    if (optionalFieldsStart !== -1) {\n      var optionalFieldsLength = codeIndex - optionalFieldsStart;\n      if (resultMetadata.isLastSegment()) {\n        // do not include terminator\n        optionalFieldsLength--;\n      }\n      resultMetadata.setOptionalData(Arrays_1.default.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n    }\n    return codeIndex;\n  };\n  /**\n   * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\n   * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\n   * well as selected control characters.\n   *\n   * @param codewords The array of codewords (data + error)\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   */\n  DecodedBitStreamParser.textCompaction = function (codewords, codeIndex, result) {\n    // 2 character per codeword\n    var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    // Used to hold the byte compaction value if there is a mode shift\n    var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    var index = 0;\n    var end = false;\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        textCompactionData[index] = code / 30;\n        textCompactionData[index + 1] = code % 30;\n        index += 2;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            // reinitialize text compaction mode to alpha sub mode\n            textCompactionData[index++] = DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH;\n            break;\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n          case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n            // The Mode Shift codeword 913 shall cause a temporary\n            // switch from Text Compaction mode to Byte Compaction mode.\n            // This switch shall be in effect for only the next codeword,\n            // after which the mode shall revert to the prevailing sub-mode\n            // of the Text Compaction mode. Codeword 913 is only available\n            // in Text Compaction mode; its use is described in 5.4.2.4.\n            textCompactionData[index] = DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n            code = codewords[codeIndex++];\n            byteCompactionData[index] = code;\n            index++;\n            break;\n        }\n      }\n    }\n    DecodedBitStreamParser.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n    return codeIndex;\n  };\n  /**\n   * The Text Compaction mode includes all the printable ASCII characters\n   * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\n   * (9: e), LF or line feed (10: e), and CR or carriage\n   * return (13: e). The Text Compaction mode also includes various latch\n   * and shift characters which are used exclusively within the mode. The Text\n   * Compaction mode encodes up to 2 characters per codeword. The compaction rules\n   * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\n   * switches are defined in 5.4.2.3.\n   *\n   * @param textCompactionData The text compaction data.\n   * @param byteCompactionData The byte compaction data if there\n   *                           was a mode shift.\n   * @param length             The size of the text compaction and byte compaction data.\n   * @param result             The decoded data is appended to the result.\n   */\n  DecodedBitStreamParser.decodeTextCompaction = function (textCompactionData, byteCompactionData, length, result) {\n    // Beginning from an initial state of the Alpha sub-mode\n    // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n    // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n    // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n    var subMode = Mode.ALPHA;\n    var priorToShiftMode = Mode.ALPHA;\n    var i = 0;\n    while (i < length) {\n      var subModeCh = textCompactionData[i];\n      var ch = /*char*/'';\n      switch (subMode) {\n        case Mode.ALPHA:\n          // Alpha (alphabetic: uppercase)\n          if (subModeCh < 26) {\n            // Upper case Alpha Character\n            // Note: 65 = 'A' ASCII -> there is byte code of symbol\n            ch = /*(char)('A' + subModeCh) */String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.LOWER:\n          // Lower (alphabetic: lowercase)\n          if (subModeCh < 26) {\n            ch = /*(char)('a' + subModeCh)*/String.fromCharCode(97 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.AS:\n                // Shift to alpha\n                priorToShiftMode = subMode;\n                subMode = Mode.ALPHA_SHIFT;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // TODO Does this need to use the current character encoding? See other occurrences below\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.MIXED:\n          // Mixed (punctuation: e)\n          if (subModeCh < DecodedBitStreamParser.PL) {\n            ch = DecodedBitStreamParser.MIXED_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PL:\n                subMode = Mode.PUNCT;\n                break;\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.AL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT:\n          // Punctuation\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.ALPHA_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < 26) {\n            ch = /*(char)('A' + subModeCh)*/String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // PS before Shift-to-Byte is used as a padding character,\n                // see 5.4.2.4 of the specification\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n      }\n      // if (ch !== 0) {\n      if (ch !== '') {\n        // Append decoded character to result\n        result.append(ch);\n      }\n      i++;\n    }\n  };\n  /**\n   * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\n   * This includes all ASCII characters value 0 to 127 inclusive and provides for international\n   * character set support.\n   *\n   * @param mode      The byte compaction mode i.e. 901 or 924\n   * @param codewords The array of codewords (data + error)\n   * @param encoding  Currently active character encoding\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   */\n  DecodedBitStreamParser.byteCompaction = function (mode, codewords, encoding, codeIndex, result) {\n    var decodedBytes = new ByteArrayOutputStream_1.default();\n    var count = 0;\n    var value = /*long*/0;\n    var end = false;\n    switch (mode) {\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        // Total number of Byte Compaction characters to be encoded\n        // is not a multiple of 6\n        var byteCompactedCodewords = new Int32Array(6);\n        var nextCode = codewords[codeIndex++];\n        while (codeIndex < codewords[0] && !end) {\n          byteCompactedCodewords[count++] = nextCode;\n          // Base 900\n          value = 900 * value + nextCode;\n          nextCode = codewords[codeIndex++];\n          // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n          switch (nextCode) {\n            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n            case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n              codeIndex--;\n              end = true;\n              break;\n            default:\n              if (count % 5 === 0 && count > 0) {\n                // Decode every 5 codewords\n                // Convert to Base 256\n                for (var j /*int*/ = 0; j < 6; ++j) {\n                  /* @note\n                   * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                   * So the next bitwise operation could not be done with simple numbers\n                   */\n                  decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                }\n                value = 0;\n                count = 0;\n              }\n              break;\n          }\n        }\n        // if the end of all codewords is reached the last codeword needs to be added\n        if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n          byteCompactedCodewords[count++] = nextCode;\n        }\n        // If Byte Compaction mode is invoked with codeword 901,\n        // the last group of codewords is interpreted directly\n        // as one byte per codeword, without compaction.\n        for (var i /*int*/ = 0; i < count; i++) {\n          decodedBytes.write( /*(byte)*/byteCompactedCodewords[i]);\n        }\n        break;\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n        // Total number of Byte Compaction characters to be encoded\n        // is an integer multiple of 6\n        while (codeIndex < codewords[0] && !end) {\n          var code = codewords[codeIndex++];\n          if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n            count++;\n            // Base 900\n            value = 900 * value + code;\n          } else {\n            switch (code) {\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n              case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                codeIndex--;\n                end = true;\n                break;\n            }\n          }\n          if (count % 5 === 0 && count > 0) {\n            // Decode every 5 codewords\n            // Convert to Base 256\n            /* @note\n             * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n             * So the next bitwise operation could not be done with simple numbers\n            */\n            for (var j /*int*/ = 0; j < 6; ++j) {\n              decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n            }\n            value = 0;\n            count = 0;\n          }\n        }\n        break;\n    }\n    result.append(StringEncoding_1.default.decode(decodedBytes.toByteArray(), encoding));\n    return codeIndex;\n  };\n  /**\n   * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\n   *\n   * @param codewords The array of codewords (data + error)\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.numericCompaction = function (codewords, codeIndex /*int*/, result) {\n    var count = 0;\n    var end = false;\n    var numericCodewords = new Int32Array(DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS);\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (codeIndex === codewords[0]) {\n        end = true;\n      }\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        numericCodewords[count] = code;\n        count++;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n        }\n      }\n      if ((count % DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n        // Re-invoking Numeric Compaction mode (by using codeword 902\n        // while in Numeric Compaction mode) serves  to terminate the\n        // current Numeric Compaction mode grouping as described in 5.4.4.2,\n        // and then to start a new one grouping.\n        result.append(DecodedBitStreamParser.decodeBase900toBase10(numericCodewords, count));\n        count = 0;\n      }\n    }\n    return codeIndex;\n  };\n  /**\n   * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\n   *\n   * @param codewords The array of codewords\n   * @param count     The number of codewords\n   * @return The decoded string representing the Numeric data.\n   *\n   * EXAMPLE\n   * Encode the fifteen digit numeric string 000213298174000\n   * Prefix the numeric string with a 1 and set the initial value of\n   * t = 1 000 213 298 174 000\n   * Calculate codeword 0\n   * d0 = 1 000 213 298 174 000 mod 900 = 200\n   *\n   * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\n   * Calculate codeword 1\n   * d1 = 1 111 348 109 082 mod 900 = 282\n   *\n   * t = 1 111 348 109 082 div 900 = 1 234 831 232\n   * Calculate codeword 2\n   * d2 = 1 234 831 232 mod 900 = 632\n   *\n   * t = 1 234 831 232 div 900 = 1 372 034\n   * Calculate codeword 3\n   * d3 = 1 372 034 mod 900 = 434\n   *\n   * t = 1 372 034 div 900 = 1 524\n   * Calculate codeword 4\n   * d4 = 1 524 mod 900 = 624\n   *\n   * t = 1 524 div 900 = 1\n   * Calculate codeword 5\n   * d5 = 1 mod 900 = 1\n   * t = 1 div 900 = 0\n   * Codeword sequence is: 1, 624, 434, 632, 282, 200\n   *\n   * Decode the above codewords involves\n   *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\n   * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\n   *\n   * Remove leading 1 =>  Result is 000213298174000\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.decodeBase900toBase10 = function (codewords, count) {\n    var result = createBigInt(0);\n    for (var i /*int*/ = 0; i < count; i++) {\n      result += DecodedBitStreamParser.EXP900[count - i - 1] * createBigInt(codewords[i]);\n    }\n    var resultString = result.toString();\n    if (resultString.charAt(0) !== '1') {\n      throw new FormatException_1.default();\n    }\n    return resultString.substring(1);\n  };\n  DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH = 900;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH = 901;\n  DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH = 902;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n  DecodedBitStreamParser.ECI_USER_DEFINED = 925;\n  DecodedBitStreamParser.ECI_GENERAL_PURPOSE = 926;\n  DecodedBitStreamParser.ECI_CHARSET = 927;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n  DecodedBitStreamParser.MACRO_PDF417_TERMINATOR = 922;\n  DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n  DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS = 15;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n  DecodedBitStreamParser.PL = 25;\n  DecodedBitStreamParser.LL = 27;\n  DecodedBitStreamParser.AS = 27;\n  DecodedBitStreamParser.ML = 28;\n  DecodedBitStreamParser.AL = 28;\n  DecodedBitStreamParser.PS = 29;\n  DecodedBitStreamParser.PAL = 29;\n  DecodedBitStreamParser.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n  DecodedBitStreamParser.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n  /**\n   * Table containing values for the exponent of 900.\n   * This is used in the numeric compaction decode algorithm.\n   */\n  DecodedBitStreamParser.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n  DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n  return DecodedBitStreamParser;\n}();\nexports.default = DecodedBitStreamParser;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/DecodedBitStreamParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.common.CharacterSetECI;\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\n// import com.google.zxing.common.DecoderResult;\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n// import com.google.zxing.pdf417.PDF417ResultMetadata;\nvar PDF417ResultMetadata_1 = require(\"../PDF417ResultMetadata\");\n// import java.io.ByteArrayOutputStream;\n// import java.math.BigInteger;\n// import java.nio.charset.Charset;\n// import java.nio.charset.StandardCharsets;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar Long_1 = require(\"../../util/Long\");\nvar ByteArrayOutputStream_1 = require(\"../../util/ByteArrayOutputStream\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n/*private*/ var Mode;\n(function (Mode) {\n    Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n    Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n    Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n    Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n    Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n    Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n})(Mode || (Mode = {}));\n/**\n * Indirectly access the global BigInt constructor, it\n * allows browsers that doesn't support BigInt to run\n * the library without breaking due to \"undefined BigInt\"\n * errors.\n */\nfunction getBigIntConstructor() {\n    if (typeof window !== 'undefined') {\n        return window['BigInt'] || null;\n    }\n    if (typeof global !== 'undefined') {\n        return global['BigInt'] || null;\n    }\n    throw new Error('Can\\'t search globals for BigInt!');\n}\n/**\n * Used to store the BigInt constructor.\n */\nvar BigInteger;\n/**\n * This function creates a bigint value. It allows browsers\n * that doesn't support BigInt to run the rest of the library\n * by not directly accessing the BigInt constructor.\n */\nfunction createBigInt(num) {\n    if (typeof BigInteger === 'undefined') {\n        BigInteger = getBigIntConstructor();\n    }\n    if (BigInteger === null) {\n        throw new Error('BigInt is not supported!');\n    }\n    return BigInteger(num);\n}\nfunction getEXP900() {\n    // in Java - array with length = 16\n    var EXP900 = [];\n    EXP900[0] = createBigInt(1);\n    var nineHundred = createBigInt(900);\n    EXP900[1] = nineHundred;\n    // in Java - array with length = 16\n    for (var i /*int*/ = 2; i < 16; i++) {\n        EXP900[i] = EXP900[i - 1] * nineHundred;\n    }\n    return EXP900;\n}\n/**\n * <p>This class contains the methods for decoding the PDF417 codewords.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author Guenther Grau\n */\nvar DecodedBitStreamParser = /** @class */ (function () {\n    function DecodedBitStreamParser() {\n    }\n    //   private DecodedBitStreamParser() {\n    // }\n    /**\n     *\n     * @param codewords\n     * @param ecLevel\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.decode = function (codewords, ecLevel) {\n        // pass encoding to result (will be used for decode symbols in byte mode)\n        var result = new StringBuilder_1.default('');\n        // let encoding: Charset = StandardCharsets.ISO_8859_1;\n        var encoding = CharacterSetECI_1.default.ISO8859_1;\n        /**\n         * @note the next command is specific from this TypeScript library\n         * because TS can't properly cast some values to char and\n         * convert it to string later correctly due to encoding\n         * differences from Java version. As reported here:\n         * https://github.com/zxing-js/library/pull/264/files#r382831593\n         */\n        result.enableDecoding(encoding);\n        // Get compaction mode\n        var codeIndex = 1;\n        var code = codewords[codeIndex++];\n        var resultMetadata = new PDF417ResultMetadata_1.default();\n        while (codeIndex < codewords[0]) {\n            switch (code) {\n                case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    codeIndex = DecodedBitStreamParser.byteCompaction(code, codewords, encoding, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                    result.append(/*(char)*/ codewords[codeIndex++]);\n                    break;\n                case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                    codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.ECI_CHARSET:\n                    var charsetECI = CharacterSetECI_1.default.getCharacterSetECIByValue(codewords[codeIndex++]);\n                    // encoding = Charset.forName(charsetECI.getName());\n                    break;\n                case DecodedBitStreamParser.ECI_GENERAL_PURPOSE:\n                    // Can't do anything with generic ECI; skip its 2 characters\n                    codeIndex += 2;\n                    break;\n                case DecodedBitStreamParser.ECI_USER_DEFINED:\n                    // Can't do anything with user ECI; skip its 1 character\n                    codeIndex++;\n                    break;\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    codeIndex = DecodedBitStreamParser.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n                    break;\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                    // Should not see these outside a macro block\n                    throw new FormatException_1.default();\n                default:\n                    // Default to text compaction. During testing numerous barcodes\n                    // appeared to be missing the starting mode. In these cases defaulting\n                    // to text compaction seems to work.\n                    codeIndex--;\n                    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n                    break;\n            }\n            if (codeIndex < codewords.length) {\n                code = codewords[codeIndex++];\n            }\n            else {\n                throw FormatException_1.default.getFormatInstance();\n            }\n        }\n        if (result.length() === 0) {\n            throw FormatException_1.default.getFormatInstance();\n        }\n        var decoderResult = new DecoderResult_1.default(null, result.toString(), null, ecLevel);\n        decoderResult.setOther(resultMetadata);\n        return decoderResult;\n    };\n    /**\n     *\n     * @param int\n     * @param param1\n     * @param codewords\n     * @param int\n     * @param codeIndex\n     * @param PDF417ResultMetadata\n     * @param resultMetadata\n     *\n     * @throws FormatException\n     */\n    // @SuppressWarnings(\"deprecation\")\n    DecodedBitStreamParser.decodeMacroBlock = function (codewords, codeIndex, resultMetadata) {\n        if (codeIndex + DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n            // we must have at least two bytes left for the segment index\n            throw FormatException_1.default.getFormatInstance();\n        }\n        var segmentIndexArray = new Int32Array(DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS);\n        for (var i /*int*/ = 0; i < DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n            segmentIndexArray[i] = codewords[codeIndex];\n        }\n        resultMetadata.setSegmentIndex(Integer_1.default.parseInt(DecodedBitStreamParser.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS)));\n        var fileId = new StringBuilder_1.default();\n        codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, fileId);\n        resultMetadata.setFileId(fileId.toString());\n        var optionalFieldsStart = -1;\n        if (codewords[codeIndex] === DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n            optionalFieldsStart = codeIndex + 1;\n        }\n        while (codeIndex < codewords[0]) {\n            switch (codewords[codeIndex]) {\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    codeIndex++;\n                    switch (codewords[codeIndex]) {\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n                            var fileName = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, fileName);\n                            resultMetadata.setFileName(fileName.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n                            var sender = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, sender);\n                            resultMetadata.setSender(sender.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n                            var addressee = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, addressee);\n                            resultMetadata.setAddressee(addressee.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n                            var segmentCount = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, segmentCount);\n                            resultMetadata.setSegmentCount(Integer_1.default.parseInt(segmentCount.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n                            var timestamp = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, timestamp);\n                            resultMetadata.setTimestamp(Long_1.default.parseLong(timestamp.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n                            var checksum = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, checksum);\n                            resultMetadata.setChecksum(Integer_1.default.parseInt(checksum.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n                            var fileSize = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, fileSize);\n                            resultMetadata.setFileSize(Long_1.default.parseLong(fileSize.toString()));\n                            break;\n                        default:\n                            throw FormatException_1.default.getFormatInstance();\n                    }\n                    break;\n                case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                    codeIndex++;\n                    resultMetadata.setLastSegment(true);\n                    break;\n                default:\n                    throw FormatException_1.default.getFormatInstance();\n            }\n        }\n        // copy optional fields to additional options\n        if (optionalFieldsStart !== -1) {\n            var optionalFieldsLength = codeIndex - optionalFieldsStart;\n            if (resultMetadata.isLastSegment()) {\n                // do not include terminator\n                optionalFieldsLength--;\n            }\n            resultMetadata.setOptionalData(Arrays_1.default.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n        }\n        return codeIndex;\n    };\n    /**\n     * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\n     * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\n     * well as selected control characters.\n     *\n     * @param codewords The array of codewords (data + error)\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     */\n    DecodedBitStreamParser.textCompaction = function (codewords, codeIndex, result) {\n        // 2 character per codeword\n        var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n        // Used to hold the byte compaction value if there is a mode shift\n        var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n        var index = 0;\n        var end = false;\n        while ((codeIndex < codewords[0]) && !end) {\n            var code = codewords[codeIndex++];\n            if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                textCompactionData[index] = code / 30;\n                textCompactionData[index + 1] = code % 30;\n                index += 2;\n            }\n            else {\n                switch (code) {\n                    case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                        // reinitialize text compaction mode to alpha sub mode\n                        textCompactionData[index++] = DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH;\n                        break;\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                        codeIndex--;\n                        end = true;\n                        break;\n                    case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                        // The Mode Shift codeword 913 shall cause a temporary\n                        // switch from Text Compaction mode to Byte Compaction mode.\n                        // This switch shall be in effect for only the next codeword,\n                        // after which the mode shall revert to the prevailing sub-mode\n                        // of the Text Compaction mode. Codeword 913 is only available\n                        // in Text Compaction mode; its use is described in 5.4.2.4.\n                        textCompactionData[index] = DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n                        code = codewords[codeIndex++];\n                        byteCompactionData[index] = code;\n                        index++;\n                        break;\n                }\n            }\n        }\n        DecodedBitStreamParser.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n        return codeIndex;\n    };\n    /**\n     * The Text Compaction mode includes all the printable ASCII characters\n     * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\n     * (9: e), LF or line feed (10: e), and CR or carriage\n     * return (13: e). The Text Compaction mode also includes various latch\n     * and shift characters which are used exclusively within the mode. The Text\n     * Compaction mode encodes up to 2 characters per codeword. The compaction rules\n     * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\n     * switches are defined in 5.4.2.3.\n     *\n     * @param textCompactionData The text compaction data.\n     * @param byteCompactionData The byte compaction data if there\n     *                           was a mode shift.\n     * @param length             The size of the text compaction and byte compaction data.\n     * @param result             The decoded data is appended to the result.\n     */\n    DecodedBitStreamParser.decodeTextCompaction = function (textCompactionData, byteCompactionData, length, result) {\n        // Beginning from an initial state of the Alpha sub-mode\n        // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n        // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n        // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n        var subMode = Mode.ALPHA;\n        var priorToShiftMode = Mode.ALPHA;\n        var i = 0;\n        while (i < length) {\n            var subModeCh = textCompactionData[i];\n            var ch = /*char*/ '';\n            switch (subMode) {\n                case Mode.ALPHA:\n                    // Alpha (alphabetic: uppercase)\n                    if (subModeCh < 26) {\n                        // Upper case Alpha Character\n                        // Note: 65 = 'A' ASCII -> there is byte code of symbol\n                        ch = /*(char)('A' + subModeCh) */ String.fromCharCode(65 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.LL:\n                                subMode = Mode.LOWER;\n                                break;\n                            case DecodedBitStreamParser.ML:\n                                subMode = Mode.MIXED;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.LOWER:\n                    // Lower (alphabetic: lowercase)\n                    if (subModeCh < 26) {\n                        ch = /*(char)('a' + subModeCh)*/ String.fromCharCode(97 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.AS:\n                                // Shift to alpha\n                                priorToShiftMode = subMode;\n                                subMode = Mode.ALPHA_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.ML:\n                                subMode = Mode.MIXED;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                // TODO Does this need to use the current character encoding? See other occurrences below\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.MIXED:\n                    // Mixed (punctuation: e)\n                    if (subModeCh < DecodedBitStreamParser.PL) {\n                        ch = DecodedBitStreamParser.MIXED_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PL:\n                                subMode = Mode.PUNCT;\n                                break;\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.LL:\n                                subMode = Mode.LOWER;\n                                break;\n                            case DecodedBitStreamParser.AL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.PUNCT:\n                    // Punctuation\n                    if (subModeCh < DecodedBitStreamParser.PAL) {\n                        ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PAL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.ALPHA_SHIFT:\n                    // Restore sub-mode\n                    subMode = priorToShiftMode;\n                    if (subModeCh < 26) {\n                        ch = /*(char)('A' + subModeCh)*/ String.fromCharCode(65 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.PUNCT_SHIFT:\n                    // Restore sub-mode\n                    subMode = priorToShiftMode;\n                    if (subModeCh < DecodedBitStreamParser.PAL) {\n                        ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PAL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                // PS before Shift-to-Byte is used as a padding character,\n                                // see 5.4.2.4 of the specification\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n            }\n            // if (ch !== 0) {\n            if (ch !== '') {\n                // Append decoded character to result\n                result.append(ch);\n            }\n            i++;\n        }\n    };\n    /**\n     * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\n     * This includes all ASCII characters value 0 to 127 inclusive and provides for international\n     * character set support.\n     *\n     * @param mode      The byte compaction mode i.e. 901 or 924\n     * @param codewords The array of codewords (data + error)\n     * @param encoding  Currently active character encoding\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     */\n    DecodedBitStreamParser.byteCompaction = function (mode, codewords, encoding, codeIndex, result) {\n        var decodedBytes = new ByteArrayOutputStream_1.default();\n        var count = 0;\n        var value = /*long*/ 0;\n        var end = false;\n        switch (mode) {\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                // Total number of Byte Compaction characters to be encoded\n                // is not a multiple of 6\n                var byteCompactedCodewords = new Int32Array(6);\n                var nextCode = codewords[codeIndex++];\n                while ((codeIndex < codewords[0]) && !end) {\n                    byteCompactedCodewords[count++] = nextCode;\n                    // Base 900\n                    value = 900 * value + nextCode;\n                    nextCode = codewords[codeIndex++];\n                    // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n                    switch (nextCode) {\n                        case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                            codeIndex--;\n                            end = true;\n                            break;\n                        default:\n                            if ((count % 5 === 0) && (count > 0)) {\n                                // Decode every 5 codewords\n                                // Convert to Base 256\n                                for (var j /*int*/ = 0; j < 6; ++j) {\n                                    /* @note\n                                     * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                                     * So the next bitwise operation could not be done with simple numbers\n                                     */\n                                    decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                                }\n                                value = 0;\n                                count = 0;\n                            }\n                            break;\n                    }\n                }\n                // if the end of all codewords is reached the last codeword needs to be added\n                if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                    byteCompactedCodewords[count++] = nextCode;\n                }\n                // If Byte Compaction mode is invoked with codeword 901,\n                // the last group of codewords is interpreted directly\n                // as one byte per codeword, without compaction.\n                for (var i /*int*/ = 0; i < count; i++) {\n                    decodedBytes.write(/*(byte)*/ byteCompactedCodewords[i]);\n                }\n                break;\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                // Total number of Byte Compaction characters to be encoded\n                // is an integer multiple of 6\n                while (codeIndex < codewords[0] && !end) {\n                    var code = codewords[codeIndex++];\n                    if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                        count++;\n                        // Base 900\n                        value = 900 * value + code;\n                    }\n                    else {\n                        switch (code) {\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                            case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                                codeIndex--;\n                                end = true;\n                                break;\n                        }\n                    }\n                    if ((count % 5 === 0) && (count > 0)) {\n                        // Decode every 5 codewords\n                        // Convert to Base 256\n                        /* @note\n                         * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                         * So the next bitwise operation could not be done with simple numbers\n                        */\n                        for (var j /*int*/ = 0; j < 6; ++j) {\n                            decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                        }\n                        value = 0;\n                        count = 0;\n                    }\n                }\n                break;\n        }\n        result.append(StringEncoding_1.default.decode(decodedBytes.toByteArray(), encoding));\n        return codeIndex;\n    };\n    /**\n     * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\n     *\n     * @param codewords The array of codewords (data + error)\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.numericCompaction = function (codewords, codeIndex /*int*/, result) {\n        var count = 0;\n        var end = false;\n        var numericCodewords = new Int32Array(DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS);\n        while (codeIndex < codewords[0] && !end) {\n            var code = codewords[codeIndex++];\n            if (codeIndex === codewords[0]) {\n                end = true;\n            }\n            if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                numericCodewords[count] = code;\n                count++;\n            }\n            else {\n                switch (code) {\n                    case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                        codeIndex--;\n                        end = true;\n                        break;\n                }\n            }\n            if ((count % DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n                // Re-invoking Numeric Compaction mode (by using codeword 902\n                // while in Numeric Compaction mode) serves  to terminate the\n                // current Numeric Compaction mode grouping as described in 5.4.4.2,\n                // and then to start a new one grouping.\n                result.append(DecodedBitStreamParser.decodeBase900toBase10(numericCodewords, count));\n                count = 0;\n            }\n        }\n        return codeIndex;\n    };\n    /**\n     * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\n     *\n     * @param codewords The array of codewords\n     * @param count     The number of codewords\n     * @return The decoded string representing the Numeric data.\n     *\n     * EXAMPLE\n     * Encode the fifteen digit numeric string 000213298174000\n     * Prefix the numeric string with a 1 and set the initial value of\n     * t = 1 000 213 298 174 000\n     * Calculate codeword 0\n     * d0 = 1 000 213 298 174 000 mod 900 = 200\n     *\n     * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\n     * Calculate codeword 1\n     * d1 = 1 111 348 109 082 mod 900 = 282\n     *\n     * t = 1 111 348 109 082 div 900 = 1 234 831 232\n     * Calculate codeword 2\n     * d2 = 1 234 831 232 mod 900 = 632\n     *\n     * t = 1 234 831 232 div 900 = 1 372 034\n     * Calculate codeword 3\n     * d3 = 1 372 034 mod 900 = 434\n     *\n     * t = 1 372 034 div 900 = 1 524\n     * Calculate codeword 4\n     * d4 = 1 524 mod 900 = 624\n     *\n     * t = 1 524 div 900 = 1\n     * Calculate codeword 5\n     * d5 = 1 mod 900 = 1\n     * t = 1 div 900 = 0\n     * Codeword sequence is: 1, 624, 434, 632, 282, 200\n     *\n     * Decode the above codewords involves\n     *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\n     * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\n     *\n     * Remove leading 1 =>  Result is 000213298174000\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.decodeBase900toBase10 = function (codewords, count) {\n        var result = createBigInt(0);\n        for (var i /*int*/ = 0; i < count; i++) {\n            result += DecodedBitStreamParser.EXP900[count - i - 1] * createBigInt(codewords[i]);\n        }\n        var resultString = result.toString();\n        if (resultString.charAt(0) !== '1') {\n            throw new FormatException_1.default();\n        }\n        return resultString.substring(1);\n    };\n    DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH = 900;\n    DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH = 901;\n    DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH = 902;\n    DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n    DecodedBitStreamParser.ECI_USER_DEFINED = 925;\n    DecodedBitStreamParser.ECI_GENERAL_PURPOSE = 926;\n    DecodedBitStreamParser.ECI_CHARSET = 927;\n    DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n    DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n    DecodedBitStreamParser.MACRO_PDF417_TERMINATOR = 922;\n    DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n    DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS = 15;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n    DecodedBitStreamParser.PL = 25;\n    DecodedBitStreamParser.LL = 27;\n    DecodedBitStreamParser.AS = 27;\n    DecodedBitStreamParser.ML = 28;\n    DecodedBitStreamParser.AL = 28;\n    DecodedBitStreamParser.PS = 29;\n    DecodedBitStreamParser.PAL = 29;\n    DecodedBitStreamParser.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n    DecodedBitStreamParser.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n    /**\n     * Table containing values for the exponent of 900.\n     * This is used in the numeric compaction decode algorithm.\n     */\n    DecodedBitStreamParser.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n    DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n    return DecodedBitStreamParser;\n}());\nexports.default = DecodedBitStreamParser;\n//# sourceMappingURL=DecodedBitStreamParser.js.map"]},"metadata":{},"sourceType":"script"}