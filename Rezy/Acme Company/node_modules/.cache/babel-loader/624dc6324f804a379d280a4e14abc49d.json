{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar FinderPattern_1 = require(\"./FinderPattern\");\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collections;*/\n/*import java.util.Comparator;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\nvar FinderPatternFinder = /** @class */function () {\n  /**\n   * <p>Creates a finder that will search the image for three finder patterns.</p>\n   *\n   * @param image image to search\n   */\n  // public constructor(image: BitMatrix) {\n  //   this(image, null)\n  // }\n  function FinderPatternFinder(image, resultPointCallback) {\n    this.image = image;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = [];\n    this.crossCheckStateCount = new Int32Array(5);\n    this.resultPointCallback = resultPointCallback;\n  }\n  FinderPatternFinder.prototype.getImage = function () {\n    return this.image;\n  };\n  FinderPatternFinder.prototype.getPossibleCenters = function () {\n    return this.possibleCenters;\n  };\n  FinderPatternFinder.prototype.find = function (hints) {\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    var pureBarcode = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n    var image = this.image;\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // We are looking for black/white/black/white/black modules in\n    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n    // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n    // image, and then account for the center being 3 modules in size. This gives the smallest\n    // number of pixels the center could be, so skip this often. When trying harder, look for all\n    // QR versions regardless of how dense they are.\n    var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder.MAX_MODULES));\n    if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n      iSkip = FinderPatternFinder.MIN_SKIP;\n    }\n    var done = false;\n    var stateCount = new Int32Array(5);\n    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n      // Get a row of black/white values\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      stateCount[3] = 0;\n      stateCount[4] = 0;\n      var currentState = 0;\n      for (var j = 0; j < maxJ; j++) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if ((currentState & 1) === 1) {\n            // Counting white pixels\n            currentState++;\n          }\n          stateCount[currentState]++;\n        } else {\n          // White pixel\n          if ((currentState & 1) === 0) {\n            // Counting black pixels\n            if (currentState === 4) {\n              // A winner?\n              if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                if (confirmed === true) {\n                  // Start examining every other line. Checking each line turned out to be too\n                  // expensive and didn't improve performance.\n                  iSkip = 2;\n                  if (this.hasSkipped === true) {\n                    done = this.haveMultiplyConfirmedCenters();\n                  } else {\n                    var rowSkip = this.findRowSkip();\n                    if (rowSkip > stateCount[2]) {\n                      // Skip rows between row of lower confirmed center\n                      // and top of presumed third confirmed center\n                      // but back up a bit to get a full chance of detecting\n                      // it, entire width of center of finder pattern\n                      // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                      // of pattern we saw) to be conservative, and also back off by iSkip which\n                      // is about to be re-added\n                      i += rowSkip - stateCount[2] - iSkip;\n                      j = maxJ - 1;\n                    }\n                  }\n                } else {\n                  stateCount[0] = stateCount[2];\n                  stateCount[1] = stateCount[3];\n                  stateCount[2] = stateCount[4];\n                  stateCount[3] = 1;\n                  stateCount[4] = 0;\n                  currentState = 3;\n                  continue;\n                }\n                // Clear state to start looking again\n                currentState = 0;\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n              } else {\n                // No, shift counts back by two\n                stateCount[0] = stateCount[2];\n                stateCount[1] = stateCount[3];\n                stateCount[2] = stateCount[4];\n                stateCount[3] = 1;\n                stateCount[4] = 0;\n                currentState = 3;\n              }\n            } else {\n              stateCount[++currentState]++;\n            }\n          } else {\n            // Counting white pixels\n            stateCount[currentState]++;\n          }\n        }\n      }\n      if (FinderPatternFinder.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n        if (confirmed === true) {\n          iSkip = stateCount[0];\n          if (this.hasSkipped) {\n            // Found a third one\n            done = this.haveMultiplyConfirmedCenters();\n          }\n        }\n      }\n    }\n    var patternInfo = this.selectBestPatterns();\n    ResultPoint_1.default.orderBestPatterns(patternInfo);\n    return new FinderPatternInfo_1.default(patternInfo);\n  };\n  /**\n   * Given a count of black/white/black/white/black pixels just seen and an end position,\n   * figures the location of the center of this run.\n   */\n  FinderPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n    return end - stateCount[4] - stateCount[3] - stateCount[2] / 2.0;\n  };\n  /**\n   * @param stateCount count of black/white/black/white/black pixels just read\n   * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n   *         used by finder patterns to be considered a match\n   */\n  FinderPatternFinder.foundPatternCross = function (stateCount) {\n    var totalModuleSize = 0;\n    for (var i = 0; i < 5; i++) {\n      var count = stateCount[i];\n      if (count === 0) {\n        return false;\n      }\n      totalModuleSize += count;\n    }\n    if (totalModuleSize < 7) {\n      return false;\n    }\n    var moduleSize = totalModuleSize / 7.0;\n    var maxVariance = moduleSize / 2.0;\n    // Allow less than 50% variance from 1-1-3-1-1 proportions\n    return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;\n  };\n  FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n    var crossCheckStateCount = this.crossCheckStateCount;\n    crossCheckStateCount[0] = 0;\n    crossCheckStateCount[1] = 0;\n    crossCheckStateCount[2] = 0;\n    crossCheckStateCount[3] = 0;\n    crossCheckStateCount[4] = 0;\n    return crossCheckStateCount;\n  };\n  /**\n   * After a vertical and horizontal scan finds a potential finder pattern, this method\n   * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n   * finder pattern to see if the same proportion is detected.\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   *  observed in any reading state, based on the results of the horizontal scan\n   * @param originalStateCountTotal The original state count total.\n   * @return true if proportions are withing expected limits\n   */\n  FinderPatternFinder.prototype.crossCheckDiagonal = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up, left from center finding black center mass\n    var i = 0;\n    var image = this.image;\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (startI < i || centerJ < i) {\n      return false;\n    }\n    // Continue up, left finding white space\n    while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n      return false;\n    }\n    // Continue up, left finding black border\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i++;\n    }\n    if (stateCount[0] > maxCount) {\n      return false;\n    }\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // Now also count down, right from center\n    i = 1;\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n      stateCount[2]++;\n      i++;\n    }\n    // Ran off the edge?\n    if (startI + i >= maxI || centerJ + i >= maxJ) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return false;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 100% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder.foundPatternCross(stateCount);\n  };\n  /**\n   * <p>After a horizontal scan finds a potential finder pattern, this method\n   * \"cross-checks\" by scanning down vertically through the center of the possible\n   * finder pattern to see if the same proportion is detected.</p>\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   * observed in any reading state, based on the results of the horizontal scan\n   * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n   */\n  FinderPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up from center\n    var i = startI;\n    while (i >= 0 && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i--;\n    }\n    if (i < 0) {\n      return NaN;\n    }\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    // Now also count down from center\n    i = startI + 1;\n    while (i < maxI && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (i === maxI) {\n      return NaN;\n    }\n    while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (i === maxI || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 40% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\n   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n   * except it reads horizontally instead of vertically. This is used to cross-cross\n   * check a vertical cross check and locate the real center of the alignment pattern.</p>\n   */\n  FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxJ = image.getWidth();\n    var stateCount = this.getCrossCheckStateCount();\n    var j = startJ;\n    while (j >= 0 && image.get(j, centerI)) {\n      stateCount[2]++;\n      j--;\n    }\n    if (j < 0) {\n      return NaN;\n    }\n    while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      j--;\n    }\n    if (j < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      j--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    j = startJ + 1;\n    while (j < maxJ && image.get(j, centerI)) {\n      stateCount[2]++;\n      j++;\n    }\n    if (j === maxJ) {\n      return NaN;\n    }\n    while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      j++;\n    }\n    if (j === maxJ || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      j++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is significantly different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n  };\n  /**\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n   * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n   * with another horizontal scan. This is needed primarily to locate the real horizontal\n   * center of the pattern in cases of extreme skew.\n   * And then we cross-cross-cross check with another diagonal scan.</p>\n   *\n   * <p>If that succeeds the finder pattern location is added to a list that tracks\n   * the number of times each location has been nearly-matched as a finder pattern.\n   * Each additional find is more evidence that the location is in fact a finder\n   * pattern center\n   *\n   * @param stateCount reading state module counts from horizontal scan\n   * @param i row where finder pattern may be found\n   * @param j end of possible finder pattern in row\n   * @param pureBarcode true if in \"pure barcode\" mode\n   * @return true if a finder pattern candidate was found this time\n   */\n  FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/, pureBarcode) {\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i, /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal);\n    if (!isNaN(centerI)) {\n      // Re-cross check\n      centerJ = this.crossCheckHorizontal( /*(int) */Math.floor(centerJ), /*(int) */Math.floor(centerI), stateCount[2], stateCountTotal);\n      if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal( /*(int) */Math.floor(centerI), /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n        var estimatedModuleSize = stateCountTotal / 7.0;\n        var found = false;\n        var possibleCenters = this.possibleCenters;\n        for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n          var center = possibleCenters[index];\n          // Look for about the same center and module size:\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n          possibleCenters.push(point);\n          if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n            this.resultPointCallback.foundPossibleResultPoint(point);\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @return number of rows we could safely skip during scanning, based on the first\n   *         two finder patterns that have been located. In some cases their position will\n   *         allow us to infer that the third pattern must lie below a certain point farther\n   *         down in the image.\n   */\n  FinderPatternFinder.prototype.findRowSkip = function () {\n    var e_1, _a;\n    var max = this.possibleCenters.length;\n    if (max <= 1) {\n      return 0;\n    }\n    var firstConfirmedCenter = null;\n    try {\n      for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var center = _c.value;\n        if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          if (firstConfirmedCenter == null) {\n            firstConfirmedCenter = center;\n          } else {\n            // We have two confirmed centers\n            // How far down can we skip before resuming looking for the next\n            // pattern? In the worst case, only the difference between the\n            // difference in the x / y coordinates of the two centers.\n            // This is the case where you find top left last.\n            this.hasSkipped = true;\n            return (/*(int) */Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)\n            );\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return 0;\n  };\n  /**\n   * @return true iff we have found at least 3 finder patterns that have been detected\n   *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n   *         candidates is \"pretty similar\"\n   */\n  FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n    var e_2, _a, e_3, _b;\n    var confirmedCount = 0;\n    var totalModuleSize = 0.0;\n    var max = this.possibleCenters.length;\n    try {\n      for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pattern = _d.value;\n        if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          confirmedCount++;\n          totalModuleSize += pattern.getEstimatedModuleSize();\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    if (confirmedCount < 3) {\n      return false;\n    }\n    // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n    // and that we need to keep looking. We detect this by asking if the estimated module sizes\n    // vary too much. We arbitrarily say that when the total deviation from average exceeds\n    // 5% of the total module size estimates, it's too much.\n    var average = totalModuleSize / max;\n    var totalDeviation = 0.0;\n    try {\n      for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var pattern = _f.value;\n        totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return totalDeviation <= 0.05 * totalModuleSize;\n  };\n  /**\n   * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n   *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n   *         size differs from the average among those patterns the least\n   * @throws NotFoundException if 3 such finder patterns do not exist\n   */\n  FinderPatternFinder.prototype.selectBestPatterns = function () {\n    var e_4, _a, e_5, _b;\n    var startSize = this.possibleCenters.length;\n    if (startSize < 3) {\n      // Couldn't find enough finder patterns\n      throw new NotFoundException_1.default();\n    }\n    var possibleCenters = this.possibleCenters;\n    var average;\n    // Filter outlier possibilities whose module size is too different\n    if (startSize > 3) {\n      // But we can only afford to do so if we have at least 4 possibilities to choose from\n      var totalModuleSize = 0.0;\n      var square = 0.0;\n      try {\n        for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var center = _d.value;\n          var size = center.getEstimatedModuleSize();\n          totalModuleSize += size;\n          square += size * size;\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n      average = totalModuleSize / startSize;\n      var stdDev = Math.sqrt(square / startSize - average * average);\n      possibleCenters.sort(\n      /**\n       * <p>Orders by furthest from average</p>\n       */\n      // FurthestFromAverageComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n        var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n        return dA < dB ? -1 : dA > dB ? 1 : 0;\n      });\n      var limit = Math.max(0.2 * average, stdDev);\n      for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n        var pattern = possibleCenters[i];\n        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n          possibleCenters.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    if (possibleCenters.length > 3) {\n      // Throw away all but those first size candidate points we found.\n      var totalModuleSize = 0.0;\n      try {\n        for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n          var possibleCenter = possibleCenters_1_1.value;\n          totalModuleSize += possibleCenter.getEstimatedModuleSize();\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      average = totalModuleSize / possibleCenters.length;\n      possibleCenters.sort(\n      /**\n       * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n       */\n      // CenterComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        if (center2.getCount() === center1.getCount()) {\n          var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n          var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n          return dA < dB ? 1 : dA > dB ? -1 : 0;\n        } else {\n          return center2.getCount() - center1.getCount();\n        }\n      });\n      possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n    }\n\n    return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\n  };\n  FinderPatternFinder.CENTER_QUORUM = 2;\n  FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n  FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n  return FinderPatternFinder;\n}();\nexports.default = FinderPatternFinder;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/FinderPatternFinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar FinderPattern_1 = require(\"./FinderPattern\");\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collections;*/\n/*import java.util.Comparator;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\nvar FinderPatternFinder = /** @class */ (function () {\n    /**\n     * <p>Creates a finder that will search the image for three finder patterns.</p>\n     *\n     * @param image image to search\n     */\n    // public constructor(image: BitMatrix) {\n    //   this(image, null)\n    // }\n    function FinderPatternFinder(image, resultPointCallback) {\n        this.image = image;\n        this.resultPointCallback = resultPointCallback;\n        this.possibleCenters = [];\n        this.crossCheckStateCount = new Int32Array(5);\n        this.resultPointCallback = resultPointCallback;\n    }\n    FinderPatternFinder.prototype.getImage = function () {\n        return this.image;\n    };\n    FinderPatternFinder.prototype.getPossibleCenters = function () {\n        return this.possibleCenters;\n    };\n    FinderPatternFinder.prototype.find = function (hints) {\n        var tryHarder = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n        var pureBarcode = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n        var image = this.image;\n        var maxI = image.getHeight();\n        var maxJ = image.getWidth();\n        // We are looking for black/white/black/white/black modules in\n        // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n        // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n        // image, and then account for the center being 3 modules in size. This gives the smallest\n        // number of pixels the center could be, so skip this often. When trying harder, look for all\n        // QR versions regardless of how dense they are.\n        var iSkip = Math.floor((3 * maxI) / (4 * FinderPatternFinder.MAX_MODULES));\n        if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n            iSkip = FinderPatternFinder.MIN_SKIP;\n        }\n        var done = false;\n        var stateCount = new Int32Array(5);\n        for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n            // Get a row of black/white values\n            stateCount[0] = 0;\n            stateCount[1] = 0;\n            stateCount[2] = 0;\n            stateCount[3] = 0;\n            stateCount[4] = 0;\n            var currentState = 0;\n            for (var j = 0; j < maxJ; j++) {\n                if (image.get(j, i)) {\n                    // Black pixel\n                    if ((currentState & 1) === 1) { // Counting white pixels\n                        currentState++;\n                    }\n                    stateCount[currentState]++;\n                }\n                else { // White pixel\n                    if ((currentState & 1) === 0) { // Counting black pixels\n                        if (currentState === 4) { // A winner?\n                            if (FinderPatternFinder.foundPatternCross(stateCount)) { // Yes\n                                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                                if (confirmed === true) {\n                                    // Start examining every other line. Checking each line turned out to be too\n                                    // expensive and didn't improve performance.\n                                    iSkip = 2;\n                                    if (this.hasSkipped === true) {\n                                        done = this.haveMultiplyConfirmedCenters();\n                                    }\n                                    else {\n                                        var rowSkip = this.findRowSkip();\n                                        if (rowSkip > stateCount[2]) {\n                                            // Skip rows between row of lower confirmed center\n                                            // and top of presumed third confirmed center\n                                            // but back up a bit to get a full chance of detecting\n                                            // it, entire width of center of finder pattern\n                                            // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                                            // of pattern we saw) to be conservative, and also back off by iSkip which\n                                            // is about to be re-added\n                                            i += rowSkip - stateCount[2] - iSkip;\n                                            j = maxJ - 1;\n                                        }\n                                    }\n                                }\n                                else {\n                                    stateCount[0] = stateCount[2];\n                                    stateCount[1] = stateCount[3];\n                                    stateCount[2] = stateCount[4];\n                                    stateCount[3] = 1;\n                                    stateCount[4] = 0;\n                                    currentState = 3;\n                                    continue;\n                                }\n                                // Clear state to start looking again\n                                currentState = 0;\n                                stateCount[0] = 0;\n                                stateCount[1] = 0;\n                                stateCount[2] = 0;\n                                stateCount[3] = 0;\n                                stateCount[4] = 0;\n                            }\n                            else { // No, shift counts back by two\n                                stateCount[0] = stateCount[2];\n                                stateCount[1] = stateCount[3];\n                                stateCount[2] = stateCount[4];\n                                stateCount[3] = 1;\n                                stateCount[4] = 0;\n                                currentState = 3;\n                            }\n                        }\n                        else {\n                            stateCount[++currentState]++;\n                        }\n                    }\n                    else { // Counting white pixels\n                        stateCount[currentState]++;\n                    }\n                }\n            }\n            if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n                if (confirmed === true) {\n                    iSkip = stateCount[0];\n                    if (this.hasSkipped) {\n                        // Found a third one\n                        done = this.haveMultiplyConfirmedCenters();\n                    }\n                }\n            }\n        }\n        var patternInfo = this.selectBestPatterns();\n        ResultPoint_1.default.orderBestPatterns(patternInfo);\n        return new FinderPatternInfo_1.default(patternInfo);\n    };\n    /**\n     * Given a count of black/white/black/white/black pixels just seen and an end position,\n     * figures the location of the center of this run.\n     */\n    FinderPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n        return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\n    };\n    /**\n     * @param stateCount count of black/white/black/white/black pixels just read\n     * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n     *         used by finder patterns to be considered a match\n     */\n    FinderPatternFinder.foundPatternCross = function (stateCount) {\n        var totalModuleSize = 0;\n        for (var i = 0; i < 5; i++) {\n            var count = stateCount[i];\n            if (count === 0) {\n                return false;\n            }\n            totalModuleSize += count;\n        }\n        if (totalModuleSize < 7) {\n            return false;\n        }\n        var moduleSize = totalModuleSize / 7.0;\n        var maxVariance = moduleSize / 2.0;\n        // Allow less than 50% variance from 1-1-3-1-1 proportions\n        return Math.abs(moduleSize - stateCount[0]) < maxVariance &&\n            Math.abs(moduleSize - stateCount[1]) < maxVariance &&\n            Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance &&\n            Math.abs(moduleSize - stateCount[3]) < maxVariance &&\n            Math.abs(moduleSize - stateCount[4]) < maxVariance;\n    };\n    FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n        var crossCheckStateCount = this.crossCheckStateCount;\n        crossCheckStateCount[0] = 0;\n        crossCheckStateCount[1] = 0;\n        crossCheckStateCount[2] = 0;\n        crossCheckStateCount[3] = 0;\n        crossCheckStateCount[4] = 0;\n        return crossCheckStateCount;\n    };\n    /**\n     * After a vertical and horizontal scan finds a potential finder pattern, this method\n     * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n     * finder pattern to see if the same proportion is detected.\n     *\n     * @param startI row where a finder pattern was detected\n     * @param centerJ center of the section that appears to cross a finder pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     *  observed in any reading state, based on the results of the horizontal scan\n     * @param originalStateCountTotal The original state count total.\n     * @return true if proportions are withing expected limits\n     */\n    FinderPatternFinder.prototype.crossCheckDiagonal = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var stateCount = this.getCrossCheckStateCount();\n        // Start counting up, left from center finding black center mass\n        var i = 0;\n        var image = this.image;\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n            stateCount[2]++;\n            i++;\n        }\n        if (startI < i || centerJ < i) {\n            return false;\n        }\n        // Continue up, left finding white space\n        while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) &&\n            stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i++;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n            return false;\n        }\n        // Continue up, left finding black border\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) &&\n            stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i++;\n        }\n        if (stateCount[0] > maxCount) {\n            return false;\n        }\n        var maxI = image.getHeight();\n        var maxJ = image.getWidth();\n        // Now also count down, right from center\n        i = 1;\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n            stateCount[2]++;\n            i++;\n        }\n        // Ran off the edge?\n        if (startI + i >= maxI || centerJ + i >= maxJ) {\n            return false;\n        }\n        while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) &&\n            stateCount[3] < maxCount) {\n            stateCount[3]++;\n            i++;\n        }\n        if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n            return false;\n        }\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) &&\n            stateCount[4] < maxCount) {\n            stateCount[4]++;\n            i++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return false;\n        }\n        // If we found a finder-pattern-like section, but its size is more than 100% different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n        return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal &&\n            FinderPatternFinder.foundPatternCross(stateCount);\n    };\n    /**\n     * <p>After a horizontal scan finds a potential finder pattern, this method\n     * \"cross-checks\" by scanning down vertically through the center of the possible\n     * finder pattern to see if the same proportion is detected.</p>\n     *\n     * @param startI row where a finder pattern was detected\n     * @param centerJ center of the section that appears to cross a finder pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     * observed in any reading state, based on the results of the horizontal scan\n     * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n     */\n    FinderPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxI = image.getHeight();\n        var stateCount = this.getCrossCheckStateCount();\n        // Start counting up from center\n        var i = startI;\n        while (i >= 0 && image.get(centerJ, i)) {\n            stateCount[2]++;\n            i--;\n        }\n        if (i < 0) {\n            return NaN;\n        }\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i--;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (i < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        // Now also count down from center\n        i = startI + 1;\n        while (i < maxI && image.get(centerJ, i)) {\n            stateCount[2]++;\n            i++;\n        }\n        if (i === maxI) {\n            return NaN;\n        }\n        while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n            stateCount[3]++;\n            i++;\n        }\n        if (i === maxI || stateCount[3] >= maxCount) {\n            return NaN;\n        }\n        while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n            stateCount[4]++;\n            i++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return NaN;\n        }\n        // If we found a finder-pattern-like section, but its size is more than 40% different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n            return NaN;\n        }\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n    };\n    /**\n     * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n     * except it reads horizontally instead of vertically. This is used to cross-cross\n     * check a vertical cross check and locate the real center of the alignment pattern.</p>\n     */\n    FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxJ = image.getWidth();\n        var stateCount = this.getCrossCheckStateCount();\n        var j = startJ;\n        while (j >= 0 && image.get(j, centerI)) {\n            stateCount[2]++;\n            j--;\n        }\n        if (j < 0) {\n            return NaN;\n        }\n        while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            j--;\n        }\n        if (j < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            j--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        j = startJ + 1;\n        while (j < maxJ && image.get(j, centerI)) {\n            stateCount[2]++;\n            j++;\n        }\n        if (j === maxJ) {\n            return NaN;\n        }\n        while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n            stateCount[3]++;\n            j++;\n        }\n        if (j === maxJ || stateCount[3] >= maxCount) {\n            return NaN;\n        }\n        while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n            stateCount[4]++;\n            j++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return NaN;\n        }\n        // If we found a finder-pattern-like section, but its size is significantly different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n            return NaN;\n        }\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n    };\n    /**\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n     * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n     * with another horizontal scan. This is needed primarily to locate the real horizontal\n     * center of the pattern in cases of extreme skew.\n     * And then we cross-cross-cross check with another diagonal scan.</p>\n     *\n     * <p>If that succeeds the finder pattern location is added to a list that tracks\n     * the number of times each location has been nearly-matched as a finder pattern.\n     * Each additional find is more evidence that the location is in fact a finder\n     * pattern center\n     *\n     * @param stateCount reading state module counts from horizontal scan\n     * @param i row where finder pattern may be found\n     * @param j end of possible finder pattern in row\n     * @param pureBarcode true if in \"pure barcode\" mode\n     * @return true if a finder pattern candidate was found this time\n     */\n    FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/, pureBarcode) {\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n        var centerI = this.crossCheckVertical(i, /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal);\n        if (!isNaN(centerI)) {\n            // Re-cross check\n            centerJ = this.crossCheckHorizontal(/*(int) */ Math.floor(centerJ), /*(int) */ Math.floor(centerI), stateCount[2], stateCountTotal);\n            if (!isNaN(centerJ) &&\n                (!pureBarcode || this.crossCheckDiagonal(/*(int) */ Math.floor(centerI), /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n                var estimatedModuleSize = stateCountTotal / 7.0;\n                var found = false;\n                var possibleCenters = this.possibleCenters;\n                for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n                    var center = possibleCenters[index];\n                    // Look for about the same center and module size:\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                        possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n                    possibleCenters.push(point);\n                    if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                        this.resultPointCallback.foundPossibleResultPoint(point);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return number of rows we could safely skip during scanning, based on the first\n     *         two finder patterns that have been located. In some cases their position will\n     *         allow us to infer that the third pattern must lie below a certain point farther\n     *         down in the image.\n     */\n    FinderPatternFinder.prototype.findRowSkip = function () {\n        var e_1, _a;\n        var max = this.possibleCenters.length;\n        if (max <= 1) {\n            return 0;\n        }\n        var firstConfirmedCenter = null;\n        try {\n            for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var center = _c.value;\n                if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    if (firstConfirmedCenter == null) {\n                        firstConfirmedCenter = center;\n                    }\n                    else {\n                        // We have two confirmed centers\n                        // How far down can we skip before resuming looking for the next\n                        // pattern? In the worst case, only the difference between the\n                        // difference in the x / y coordinates of the two centers.\n                        // This is the case where you find top left last.\n                        this.hasSkipped = true;\n                        return /*(int) */ Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) -\n                            Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2);\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return 0;\n    };\n    /**\n     * @return true iff we have found at least 3 finder patterns that have been detected\n     *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n     *         candidates is \"pretty similar\"\n     */\n    FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n        var e_2, _a, e_3, _b;\n        var confirmedCount = 0;\n        var totalModuleSize = 0.0;\n        var max = this.possibleCenters.length;\n        try {\n            for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var pattern = _d.value;\n                if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    confirmedCount++;\n                    totalModuleSize += pattern.getEstimatedModuleSize();\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        if (confirmedCount < 3) {\n            return false;\n        }\n        // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n        // and that we need to keep looking. We detect this by asking if the estimated module sizes\n        // vary too much. We arbitrarily say that when the total deviation from average exceeds\n        // 5% of the total module size estimates, it's too much.\n        var average = totalModuleSize / max;\n        var totalDeviation = 0.0;\n        try {\n            for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n                var pattern = _f.value;\n                totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return totalDeviation <= 0.05 * totalModuleSize;\n    };\n    /**\n     * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n     *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n     *         size differs from the average among those patterns the least\n     * @throws NotFoundException if 3 such finder patterns do not exist\n     */\n    FinderPatternFinder.prototype.selectBestPatterns = function () {\n        var e_4, _a, e_5, _b;\n        var startSize = this.possibleCenters.length;\n        if (startSize < 3) {\n            // Couldn't find enough finder patterns\n            throw new NotFoundException_1.default();\n        }\n        var possibleCenters = this.possibleCenters;\n        var average;\n        // Filter outlier possibilities whose module size is too different\n        if (startSize > 3) {\n            // But we can only afford to do so if we have at least 4 possibilities to choose from\n            var totalModuleSize = 0.0;\n            var square = 0.0;\n            try {\n                for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var center = _d.value;\n                    var size = center.getEstimatedModuleSize();\n                    totalModuleSize += size;\n                    square += size * size;\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            average = totalModuleSize / startSize;\n            var stdDev = Math.sqrt(square / startSize - average * average);\n            possibleCenters.sort(\n            /**\n             * <p>Orders by furthest from average</p>\n             */\n            // FurthestFromAverageComparator implements Comparator<FinderPattern>\n            function (center1, center2) {\n                var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                return dA < dB ? -1 : dA > dB ? 1 : 0;\n            });\n            var limit = Math.max(0.2 * average, stdDev);\n            for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n                var pattern = possibleCenters[i];\n                if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n                    possibleCenters.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        if (possibleCenters.length > 3) {\n            // Throw away all but those first size candidate points we found.\n            var totalModuleSize = 0.0;\n            try {\n                for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n                    var possibleCenter = possibleCenters_1_1.value;\n                    totalModuleSize += possibleCenter.getEstimatedModuleSize();\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            average = totalModuleSize / possibleCenters.length;\n            possibleCenters.sort(\n            /**\n             * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n             */\n            // CenterComparator implements Comparator<FinderPattern>\n            function (center1, center2) {\n                if (center2.getCount() === center1.getCount()) {\n                    var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                    var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                    return dA < dB ? 1 : dA > dB ? -1 : 0;\n                }\n                else {\n                    return center2.getCount() - center1.getCount();\n                }\n            });\n            possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n        }\n        return [\n            possibleCenters[0],\n            possibleCenters[1],\n            possibleCenters[2]\n        ];\n    };\n    FinderPatternFinder.CENTER_QUORUM = 2;\n    FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n    FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n    return FinderPatternFinder;\n}());\nexports.default = FinderPatternFinder;\n//# sourceMappingURL=FinderPatternFinder.js.map"]},"metadata":{},"sourceType":"script"}