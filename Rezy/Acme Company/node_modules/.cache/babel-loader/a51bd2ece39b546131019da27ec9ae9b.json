{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVOTRADE\\\\Desktop\\\\Rezy barcode\\\\scanner\\\\scanner\\\\src\\\\scan\\\\Scan.js\",\n  _s = $RefreshSig$();\nimport \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3500'; // Change this to your server endpoint\n\nfunction Scan() {\n  _s();\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [open, setOpen] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n  const handleAccept = () => {\n    // Your logic here\n  };\n  const handleScanWebCam = result => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n\n      // Call the function to send the scanned data to the backend\n      sendScannedDataToBackend(resultText);\n    }\n  };\n  const getProduct = id => {\n    const foundElement = filteredData.find(item => item.Id === id);\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n  const sendScannedDataToBackend = data => {\n    // Define the data you want to send to the backend\n    const requestData = {\n      scannedData: data\n    };\n\n    // Make an HTTP POST request to your backend server\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    }).then(response => {\n      if (response.status === 200) {\n        // Request was successful\n        return response.json();\n      } else {\n        // Handle errors here\n        console.error('Error sending data to the backend');\n      }\n    }).then(responseData => {\n      // Handle the response from the backend if needed\n      console.log('Response from the backend:', responseData);\n    }).catch(error => {\n      // Handle any network errors here\n      console.error('Network error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Scan, \"OI9CgsItfgwQxM8he8WiQii1+lA=\", false, function () {\n  return [useNavigate];\n});\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["ButtonStyle","ModalStyle","React","useState","Grid","useNavigate","BarcodeScannerComponent","products","jsxDEV","_jsxDEV","URL","Scan","_s","initialData","data","setData","producto","setProducto","open","setOpen","filteredData","setFilteredData","navigate","handleAccept","handleScanWebCam","result","resultText","toString","getProduct","sendScannedDataToBackend","id","foundElement","find","item","Id","requestData","scannedData","fetch","method","headers","body","JSON","stringify","then","response","status","json","console","error","responseData","log","catch","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\n\nconst URL = 'http://localhost:3500'; // Change this to your server endpoint\n\nfunction Scan() {\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [open, setOpen] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n\n  const handleAccept = () => {\n    // Your logic here\n  };\n\n  const handleScanWebCam = (result) => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n\n      // Call the function to send the scanned data to the backend\n      sendScannedDataToBackend(resultText);\n    }\n  };\n\n  const getProduct = (id) => {\n    const foundElement = filteredData.find(item => item.Id === id);\n\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n\n  const sendScannedDataToBackend = (data) => {\n    // Define the data you want to send to the backend\n    const requestData = {\n      scannedData: data,\n    };\n\n    // Make an HTTP POST request to your backend server\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData),\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          // Request was successful\n          return response.json();\n        } else {\n          // Handle errors here\n          console.error('Error sending data to the backend');\n        }\n      })\n      .then((responseData) => {\n        // Handle the response from the backend if needed\n        console.log('Response from the backend:', responseData);\n      })\n      .catch((error) => {\n        // Handle any network errors here\n        console.error('Network error:', error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Your component JSX remains the same */}\n    </div>\n  );\n}\n\nexport default Scan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}