{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Java Formatter class polyfill that works in the JS way.\n */\nvar Formatter = /** @class */function () {\n  function Formatter() {\n    this.buffer = '';\n  }\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param str\n   * @param arr\n   */\n  Formatter.form = function (str, arr) {\n    var i = -1;\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (arr[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n      switch (p4) {\n        case 's':\n          val = arr[i];\n          break;\n        case 'c':\n          val = arr[i][0];\n          break;\n        case 'f':\n          val = parseFloat(arr[i]).toFixed(exp);\n          break;\n        case 'p':\n          val = parseFloat(arr[i]).toPrecision(exp);\n          break;\n        case 'e':\n          val = parseFloat(arr[i]).toExponential(exp);\n          break;\n        case 'x':\n          val = parseInt(arr[i]).toString(base ? base : 16);\n          break;\n        case 'd':\n          val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1); /* padding size */\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' '; /* isnull? */\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n      return val;\n    }\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return str.replace(regex, callback);\n  };\n  /**\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n  Formatter.prototype.format = function (append) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    this.buffer += Formatter.form(append, args);\n  };\n  /**\n   * Returns the Formatter string value.\n   */\n  Formatter.prototype.toString = function () {\n    return this.buffer;\n  };\n  return Formatter;\n}();\nexports.default = Formatter;","map":{"version":3,"sources":["../../../src/core/util/Formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Java Formatter class polyfill that works in the JS way.\n */\nvar Formatter = /** @class */ (function () {\n    function Formatter() {\n        this.buffer = '';\n    }\n    /**\n     *\n     * @see https://stackoverflow.com/a/13439711/4367683\n     *\n     * @param str\n     * @param arr\n     */\n    Formatter.form = function (str, arr) {\n        var i = -1;\n        function callback(exp, p0, p1, p2, p3, p4) {\n            if (exp === '%%')\n                return '%';\n            if (arr[++i] === undefined)\n                return undefined;\n            exp = p2 ? parseInt(p2.substr(1)) : undefined;\n            var base = p3 ? parseInt(p3.substr(1)) : undefined;\n            var val;\n            switch (p4) {\n                case 's':\n                    val = arr[i];\n                    break;\n                case 'c':\n                    val = arr[i][0];\n                    break;\n                case 'f':\n                    val = parseFloat(arr[i]).toFixed(exp);\n                    break;\n                case 'p':\n                    val = parseFloat(arr[i]).toPrecision(exp);\n                    break;\n                case 'e':\n                    val = parseFloat(arr[i]).toExponential(exp);\n                    break;\n                case 'x':\n                    val = parseInt(arr[i]).toString(base ? base : 16);\n                    break;\n                case 'd':\n                    val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                    break;\n            }\n            val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n            var size = parseInt(p1); /* padding size */\n            var ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n            while (val.length < size)\n                val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n            return val;\n        }\n        var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n        return str.replace(regex, callback);\n    };\n    /**\n     *\n     * @param append The new string to append.\n     * @param args Argumets values to be formated.\n     */\n    Formatter.prototype.format = function (append) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.buffer += Formatter.form(append, args);\n    };\n    /**\n     * Returns the Formatter string value.\n     */\n    Formatter.prototype.toString = function () {\n        return this.buffer;\n    };\n    return Formatter;\n}());\nexports.default = Formatter;\n//# sourceMappingURL=Formatter.js.map"]},"metadata":{},"sourceType":"script"}