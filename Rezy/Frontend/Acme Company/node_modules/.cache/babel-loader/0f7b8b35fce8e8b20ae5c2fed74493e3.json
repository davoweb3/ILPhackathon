{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package java.io;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"./Arrays\");\nvar OutputStream_1 = require(\"./OutputStream\");\nvar Integer_1 = require(\"./Integer\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar OutOfMemoryError_1 = require(\"../OutOfMemoryError\");\nvar System_1 = require(\"./System\");\nvar IndexOutOfBoundsException_1 = require(\"../IndexOutOfBoundsException\");\n/**\n * This class implements an output stream in which the data is\n * written into a byte array. The buffer automatically grows as data\n * is written to it.\n * The data can be retrieved using <code>toByteArray()</code> and\n * <code>toString()</code>.\n * <p>\n * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n * this class can be called after the stream has been closed without\n * generating an <tt>IOException</tt>.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n */\nvar ByteArrayOutputStream = /** @class */function (_super) {\n  __extends(ByteArrayOutputStream, _super);\n  /**\n   * Creates a new byte array output stream. The buffer capacity is\n   * initially 32 bytes, though its size increases if necessary.\n   */\n  // public constructor() {\n  //     this(32);\n  // }\n  /**\n   * Creates a new byte array output stream, with a buffer capacity of\n   * the specified size, in bytes.\n   *\n   * @param   size   the initial size.\n   * @exception  IllegalArgumentException if size is negative.\n   */\n  function ByteArrayOutputStream(size) {\n    if (size === void 0) {\n      size = 32;\n    }\n    var _this = _super.call(this) || this;\n    /**\n     * The number of valid bytes in the buffer.\n     */\n    _this.count = 0;\n    if (size < 0) {\n      throw new IllegalArgumentException_1.default('Negative initial size: ' + size);\n    }\n    _this.buf = new Uint8Array(size);\n    return _this;\n  }\n  /**\n   * Increases the capacity if necessary to ensure that it can hold\n   * at least the number of elements specified by the minimum\n   * capacity argument.\n   *\n   * @param minCapacity the desired minimum capacity\n   * @throws OutOfMemoryError if {@code minCapacity < 0}.  This is\n   * interpreted as a request for the unsatisfiably large capacity\n   * {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.\n   */\n  ByteArrayOutputStream.prototype.ensureCapacity = function (minCapacity) {\n    // overflow-conscious code\n    if (minCapacity - this.buf.length > 0) this.grow(minCapacity);\n  };\n  /**\n   * Increases the capacity to ensure that it can hold at least the\n   * number of elements specified by the minimum capacity argument.\n   *\n   * @param minCapacity the desired minimum capacity\n   */\n  ByteArrayOutputStream.prototype.grow = function (minCapacity) {\n    // overflow-conscious code\n    var oldCapacity = this.buf.length;\n    var newCapacity = oldCapacity << 1;\n    if (newCapacity - minCapacity < 0) newCapacity = minCapacity;\n    if (newCapacity < 0) {\n      if (minCapacity < 0)\n        // overflow\n        throw new OutOfMemoryError_1.default();\n      newCapacity = Integer_1.default.MAX_VALUE;\n    }\n    this.buf = Arrays_1.default.copyOfUint8Array(this.buf, newCapacity);\n  };\n  /**\n   * Writes the specified byte to this byte array output stream.\n   *\n   * @param   b   the byte to be written.\n   */\n  ByteArrayOutputStream.prototype.write = function (b) {\n    this.ensureCapacity(this.count + 1);\n    this.buf[this.count] = /*(byte)*/b;\n    this.count += 1;\n  };\n  /**\n   * Writes <code>len</code> bytes from the specified byte array\n   * starting at offset <code>off</code> to this byte array output stream.\n   *\n   * @param   b     the data.\n   * @param   off   the start offset in the data.\n   * @param   len   the number of bytes to write.\n   */\n  ByteArrayOutputStream.prototype.writeBytesOffset = function (b, off, len) {\n    if (off < 0 || off > b.length || len < 0 || off + len - b.length > 0) {\n      throw new IndexOutOfBoundsException_1.default();\n    }\n    this.ensureCapacity(this.count + len);\n    System_1.default.arraycopy(b, off, this.buf, this.count, len);\n    this.count += len;\n  };\n  /**\n   * Writes the complete contents of this byte array output stream to\n   * the specified output stream argument, as if by calling the output\n   * stream's write method using <code>out.write(buf, 0, count)</code>.\n   *\n   * @param      out   the output stream to which to write the data.\n   * @exception  IOException  if an I/O error occurs.\n   */\n  ByteArrayOutputStream.prototype.writeTo = function (out) {\n    out.writeBytesOffset(this.buf, 0, this.count);\n  };\n  /**\n   * Resets the <code>count</code> field of this byte array output\n   * stream to zero, so that all currently accumulated output in the\n   * output stream is discarded. The output stream can be used again,\n   * reusing the already allocated buffer space.\n   *\n   * @see     java.io.ByteArrayInputStream#count\n   */\n  ByteArrayOutputStream.prototype.reset = function () {\n    this.count = 0;\n  };\n  /**\n   * Creates a newly allocated byte array. Its size is the current\n   * size of this output stream and the valid contents of the buffer\n   * have been copied into it.\n   *\n   * @return  the current contents of this output stream, as a byte array.\n   * @see     java.io.ByteArrayOutputStream#size()\n   */\n  ByteArrayOutputStream.prototype.toByteArray = function () {\n    return Arrays_1.default.copyOfUint8Array(this.buf, this.count);\n  };\n  /**\n   * Returns the current size of the buffer.\n   *\n   * @return  the value of the <code>count</code> field, which is the number\n   *          of valid bytes in this output stream.\n   * @see     java.io.ByteArrayOutputStream#count\n   */\n  ByteArrayOutputStream.prototype.size = function () {\n    return this.count;\n  };\n  ByteArrayOutputStream.prototype.toString = function (param) {\n    if (!param) {\n      return this.toString_void();\n    }\n    if (typeof param === 'string') {\n      return this.toString_string(param);\n    }\n    return this.toString_number(param);\n  };\n  /**\n   * Converts the buffer's contents into a string decoding bytes using the\n   * platform's default character set. The length of the new <tt>String</tt>\n   * is a function of the character set, and hence may not be equal to the\n   * size of the buffer.\n   *\n   * <p> This method always replaces malformed-input and unmappable-character\n   * sequences with the default replacement string for the platform's\n   * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n   * class should be used when more control over the decoding process is\n   * required.\n   *\n   * @return String decoded from the buffer's contents.\n   * @since  JDK1.1\n   */\n  ByteArrayOutputStream.prototype.toString_void = function () {\n    return new String(this.buf /*, 0, this.count*/).toString();\n  };\n  /**\n   * Converts the buffer's contents into a string by decoding the bytes using\n   * the specified {@link java.nio.charset.Charset charsetName}. The length of\n   * the new <tt>String</tt> is a function of the charset, and hence may not be\n   * equal to the length of the byte array.\n   *\n   * <p> This method always replaces malformed-input and unmappable-character\n   * sequences with this charset's default replacement string. The {@link\n   * java.nio.charset.CharsetDecoder} class should be used when more control\n   * over the decoding process is required.\n   *\n   * @param  charsetName  the name of a supported\n   *              {@linkplain java.nio.charset.Charset </code>charset<code>}\n   * @return String decoded from the buffer's contents.\n   * @exception  UnsupportedEncodingException\n   *             If the named charset is not supported\n   * @since   JDK1.1\n   */\n  ByteArrayOutputStream.prototype.toString_string = function (charsetName) {\n    return new String(this.buf /*, 0, this.count, charsetName*/).toString();\n  };\n  /**\n   * Creates a newly allocated string. Its size is the current size of\n   * the output stream and the valid contents of the buffer have been\n   * copied into it. Each character <i>c</i> in the resulting string is\n   * constructed from the corresponding element <i>b</i> in the byte\n   * array such that:\n   * <blockquote><pre>\n   *     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n   * </pre></blockquote>\n   *\n   * @deprecated This method does not properly convert bytes into characters.\n   * As of JDK&nbsp;1.1, the preferred way to do this is via the\n   * <code>toString(String enc)</code> method, which takes an encoding-name\n   * argument, or the <code>toString()</code> method, which uses the\n   * platform's default character encoding.\n   *\n   * @param      hibyte    the high byte of each resulting Unicode character.\n   * @return     the current contents of the output stream, as a string.\n   * @see        java.io.ByteArrayOutputStream#size()\n   * @see        java.io.ByteArrayOutputStream#toString(String)\n   * @see        java.io.ByteArrayOutputStream#toString()\n   */\n  // @Deprecated\n  ByteArrayOutputStream.prototype.toString_number = function (hibyte) {\n    return new String(this.buf /*, hibyte, 0, this.count*/).toString();\n  };\n  /**\n   * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n   * this class can be called after the stream has been closed without\n   * generating an <tt>IOException</tt>.\n   * <p>\n   *\n   * @throws IOException\n   */\n  ByteArrayOutputStream.prototype.close = function () {};\n  return ByteArrayOutputStream;\n}(OutputStream_1.default);\nexports.default = ByteArrayOutputStream;","map":{"version":3,"names":["Arrays_1","require","OutputStream_1","Integer_1","IllegalArgumentException_1","OutOfMemoryError_1","System_1","IndexOutOfBoundsException_1","ByteArrayOutputStream","_super","__extends","size","_this","call","count","default","buf","Uint8Array","prototype","ensureCapacity","minCapacity","length","grow","oldCapacity","newCapacity","MAX_VALUE","copyOfUint8Array","write","b","writeBytesOffset","off","len","arraycopy","writeTo","out","reset","toByteArray","toString","param","toString_void","toString_string","toString_number","String","charsetName","hibyte","close"],"sources":["../../../src/core/util/ByteArrayOutputStream.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}