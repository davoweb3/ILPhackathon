{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.detector {*/\n/**\n * General math-related and numeric utility functions.\n */\nvar MathUtils = /** @class */function () {\n  function MathUtils() {}\n  MathUtils.prototype.MathUtils = function () {};\n  /**\n   * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n   * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n   * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n   * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n   *\n   * @param d real value to round\n   * @return nearest {@code int}\n   */\n  MathUtils.round = function (d /*float*/) {\n    if (NaN === d) return 0;\n    if (d <= Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER;\n    if (d >= Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\n    return (/*(int) */d + (d < 0.0 ? -0.5 : 0.5) | 0\n    );\n  };\n  // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n  MathUtils.distance = function (aX /*float|int*/, aY /*float|int*/, bX /*float|int*/, bY /*float|int*/) {\n    var xDiff = aX - bX;\n    var yDiff = aY - bY;\n    return (/*(float) */Math.sqrt(xDiff * xDiff + yDiff * yDiff)\n    );\n  };\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n  // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n  //   const xDiff = aX - bX\n  //   const yDiff = aY - bY\n  //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  // }\n  /**\n   * @param array values to sum\n   * @return sum of values in array\n   */\n  MathUtils.sum = function (array) {\n    var count = 0;\n    for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n      var a = array[i];\n      count += a;\n    }\n    return count;\n  };\n  return MathUtils;\n}();\nexports.default = MathUtils;","map":{"version":3,"sources":["../../../../src/core/common/detector/MathUtils.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;AAEH;AAEA;;AAEG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAAA,SAAA,SAAA,CAAA,EAAA,CA6DA;EA3DY,SAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,YAAA,CACA,CAAC;EAED;;;;;;;;AAQG;EACW,SAAA,CAAA,KAAK,GAAnB,UAAoB,CAAS,CAAA,WAAS;IAClC,IAAI,GAAG,KAAK,CAAC,EAAE,OAAO,CAAC;IACvB,IAAI,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE,OAAO,MAAM,CAAC,gBAAgB;IAChE,IAAI,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE,OAAO,MAAM,CAAC,gBAAgB;IAChE,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAI;IAAC;EACrD,CAAC;EACD;EAEA;;;;;;AAMG;EACW,SAAA,CAAA,QAAQ,GAAtB,UAAuB,EAAU,CAAA,eAAe,EAAU,CAAA,eAAe,EAAU,CAAA,eAAe,EAAU,CAAA,eAAa;IACrH,IAAM,KAAK,GAAG,EAAE,GAAG,EAAE;IACrB,IAAM,KAAK,GAAG,EAAE,GAAG,EAAE;IACrB,OAAO,aAAY,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;IAAC;EAC/D,CAAC;EAED;;;;;;AAMG;EACH;EACA;EACA;EACA;EACA;EAEA;;;AAGG;EACW,SAAA,CAAA,GAAG,GAAjB,UAAkB,KAAiB,EAAA;IAC/B,IAAI,KAAK,GAAG,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,QAAM,EAAE,CAAC,EAAE,EAAE;MACtD,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;MAClB,KAAK,IAAI,CAAC;IACb;IACD,OAAO,KAAK;EAChB,CAAC;EAEL,OAAA,SAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.detector {*/\n/**\n * General math-related and numeric utility functions.\n */\nvar MathUtils = /** @class */ (function () {\n    function MathUtils() {\n    }\n    MathUtils.prototype.MathUtils = function () {\n    };\n    /**\n     * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n     * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n     * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n     * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n     *\n     * @param d real value to round\n     * @return nearest {@code int}\n     */\n    MathUtils.round = function (d /*float*/) {\n        if (NaN === d)\n            return 0;\n        if (d <= Number.MIN_SAFE_INTEGER)\n            return Number.MIN_SAFE_INTEGER;\n        if (d >= Number.MAX_SAFE_INTEGER)\n            return Number.MAX_SAFE_INTEGER;\n        return /*(int) */ (d + (d < 0.0 ? -0.5 : 0.5)) | 0;\n    };\n    // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    MathUtils.distance = function (aX /*float|int*/, aY /*float|int*/, bX /*float|int*/, bY /*float|int*/) {\n        var xDiff = aX - bX;\n        var yDiff = aY - bY;\n        return /*(float) */ Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    };\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n    //   const xDiff = aX - bX\n    //   const yDiff = aY - bY\n    //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    // }\n    /**\n     * @param array values to sum\n     * @return sum of values in array\n     */\n    MathUtils.sum = function (array) {\n        var count = 0;\n        for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n            var a = array[i];\n            count += a;\n        }\n        return count;\n    };\n    return MathUtils;\n}());\nexports.default = MathUtils;\n//# sourceMappingURL=MathUtils.js.map"]},"metadata":{},"sourceType":"script"}