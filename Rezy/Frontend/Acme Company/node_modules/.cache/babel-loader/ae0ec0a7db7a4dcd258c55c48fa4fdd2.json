{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\nvar MathUtils_1 = require(\"./common/detector/MathUtils\");\nvar Float_1 = require(\"./util/Float\");\n/**\n * <p>Encapsulates a point of interest in an image containing a barcode. Typically, this\n * would be the location of a finder pattern or the corner of the barcode, for example.</p>\n *\n * @author Sean Owen\n */\nvar ResultPoint = /** @class */function () {\n  function ResultPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  ResultPoint.prototype.getX = function () {\n    return this.x;\n  };\n  ResultPoint.prototype.getY = function () {\n    return this.y;\n  };\n  /*@Override*/\n  ResultPoint.prototype.equals = function (other) {\n    if (other instanceof ResultPoint) {\n      var otherPoint = other;\n      return this.x === otherPoint.x && this.y === otherPoint.y;\n    }\n    return false;\n  };\n  /*@Override*/\n  ResultPoint.prototype.hashCode = function () {\n    return 31 * Float_1.default.floatToIntBits(this.x) + Float_1.default.floatToIntBits(this.y);\n  };\n  /*@Override*/\n  ResultPoint.prototype.toString = function () {\n    return '(' + this.x + ',' + this.y + ')';\n  };\n  /**\n   * Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC\n   * and BC is less than AC, and the angle between BC and BA is less than 180 degrees.\n   *\n   * @param patterns array of three {@code ResultPoint} to order\n   */\n  ResultPoint.orderBestPatterns = function (patterns) {\n    // Find distances between pattern centers\n    var zeroOneDistance = this.distance(patterns[0], patterns[1]);\n    var oneTwoDistance = this.distance(patterns[1], patterns[2]);\n    var zeroTwoDistance = this.distance(patterns[0], patterns[2]);\n    var pointA;\n    var pointB;\n    var pointC;\n    // Assume one closest to other two is B; A and C will just be guesses at first\n    if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {\n      pointB = patterns[0];\n      pointA = patterns[1];\n      pointC = patterns[2];\n    } else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {\n      pointB = patterns[1];\n      pointA = patterns[0];\n      pointC = patterns[2];\n    } else {\n      pointB = patterns[2];\n      pointA = patterns[0];\n      pointC = patterns[1];\n    }\n    // Use cross product to figure out whether A and C are correct or flipped.\n    // This asks whether BC x BA has a positive z component, which is the arrangement\n    // we want for A, B, C. If it's negative, then we've got it flipped around and\n    // should swap A and C.\n    if (this.crossProductZ(pointA, pointB, pointC) < 0.0) {\n      var temp = pointA;\n      pointA = pointC;\n      pointC = temp;\n    }\n    patterns[0] = pointA;\n    patterns[1] = pointB;\n    patterns[2] = pointC;\n  };\n  /**\n   * @param pattern1 first pattern\n   * @param pattern2 second pattern\n   * @return distance between two points\n   */\n  ResultPoint.distance = function (pattern1, pattern2) {\n    return MathUtils_1.default.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);\n  };\n  /**\n   * Returns the z component of the cross product between vectors BC and BA.\n   */\n  ResultPoint.crossProductZ = function (pointA, pointB, pointC) {\n    var bX = pointB.x;\n    var bY = pointB.y;\n    return (pointC.x - bX) * (pointA.y - bY) - (pointC.y - bY) * (pointA.x - bX);\n  };\n  return ResultPoint;\n}();\nexports.default = ResultPoint;","map":{"version":3,"names":["MathUtils_1","require","Float_1","ResultPoint","x","y","prototype","getX","getY","equals","other","otherPoint","hashCode","default","floatToIntBits","toString","orderBestPatterns","patterns","zeroOneDistance","distance","oneTwoDistance","zeroTwoDistance","pointA","pointB","pointC","crossProductZ","temp","pattern1","pattern2","bX","bY"],"sources":["../../src/core/ResultPoint.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAGA;;;;;;AAMA,IAAAE,WAAA;EAEI,SAAAA,YAA2BC,CAAQ,EAAUC,CAAQ;IAA1B,KAAAD,CAAC,GAADA,CAAC;IAAiB,KAAAC,CAAC,GAADA,CAAC;EAAW;EAElDF,WAAA,CAAAG,SAAA,CAAAC,IAAI,GAAX;IACI,OAAO,IAAI,CAACH,CAAC;EACjB,CAAC;EAEMD,WAAA,CAAAG,SAAA,CAAAE,IAAI,GAAX;IACI,OAAO,IAAI,CAACH,CAAC;EACjB,CAAC;EAED;EACOF,WAAA,CAAAG,SAAA,CAAAG,MAAM,GAAb,UAAcC,KAAa;IACvB,IAAIA,KAAK,YAAYP,WAAW,EAAE;MAC9B,IAAMQ,UAAU,GAAgBD,KAAK;MACrC,OAAO,IAAI,CAACN,CAAC,KAAKO,UAAU,CAACP,CAAC,IAAI,IAAI,CAACC,CAAC,KAAKM,UAAU,CAACN,CAAC;;IAE7D,OAAO,KAAK;EAChB,CAAC;EAED;EACOF,WAAA,CAAAG,SAAA,CAAAM,QAAQ,GAAf;IACI,OAAO,EAAE,GAAGV,OAAA,CAAAW,OAAK,CAACC,cAAc,CAAC,IAAI,CAACV,CAAC,CAAC,GAAGF,OAAA,CAAAW,OAAK,CAACC,cAAc,CAAC,IAAI,CAACT,CAAC,CAAC;EAC3E,CAAC;EAED;EACOF,WAAA,CAAAG,SAAA,CAAAS,QAAQ,GAAf;IACI,OAAO,GAAG,GAAG,IAAI,CAACX,CAAC,GAAG,GAAG,GAAG,IAAI,CAACC,CAAC,GAAG,GAAG;EAC5C,CAAC;EAED;;;;;;EAMcF,WAAA,CAAAa,iBAAiB,GAA/B,UAAgCC,QAA4B;IAExD;IACA,IAAMC,eAAe,GAAG,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/D,IAAMG,cAAc,GAAG,IAAI,CAACD,QAAQ,CAACF,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAMI,eAAe,GAAG,IAAI,CAACF,QAAQ,CAACF,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE/D,IAAIK,MAAmB;IACvB,IAAIC,MAAmB;IACvB,IAAIC,MAAmB;IACvB;IACA,IAAIJ,cAAc,IAAIF,eAAe,IAAIE,cAAc,IAAIC,eAAe,EAAE;MACxEE,MAAM,GAAGN,QAAQ,CAAC,CAAC,CAAC;MACpBK,MAAM,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACpBO,MAAM,GAAGP,QAAQ,CAAC,CAAC,CAAC;KACvB,MAAM,IAAII,eAAe,IAAID,cAAc,IAAIC,eAAe,IAAIH,eAAe,EAAE;MAChFK,MAAM,GAAGN,QAAQ,CAAC,CAAC,CAAC;MACpBK,MAAM,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACpBO,MAAM,GAAGP,QAAQ,CAAC,CAAC,CAAC;KACvB,MAAM;MACHM,MAAM,GAAGN,QAAQ,CAAC,CAAC,CAAC;MACpBK,MAAM,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACpBO,MAAM,GAAGP,QAAQ,CAAC,CAAC,CAAC;;IAGxB;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACQ,aAAa,CAACH,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,GAAG,GAAG,EAAE;MAClD,IAAME,IAAI,GAAGJ,MAAM;MACnBA,MAAM,GAAGE,MAAM;MACfA,MAAM,GAAGE,IAAI;;IAGjBT,QAAQ,CAAC,CAAC,CAAC,GAAGK,MAAM;IACpBL,QAAQ,CAAC,CAAC,CAAC,GAAGM,MAAM;IACpBN,QAAQ,CAAC,CAAC,CAAC,GAAGO,MAAM;EACxB,CAAC;EAED;;;;;EAKcrB,WAAA,CAAAgB,QAAQ,GAAtB,UAAuBQ,QAAqB,EAAEC,QAAqB;IAC/D,OAAO5B,WAAA,CAAAa,OAAS,CAACM,QAAQ,CAACQ,QAAQ,CAACvB,CAAC,EAAEuB,QAAQ,CAACtB,CAAC,EAAEuB,QAAQ,CAACxB,CAAC,EAAEwB,QAAQ,CAACvB,CAAC,CAAC;EAC7E,CAAC;EAED;;;EAGeF,WAAA,CAAAsB,aAAa,GAA5B,UAA6BH,MAAmB,EAC5CC,MAAmB,EACnBC,MAAmB;IACnB,IAAMK,EAAE,GAAGN,MAAM,CAACnB,CAAC;IACnB,IAAM0B,EAAE,GAAGP,MAAM,CAAClB,CAAC;IACnB,OAAQ,CAACmB,MAAM,CAACpB,CAAC,GAAGyB,EAAE,KAAKP,MAAM,CAACjB,CAAC,GAAGyB,EAAE,CAAC,GAAK,CAACN,MAAM,CAACnB,CAAC,GAAGyB,EAAE,KAAKR,MAAM,CAAClB,CAAC,GAAGyB,EAAE,CAAE;EACpF,CAAC;EAEL,OAAA1B,WAAC;AAAD,CAAC,EAjGD"},"metadata":{},"sourceType":"script"}