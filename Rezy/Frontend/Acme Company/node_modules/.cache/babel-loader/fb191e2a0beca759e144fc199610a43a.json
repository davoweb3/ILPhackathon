{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar System_1 = require(\"./util/System\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\nvar RGBLuminanceSource = /** @class */function (_super) {\n  __extends(RGBLuminanceSource, _super);\n  function RGBLuminanceSource(luminances, width /*int*/, height /*int*/, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/) {\n    var _this = _super.call(this, width, height) || this;\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n    if (luminances.BYTES_PER_ELEMENT === 4) {\n      // Int32Array\n      var size = width * height;\n      var luminancesUint8Array = new Uint8ClampedArray(size);\n      for (var offset = 0; offset < size; offset++) {\n        var pixel = luminances[offset];\n        var r = pixel >> 16 & 0xff; // red\n        var g2 = pixel >> 7 & 0x1fe; // 2 * green\n        var b = pixel & 0xff; // blue\n        // Calculate green-favouring average cheaply\n        luminancesUint8Array[offset] = /*(byte) */(r + g2 + b) / 4 & 0xFF;\n      }\n      _this.luminances = luminancesUint8Array;\n    } else {\n      _this.luminances = luminances;\n    }\n    if (undefined === dataWidth) {\n      _this.dataWidth = width;\n    }\n    if (undefined === dataHeight) {\n      _this.dataHeight = height;\n    }\n    if (undefined === left) {\n      _this.left = 0;\n    }\n    if (undefined === top) {\n      _this.top = 0;\n    }\n    if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n      throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n    }\n    return _this;\n  }\n  /*@Override*/\n  RGBLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n    var width = this.getWidth();\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.luminances;\n    }\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left;\n    // If the width matches the full width of the underlying data, perform a single copy.\n    if (width === this.dataWidth) {\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n      return matrix;\n    }\n    // Otherwise copy one cropped row at a time.\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n    return matrix;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n  };\n  RGBLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n  return RGBLuminanceSource;\n}(LuminanceSource_1.default);\nexports.default = RGBLuminanceSource;","map":{"version":3,"names":["require","InvertedLuminanceSource_1","LuminanceSource_1","System_1","IllegalArgumentException_1","RGBLuminanceSource","_super","__extends","luminances","width","height","dataWidth","dataHeight","left","top","_this","call","BYTES_PER_ELEMENT","size","luminancesUint8Array","Uint8ClampedArray","offset","pixel","r","g2","b","undefined","default","prototype","getRow","y","row","getHeight","getWidth","length","arraycopy","getMatrix","area","matrix","inputOffset","outputOffset","isCropSupported","crop","invert"],"sources":["../../src/core/RGBLuminanceSource.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}