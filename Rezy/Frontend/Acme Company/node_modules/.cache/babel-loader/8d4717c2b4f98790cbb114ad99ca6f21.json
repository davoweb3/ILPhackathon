{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar EncodeHintType_1 = require(\"../EncodeHintType\");\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\nvar ErrorCorrectionLevel_1 = require(\"./decoder/ErrorCorrectionLevel\");\nvar Encoder_1 = require(\"./encoder/Encoder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../IllegalStateException\");\n/*import java.util.Map;*/\n/**\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar QRCodeWriter = /** @class */function () {\n  function QRCodeWriter() {}\n  /*@Override*/\n  // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n  //     /*throws WriterException */ {\n  //   return encode(contents, format, width, height, null)\n  // }\n  /*@Override*/\n  QRCodeWriter.prototype.encode = function (contents, format, width /*int*/, height /*int*/, hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    }\n    if (format !== BarcodeFormat_1.default.QR_CODE) {\n      throw new IllegalArgumentException_1.default('Can only encode QR_CODE, but got ' + format);\n    }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default(\"Requested dimensions are too small: \" + width + \"x\" + height);\n    }\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return QRCodeWriter.renderResult(code, width, height, quietZone);\n  };\n  // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n  // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n  QRCodeWriter.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var output = new BitMatrix_1.default(outputWidth, outputHeight);\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          output.setRegion(outputX, outputY, multiple, multiple);\n        }\n      }\n    }\n    return output;\n  };\n  QRCodeWriter.QUIET_ZONE_SIZE = 4;\n  return QRCodeWriter;\n}();\nexports.default = QRCodeWriter;","map":{"version":3,"names":["BarcodeFormat_1","require","EncodeHintType_1","BitMatrix_1","ErrorCorrectionLevel_1","Encoder_1","IllegalArgumentException_1","IllegalStateException_1","QRCodeWriter","prototype","encode","contents","format","width","height","hints","length","default","QR_CODE","errorCorrectionLevel","L","quietZone","QUIET_ZONE_SIZE","undefined","get","ERROR_CORRECTION","fromString","toString","MARGIN","Number","parseInt","code","renderResult","input","getMatrix","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","output","inputY","outputY","inputX","outputX","setRegion"],"sources":["../../../src/core/qrcode/QRCodeWriter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}