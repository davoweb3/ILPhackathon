{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar GenericGF = /** @class */function (_super) {\n  __extends(GenericGF, _super);\n  /**\n   * Create a representation of GF(size) using the given primitive polynomial.\n   *\n   * @param primitive irreducible polynomial whose coefficients are represented by\n   *  the bits of an int, where the least-significant bit represents the constant\n   *  coefficient\n   * @param size the size of the field\n   * @param b the factor b in the generator polynomial can be 0- or 1-based\n   *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n   *  In most cases it should be 1, but for QR code it is 0.\n   */\n  function GenericGF(primitive /*int*/, size /*int*/, generatorBase /*int*/) {\n    var _this = _super.call(this) || this;\n    _this.primitive = primitive;\n    _this.size = size;\n    _this.generatorBase = generatorBase;\n    var expTable = new Int32Array(size);\n    var x = 1;\n    for (var i = 0; i < size; i++) {\n      expTable[i] = x;\n      x *= 2; // we're assuming the generator alpha is 2\n      if (x >= size) {\n        x ^= primitive;\n        x &= size - 1;\n      }\n    }\n    _this.expTable = expTable;\n    var logTable = new Int32Array(size);\n    for (var i = 0; i < size - 1; i++) {\n      logTable[expTable[i]] = i;\n    }\n    _this.logTable = logTable;\n    // logTable[0] == 0 but this should never be used\n    _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n    _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n    return _this;\n  }\n  GenericGF.prototype.getZero = function () {\n    return this.zero;\n  };\n  GenericGF.prototype.getOne = function () {\n    return this.one;\n  };\n  /**\n   * @return the monomial representing coefficient * x^degree\n   */\n  GenericGF.prototype.buildMonomial = function (degree /*int*/, coefficient /*int*/) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    if (coefficient === 0) {\n      return this.zero;\n    }\n    var coefficients = new Int32Array(degree + 1);\n    coefficients[0] = coefficient;\n    return new GenericGFPoly_1.default(this, coefficients);\n  };\n  /**\n   * @return multiplicative inverse of a\n   */\n  GenericGF.prototype.inverse = function (a /*int*/) {\n    if (a === 0) {\n      throw new ArithmeticException_1.default();\n    }\n    return this.expTable[this.size - this.logTable[a] - 1];\n  };\n  /**\n   * @return product of a and b in GF(size)\n   */\n  GenericGF.prototype.multiply = function (a /*int*/, b /*int*/) {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n  };\n  GenericGF.prototype.getSize = function () {\n    return this.size;\n  };\n  GenericGF.prototype.getGeneratorBase = function () {\n    return this.generatorBase;\n  };\n  /*@Override*/\n  GenericGF.prototype.toString = function () {\n    return 'GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')';\n  };\n  GenericGF.prototype.equals = function (o) {\n    return o === this;\n  };\n  GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n  GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n  GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n  GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n  GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n  GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n  GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n  GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n  return GenericGF;\n}(AbstractGenericGF_1.default);\nexports.default = GenericGF;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/GenericGF.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar GenericGF = /** @class */ (function (_super) {\n    __extends(GenericGF, _super);\n    /**\n     * Create a representation of GF(size) using the given primitive polynomial.\n     *\n     * @param primitive irreducible polynomial whose coefficients are represented by\n     *  the bits of an int, where the least-significant bit represents the constant\n     *  coefficient\n     * @param size the size of the field\n     * @param b the factor b in the generator polynomial can be 0- or 1-based\n     *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n     *  In most cases it should be 1, but for QR code it is 0.\n     */\n    function GenericGF(primitive /*int*/, size /*int*/, generatorBase /*int*/) {\n        var _this = _super.call(this) || this;\n        _this.primitive = primitive;\n        _this.size = size;\n        _this.generatorBase = generatorBase;\n        var expTable = new Int32Array(size);\n        var x = 1;\n        for (var i = 0; i < size; i++) {\n            expTable[i] = x;\n            x *= 2; // we're assuming the generator alpha is 2\n            if (x >= size) {\n                x ^= primitive;\n                x &= size - 1;\n            }\n        }\n        _this.expTable = expTable;\n        var logTable = new Int32Array(size);\n        for (var i = 0; i < size - 1; i++) {\n            logTable[expTable[i]] = i;\n        }\n        _this.logTable = logTable;\n        // logTable[0] == 0 but this should never be used\n        _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n        _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n        return _this;\n    }\n    GenericGF.prototype.getZero = function () {\n        return this.zero;\n    };\n    GenericGF.prototype.getOne = function () {\n        return this.one;\n    };\n    /**\n     * @return the monomial representing coefficient * x^degree\n     */\n    GenericGF.prototype.buildMonomial = function (degree /*int*/, coefficient /*int*/) {\n        if (degree < 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        var coefficients = new Int32Array(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly_1.default(this, coefficients);\n    };\n    /**\n     * @return multiplicative inverse of a\n     */\n    GenericGF.prototype.inverse = function (a /*int*/) {\n        if (a === 0) {\n            throw new ArithmeticException_1.default();\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    };\n    /**\n     * @return product of a and b in GF(size)\n     */\n    GenericGF.prototype.multiply = function (a /*int*/, b /*int*/) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    };\n    GenericGF.prototype.getSize = function () {\n        return this.size;\n    };\n    GenericGF.prototype.getGeneratorBase = function () {\n        return this.generatorBase;\n    };\n    /*@Override*/\n    GenericGF.prototype.toString = function () {\n        return ('GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')');\n    };\n    GenericGF.prototype.equals = function (o) {\n        return o === this;\n    };\n    GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n    GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n    GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n    GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n    GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n    GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n    GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n    return GenericGF;\n}(AbstractGenericGF_1.default));\nexports.default = GenericGF;\n//# sourceMappingURL=GenericGF.js.map"]},"metadata":{},"sourceType":"script"}