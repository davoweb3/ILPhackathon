{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar GenericGF = /** @class */function (_super) {\n  __extends(GenericGF, _super);\n  /**\n   * Create a representation of GF(size) using the given primitive polynomial.\n   *\n   * @param primitive irreducible polynomial whose coefficients are represented by\n   *  the bits of an int, where the least-significant bit represents the constant\n   *  coefficient\n   * @param size the size of the field\n   * @param b the factor b in the generator polynomial can be 0- or 1-based\n   *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n   *  In most cases it should be 1, but for QR code it is 0.\n   */\n  function GenericGF(primitive /*int*/, size /*int*/, generatorBase /*int*/) {\n    var _this = _super.call(this) || this;\n    _this.primitive = primitive;\n    _this.size = size;\n    _this.generatorBase = generatorBase;\n    var expTable = new Int32Array(size);\n    var x = 1;\n    for (var i = 0; i < size; i++) {\n      expTable[i] = x;\n      x *= 2; // we're assuming the generator alpha is 2\n      if (x >= size) {\n        x ^= primitive;\n        x &= size - 1;\n      }\n    }\n    _this.expTable = expTable;\n    var logTable = new Int32Array(size);\n    for (var i = 0; i < size - 1; i++) {\n      logTable[expTable[i]] = i;\n    }\n    _this.logTable = logTable;\n    // logTable[0] == 0 but this should never be used\n    _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n    _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n    return _this;\n  }\n  GenericGF.prototype.getZero = function () {\n    return this.zero;\n  };\n  GenericGF.prototype.getOne = function () {\n    return this.one;\n  };\n  /**\n   * @return the monomial representing coefficient * x^degree\n   */\n  GenericGF.prototype.buildMonomial = function (degree /*int*/, coefficient /*int*/) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    if (coefficient === 0) {\n      return this.zero;\n    }\n    var coefficients = new Int32Array(degree + 1);\n    coefficients[0] = coefficient;\n    return new GenericGFPoly_1.default(this, coefficients);\n  };\n  /**\n   * @return multiplicative inverse of a\n   */\n  GenericGF.prototype.inverse = function (a /*int*/) {\n    if (a === 0) {\n      throw new ArithmeticException_1.default();\n    }\n    return this.expTable[this.size - this.logTable[a] - 1];\n  };\n  /**\n   * @return product of a and b in GF(size)\n   */\n  GenericGF.prototype.multiply = function (a /*int*/, b /*int*/) {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n  };\n  GenericGF.prototype.getSize = function () {\n    return this.size;\n  };\n  GenericGF.prototype.getGeneratorBase = function () {\n    return this.generatorBase;\n  };\n  /*@Override*/\n  GenericGF.prototype.toString = function () {\n    return 'GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')';\n  };\n  GenericGF.prototype.equals = function (o) {\n    return o === this;\n  };\n  GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n  GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n  GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n  GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n  GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n  GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n  GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n  GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n  return GenericGF;\n}(AbstractGenericGF_1.default);\nexports.default = GenericGF;","map":{"version":3,"names":["GenericGFPoly_1","require","AbstractGenericGF_1","Integer_1","IllegalArgumentException_1","ArithmeticException_1","GenericGF","_super","__extends","primitive","size","generatorBase","_this","call","expTable","Int32Array","x","i","logTable","zero","default","from","one","prototype","getZero","getOne","buildMonomial","degree","coefficient","coefficients","inverse","a","multiply","b","getSize","getGeneratorBase","toString","toHexString","equals","o","AZTEC_DATA_12","AZTEC_DATA_10","AZTEC_DATA_6","AZTEC_PARAM","QR_CODE_FIELD_256","DATA_MATRIX_FIELD_256","AZTEC_DATA_8","MAXICODE_FIELD_64"],"sources":["../../../../src/core/common/reedsolomon/GenericGF.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}