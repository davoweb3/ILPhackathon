{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar __1 = require(\"../../..\");\nvar Integer_1 = require(\"../../util/Integer\");\n// import java.util.Arrays;\nvar Table;\n(function (Table) {\n  Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n  Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n  Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n  Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n  Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n  Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n})(Table || (Table = {}));\n/**\n * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n * the Aztec Code from an image.</p>\n *\n * @author David Olivier\n */\nvar Decoder = /** @class */function () {\n  function Decoder() {}\n  Decoder.prototype.decode = function (detectorResult) {\n    this.ddata = detectorResult;\n    var matrix = detectorResult.getBits();\n    var rawbits = this.extractBits(matrix);\n    var correctedBits = this.correctBits(rawbits);\n    var rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n    var result = Decoder.getEncodedData(correctedBits);\n    var decoderResult = new DecoderResult_1.default(rawBytes, result, null, null);\n    decoderResult.setNumBits(correctedBits.length);\n    return decoderResult;\n  };\n  // This method is used for testing the high-level encoder\n  Decoder.highLevelDecode = function (correctedBits) {\n    return this.getEncodedData(correctedBits);\n  };\n  /**\n   * Gets the string encoded in the aztec code bits\n   *\n   * @return the decoded string\n   */\n  Decoder.getEncodedData = function (correctedBits) {\n    var endIndex = correctedBits.length;\n    var latchTable = Table.UPPER; // table most recently latched to\n    var shiftTable = Table.UPPER; // table to use for the next read\n    var result = '';\n    var index = 0;\n    while (index < endIndex) {\n      if (shiftTable === Table.BINARY) {\n        if (endIndex - index < 5) {\n          break;\n        }\n        var length_1 = Decoder.readCode(correctedBits, index, 5);\n        index += 5;\n        if (length_1 === 0) {\n          if (endIndex - index < 11) {\n            break;\n          }\n          length_1 = Decoder.readCode(correctedBits, index, 11) + 31;\n          index += 11;\n        }\n        for (var charCount = 0; charCount < length_1; charCount++) {\n          if (endIndex - index < 8) {\n            index = endIndex; // Force outer loop to exit\n            break;\n          }\n          var code = Decoder.readCode(correctedBits, index, 8);\n          result += /*(char)*/__1.StringUtils.castAsNonUtf8Char(code);\n          index += 8;\n        }\n        // Go back to whatever mode we had been in\n        shiftTable = latchTable;\n      } else {\n        var size = shiftTable === Table.DIGIT ? 4 : 5;\n        if (endIndex - index < size) {\n          break;\n        }\n        var code = Decoder.readCode(correctedBits, index, size);\n        index += size;\n        var str = Decoder.getCharacter(shiftTable, code);\n        if (str.startsWith('CTRL_')) {\n          // Table changes\n          // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n          // That's including when that mode is a shift.\n          // Our test case dlusbs.png for issue #642 exercises that.\n          latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n          shiftTable = Decoder.getTable(str.charAt(5));\n          if (str.charAt(6) === 'L') {\n            latchTable = shiftTable;\n          }\n        } else {\n          result += str;\n          // Go back to whatever mode we had been in\n          shiftTable = latchTable;\n        }\n      }\n    }\n    return result;\n  };\n  /**\n   * gets the table corresponding to the char passed\n   */\n  Decoder.getTable = function (t) {\n    switch (t) {\n      case 'L':\n        return Table.LOWER;\n      case 'P':\n        return Table.PUNCT;\n      case 'M':\n        return Table.MIXED;\n      case 'D':\n        return Table.DIGIT;\n      case 'B':\n        return Table.BINARY;\n      case 'U':\n      default:\n        return Table.UPPER;\n    }\n  };\n  /**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */\n  Decoder.getCharacter = function (table, code) {\n    switch (table) {\n      case Table.UPPER:\n        return Decoder.UPPER_TABLE[code];\n      case Table.LOWER:\n        return Decoder.LOWER_TABLE[code];\n      case Table.MIXED:\n        return Decoder.MIXED_TABLE[code];\n      case Table.PUNCT:\n        return Decoder.PUNCT_TABLE[code];\n      case Table.DIGIT:\n        return Decoder.DIGIT_TABLE[code];\n      default:\n        // Should not reach here.\n        throw new IllegalStateException_1.default('Bad table');\n    }\n  };\n  /**\n   * <p>Performs RS error correction on an array of bits.</p>\n   *\n   * @return the corrected array\n   * @throws FormatException if the input contains too many errors\n   */\n  Decoder.prototype.correctBits = function (rawbits) {\n    var gf;\n    var codewordSize;\n    if (this.ddata.getNbLayers() <= 2) {\n      codewordSize = 6;\n      gf = GenericGF_1.default.AZTEC_DATA_6;\n    } else if (this.ddata.getNbLayers() <= 8) {\n      codewordSize = 8;\n      gf = GenericGF_1.default.AZTEC_DATA_8;\n    } else if (this.ddata.getNbLayers() <= 22) {\n      codewordSize = 10;\n      gf = GenericGF_1.default.AZTEC_DATA_10;\n    } else {\n      codewordSize = 12;\n      gf = GenericGF_1.default.AZTEC_DATA_12;\n    }\n    var numDataCodewords = this.ddata.getNbDatablocks();\n    var numCodewords = rawbits.length / codewordSize;\n    if (numCodewords < numDataCodewords) {\n      throw new FormatException_1.default();\n    }\n    var offset = rawbits.length % codewordSize;\n    var dataWords = new Int32Array(numCodewords);\n    for (var i = 0; i < numCodewords; i++, offset += codewordSize) {\n      dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n    }\n    try {\n      var rsDecoder = new ReedSolomonDecoder_1.default(gf);\n      rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n    } catch (ex) {\n      throw new FormatException_1.default(ex);\n    }\n    // Now perform the unstuffing operation.\n    // First, count how many bits are going to be thrown out as stuffing\n    var mask = (1 << codewordSize) - 1;\n    var stuffedBits = 0;\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n      if (dataWord === 0 || dataWord === mask) {\n        throw new FormatException_1.default();\n      } else if (dataWord === 1 || dataWord === mask - 1) {\n        stuffedBits++;\n      }\n    }\n    // Now, actually unpack the bits and remove the stuffing\n    var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n    var index = 0;\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n      if (dataWord === 1 || dataWord === mask - 1) {\n        // next codewordSize-1 bits are all zeros or all ones\n        correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);\n        // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n        index += codewordSize - 1;\n      } else {\n        for (var bit = codewordSize - 1; bit >= 0; --bit) {\n          correctedBits[index++] = (dataWord & 1 << bit) !== 0;\n        }\n      }\n    }\n    return correctedBits;\n  };\n  /**\n   * Gets the array of bits from an Aztec Code matrix\n   *\n   * @return the array of bits\n   */\n  Decoder.prototype.extractBits = function (matrix) {\n    var compact = this.ddata.isCompact();\n    var layers = this.ddata.getNbLayers();\n    var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n    var alignmentMap = new Int32Array(baseMatrixSize);\n    var rawbits = new Array(this.totalBitsInLayer(layers, compact));\n    if (compact) {\n      for (var i = 0; i < alignmentMap.length; i++) {\n        alignmentMap[i] = i;\n      }\n    } else {\n      var matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision(Integer_1.default.truncDivision(baseMatrixSize, 2) - 1, 15);\n      var origCenter = baseMatrixSize / 2;\n      var center = Integer_1.default.truncDivision(matrixSize, 2);\n      for (var i = 0; i < origCenter; i++) {\n        var newOffset = i + Integer_1.default.truncDivision(i, 15);\n        alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n        alignmentMap[origCenter + i] = center + newOffset + 1;\n      }\n    }\n    for (var i = 0, rowOffset = 0; i < layers; i++) {\n      var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n      // The top-left most point of this layer is <low, low> (not including alignment lines)\n      var low = i * 2;\n      // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n      var high = baseMatrixSize - 1 - low;\n      // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n      for (var j = 0; j < rowSize; j++) {\n        var columnOffset = j * 2;\n        for (var k = 0; k < 2; k++) {\n          // left column\n          rawbits[rowOffset + columnOffset + k] = matrix.get(alignmentMap[low + k], alignmentMap[low + j]);\n          // bottom row\n          rawbits[rowOffset + 2 * rowSize + columnOffset + k] = matrix.get(alignmentMap[low + j], alignmentMap[high - k]);\n          // right column\n          rawbits[rowOffset + 4 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - k], alignmentMap[high - j]);\n          // top row\n          rawbits[rowOffset + 6 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n        }\n      }\n      rowOffset += rowSize * 8;\n    }\n    return rawbits;\n  };\n  /**\n   * Reads a code of given length and at given index in an array of bits\n   */\n  Decoder.readCode = function (rawbits, startIndex, length) {\n    var res = 0;\n    for (var i = startIndex; i < startIndex + length; i++) {\n      res <<= 1;\n      if (rawbits[i]) {\n        res |= 0x01;\n      }\n    }\n    return res;\n  };\n  /**\n   * Reads a code of length 8 in an array of bits, padding with zeros\n   */\n  Decoder.readByte = function (rawbits, startIndex) {\n    var n = rawbits.length - startIndex;\n    if (n >= 8) {\n      return Decoder.readCode(rawbits, startIndex, 8);\n    }\n    return Decoder.readCode(rawbits, startIndex, n) << 8 - n;\n  };\n  /**\n   * Packs a bit array into bytes, most significant bit first\n   */\n  Decoder.convertBoolArrayToByteArray = function (boolArr) {\n    var byteArr = new Uint8Array((boolArr.length + 7) / 8);\n    for (var i = 0; i < byteArr.length; i++) {\n      byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n    }\n    return byteArr;\n  };\n  Decoder.prototype.totalBitsInLayer = function (layers, compact) {\n    return ((compact ? 88 : 112) + 16 * layers) * layers;\n  };\n  Decoder.UPPER_TABLE = ['CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.LOWER_TABLE = ['CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.MIXED_TABLE = [\n  // Module parse failed: Octal literal in strict mode (50:29)\n  // so number string were scaped\n  'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n', '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_', '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'];\n  Decoder.PUNCT_TABLE = ['', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'];\n  Decoder.DIGIT_TABLE = ['CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'];\n  return Decoder;\n}();\nexports.default = Decoder;","map":{"version":3,"sources":["../../../../src/core/aztec/decoder/Decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar __1 = require(\"../../..\");\nvar Integer_1 = require(\"../../util/Integer\");\n// import java.util.Arrays;\nvar Table;\n(function (Table) {\n    Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n    Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n    Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n    Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n    Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n    Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n})(Table || (Table = {}));\n/**\n * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n * the Aztec Code from an image.</p>\n *\n * @author David Olivier\n */\nvar Decoder = /** @class */ (function () {\n    function Decoder() {\n    }\n    Decoder.prototype.decode = function (detectorResult) {\n        this.ddata = detectorResult;\n        var matrix = detectorResult.getBits();\n        var rawbits = this.extractBits(matrix);\n        var correctedBits = this.correctBits(rawbits);\n        var rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n        var result = Decoder.getEncodedData(correctedBits);\n        var decoderResult = new DecoderResult_1.default(rawBytes, result, null, null);\n        decoderResult.setNumBits(correctedBits.length);\n        return decoderResult;\n    };\n    // This method is used for testing the high-level encoder\n    Decoder.highLevelDecode = function (correctedBits) {\n        return this.getEncodedData(correctedBits);\n    };\n    /**\n     * Gets the string encoded in the aztec code bits\n     *\n     * @return the decoded string\n     */\n    Decoder.getEncodedData = function (correctedBits) {\n        var endIndex = correctedBits.length;\n        var latchTable = Table.UPPER; // table most recently latched to\n        var shiftTable = Table.UPPER; // table to use for the next read\n        var result = '';\n        var index = 0;\n        while (index < endIndex) {\n            if (shiftTable === Table.BINARY) {\n                if (endIndex - index < 5) {\n                    break;\n                }\n                var length_1 = Decoder.readCode(correctedBits, index, 5);\n                index += 5;\n                if (length_1 === 0) {\n                    if (endIndex - index < 11) {\n                        break;\n                    }\n                    length_1 = Decoder.readCode(correctedBits, index, 11) + 31;\n                    index += 11;\n                }\n                for (var charCount = 0; charCount < length_1; charCount++) {\n                    if (endIndex - index < 8) {\n                        index = endIndex; // Force outer loop to exit\n                        break;\n                    }\n                    var code = Decoder.readCode(correctedBits, index, 8);\n                    result += /*(char)*/ __1.StringUtils.castAsNonUtf8Char(code);\n                    index += 8;\n                }\n                // Go back to whatever mode we had been in\n                shiftTable = latchTable;\n            }\n            else {\n                var size = shiftTable === Table.DIGIT ? 4 : 5;\n                if (endIndex - index < size) {\n                    break;\n                }\n                var code = Decoder.readCode(correctedBits, index, size);\n                index += size;\n                var str = Decoder.getCharacter(shiftTable, code);\n                if (str.startsWith('CTRL_')) {\n                    // Table changes\n                    // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n                    // That's including when that mode is a shift.\n                    // Our test case dlusbs.png for issue #642 exercises that.\n                    latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n                    shiftTable = Decoder.getTable(str.charAt(5));\n                    if (str.charAt(6) === 'L') {\n                        latchTable = shiftTable;\n                    }\n                }\n                else {\n                    result += str;\n                    // Go back to whatever mode we had been in\n                    shiftTable = latchTable;\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * gets the table corresponding to the char passed\n     */\n    Decoder.getTable = function (t) {\n        switch (t) {\n            case 'L':\n                return Table.LOWER;\n            case 'P':\n                return Table.PUNCT;\n            case 'M':\n                return Table.MIXED;\n            case 'D':\n                return Table.DIGIT;\n            case 'B':\n                return Table.BINARY;\n            case 'U':\n            default:\n                return Table.UPPER;\n        }\n    };\n    /**\n     * Gets the character (or string) corresponding to the passed code in the given table\n     *\n     * @param table the table used\n     * @param code the code of the character\n     */\n    Decoder.getCharacter = function (table, code) {\n        switch (table) {\n            case Table.UPPER:\n                return Decoder.UPPER_TABLE[code];\n            case Table.LOWER:\n                return Decoder.LOWER_TABLE[code];\n            case Table.MIXED:\n                return Decoder.MIXED_TABLE[code];\n            case Table.PUNCT:\n                return Decoder.PUNCT_TABLE[code];\n            case Table.DIGIT:\n                return Decoder.DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException_1.default('Bad table');\n        }\n    };\n    /**\n     * <p>Performs RS error correction on an array of bits.</p>\n     *\n     * @return the corrected array\n     * @throws FormatException if the input contains too many errors\n     */\n    Decoder.prototype.correctBits = function (rawbits) {\n        var gf;\n        var codewordSize;\n        if (this.ddata.getNbLayers() <= 2) {\n            codewordSize = 6;\n            gf = GenericGF_1.default.AZTEC_DATA_6;\n        }\n        else if (this.ddata.getNbLayers() <= 8) {\n            codewordSize = 8;\n            gf = GenericGF_1.default.AZTEC_DATA_8;\n        }\n        else if (this.ddata.getNbLayers() <= 22) {\n            codewordSize = 10;\n            gf = GenericGF_1.default.AZTEC_DATA_10;\n        }\n        else {\n            codewordSize = 12;\n            gf = GenericGF_1.default.AZTEC_DATA_12;\n        }\n        var numDataCodewords = this.ddata.getNbDatablocks();\n        var numCodewords = rawbits.length / codewordSize;\n        if (numCodewords < numDataCodewords) {\n            throw new FormatException_1.default();\n        }\n        var offset = rawbits.length % codewordSize;\n        var dataWords = new Int32Array(numCodewords);\n        for (var i = 0; i < numCodewords; i++, offset += codewordSize) {\n            dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n        }\n        try {\n            var rsDecoder = new ReedSolomonDecoder_1.default(gf);\n            rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n        }\n        catch (ex) {\n            throw new FormatException_1.default(ex);\n        }\n        // Now perform the unstuffing operation.\n        // First, count how many bits are going to be thrown out as stuffing\n        var mask = (1 << codewordSize) - 1;\n        var stuffedBits = 0;\n        for (var i = 0; i < numDataCodewords; i++) {\n            var dataWord = dataWords[i];\n            if (dataWord === 0 || dataWord === mask) {\n                throw new FormatException_1.default();\n            }\n            else if (dataWord === 1 || dataWord === mask - 1) {\n                stuffedBits++;\n            }\n        }\n        // Now, actually unpack the bits and remove the stuffing\n        var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n        var index = 0;\n        for (var i = 0; i < numDataCodewords; i++) {\n            var dataWord = dataWords[i];\n            if (dataWord === 1 || dataWord === mask - 1) {\n                // next codewordSize-1 bits are all zeros or all ones\n                correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);\n                // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n                index += codewordSize - 1;\n            }\n            else {\n                for (var bit = codewordSize - 1; bit >= 0; --bit) {\n                    correctedBits[index++] = (dataWord & (1 << bit)) !== 0;\n                }\n            }\n        }\n        return correctedBits;\n    };\n    /**\n     * Gets the array of bits from an Aztec Code matrix\n     *\n     * @return the array of bits\n     */\n    Decoder.prototype.extractBits = function (matrix) {\n        var compact = this.ddata.isCompact();\n        var layers = this.ddata.getNbLayers();\n        var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n        var alignmentMap = new Int32Array(baseMatrixSize);\n        var rawbits = new Array(this.totalBitsInLayer(layers, compact));\n        if (compact) {\n            for (var i = 0; i < alignmentMap.length; i++) {\n                alignmentMap[i] = i;\n            }\n        }\n        else {\n            var matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision((Integer_1.default.truncDivision(baseMatrixSize, 2) - 1), 15);\n            var origCenter = baseMatrixSize / 2;\n            var center = Integer_1.default.truncDivision(matrixSize, 2);\n            for (var i = 0; i < origCenter; i++) {\n                var newOffset = i + Integer_1.default.truncDivision(i, 15);\n                alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n                alignmentMap[origCenter + i] = center + newOffset + 1;\n            }\n        }\n        for (var i = 0, rowOffset = 0; i < layers; i++) {\n            var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n            // The top-left most point of this layer is <low, low> (not including alignment lines)\n            var low = i * 2;\n            // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n            var high = baseMatrixSize - 1 - low;\n            // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n            for (var j = 0; j < rowSize; j++) {\n                var columnOffset = j * 2;\n                for (var k = 0; k < 2; k++) {\n                    // left column\n                    rawbits[rowOffset + columnOffset + k] =\n                        matrix.get(alignmentMap[low + k], alignmentMap[low + j]);\n                    // bottom row\n                    rawbits[rowOffset + 2 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[low + j], alignmentMap[high - k]);\n                    // right column\n                    rawbits[rowOffset + 4 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[high - k], alignmentMap[high - j]);\n                    // top row\n                    rawbits[rowOffset + 6 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n                }\n            }\n            rowOffset += rowSize * 8;\n        }\n        return rawbits;\n    };\n    /**\n     * Reads a code of given length and at given index in an array of bits\n     */\n    Decoder.readCode = function (rawbits, startIndex, length) {\n        var res = 0;\n        for (var i = startIndex; i < startIndex + length; i++) {\n            res <<= 1;\n            if (rawbits[i]) {\n                res |= 0x01;\n            }\n        }\n        return res;\n    };\n    /**\n     * Reads a code of length 8 in an array of bits, padding with zeros\n     */\n    Decoder.readByte = function (rawbits, startIndex) {\n        var n = rawbits.length - startIndex;\n        if (n >= 8) {\n            return Decoder.readCode(rawbits, startIndex, 8);\n        }\n        return Decoder.readCode(rawbits, startIndex, n) << (8 - n);\n    };\n    /**\n     * Packs a bit array into bytes, most significant bit first\n     */\n    Decoder.convertBoolArrayToByteArray = function (boolArr) {\n        var byteArr = new Uint8Array((boolArr.length + 7) / 8);\n        for (var i = 0; i < byteArr.length; i++) {\n            byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n        }\n        return byteArr;\n    };\n    Decoder.prototype.totalBitsInLayer = function (layers, compact) {\n        return ((compact ? 88 : 112) + 16 * layers) * layers;\n    };\n    Decoder.UPPER_TABLE = [\n        'CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.LOWER_TABLE = [\n        'CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.MIXED_TABLE = [\n        // Module parse failed: Octal literal in strict mode (50:29)\n        // so number string were scaped\n        'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n',\n        '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_',\n        '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'\n    ];\n    Decoder.PUNCT_TABLE = [\n        '', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')',\n        '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'\n    ];\n    Decoder.DIGIT_TABLE = [\n        'CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'\n    ];\n    return Decoder;\n}());\nexports.default = Decoder;\n//# sourceMappingURL=Decoder.js.map"]},"metadata":{},"sourceType":"script"}