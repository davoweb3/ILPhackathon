{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.oned {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar ChecksumException_1 = require(\"../ChecksumException\");\nvar FormatException_1 = require(\"../FormatException\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\nvar OneDReader_1 = require(\"./OneDReader\");\nvar Result_1 = require(\"../Result\");\nvar ResultPoint_1 = require(\"../ResultPoint\");\n/**\n * <p>Decodes Code 39 barcodes. Supports \"Full ASCII Code 39\" if USE_CODE_39_EXTENDED_MODE is set.</p>\n *\n * @author Sean Owen\n * @see Code93Reader\n */\nvar Code39Reader = /** @class */function (_super) {\n  __extends(Code39Reader, _super);\n  /**\n   * Creates a reader that assumes all encoded data is data, and does not treat the final\n   * character as a check digit. It will not decoded \"extended Code 39\" sequences.\n   */\n  // public Code39Reader() {\n  //   this(false);\n  // }\n  /**\n   * Creates a reader that can be configured to check the last character as a check digit.\n   * It will not decoded \"extended Code 39\" sequences.\n   *\n   * @param usingCheckDigit if true, treat the last data character as a check digit, not\n   * data, and verify that the checksum passes.\n   */\n  // public Code39Reader(boolean usingCheckDigit) {\n  //   this(usingCheckDigit, false);\n  // }\n  /**\n   * Creates a reader that can be configured to check the last character as a check digit,\n   * or optionally attempt to decode \"extended Code 39\" sequences that are used to encode\n   * the full ASCII character set.\n   *\n   * @param usingCheckDigit if true, treat the last data character as a check digit, not\n   * data, and verify that the checksum passes.\n   * @param extendedMode if true, will attempt to decode extended Code 39 sequences in the\n   * text.\n   */\n  function Code39Reader(usingCheckDigit, extendedMode) {\n    if (usingCheckDigit === void 0) {\n      usingCheckDigit = false;\n    }\n    if (extendedMode === void 0) {\n      extendedMode = false;\n    }\n    var _this = _super.call(this) || this;\n    _this.usingCheckDigit = usingCheckDigit;\n    _this.extendedMode = extendedMode;\n    _this.decodeRowResult = '';\n    _this.counters = new Array(9);\n    return _this;\n  }\n  Code39Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a, e_2, _b;\n    var theCounters = this.counters;\n    theCounters.fill(0);\n    this.decodeRowResult = '';\n    var start = Code39Reader.findAsteriskPattern(row, theCounters);\n    // Read off white space\n    var nextStart = row.getNextSet(start[1]);\n    var end = row.getSize();\n    var decodedChar;\n    var lastStart;\n    do {\n      Code39Reader.recordPattern(row, nextStart, theCounters);\n      var pattern = Code39Reader.toNarrowWidePattern(theCounters);\n      if (pattern < 0) {\n        throw new NotFoundException_1.default();\n      }\n      decodedChar = Code39Reader.patternToChar(pattern);\n      this.decodeRowResult += decodedChar;\n      lastStart = nextStart;\n      try {\n        for (var theCounters_1 = __values(theCounters), theCounters_1_1 = theCounters_1.next(); !theCounters_1_1.done; theCounters_1_1 = theCounters_1.next()) {\n          var counter = theCounters_1_1.value;\n          nextStart += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (theCounters_1_1 && !theCounters_1_1.done && (_a = theCounters_1.return)) _a.call(theCounters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      // Read off white space\n      nextStart = row.getNextSet(nextStart);\n    } while (decodedChar !== '*');\n    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1); // remove asterisk\n    // Look for whitespace after pattern:\n    var lastPatternSize = 0;\n    try {\n      for (var theCounters_2 = __values(theCounters), theCounters_2_1 = theCounters_2.next(); !theCounters_2_1.done; theCounters_2_1 = theCounters_2.next()) {\n        var counter = theCounters_2_1.value;\n        lastPatternSize += counter;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (theCounters_2_1 && !theCounters_2_1.done && (_b = theCounters_2.return)) _b.call(theCounters_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    var whiteSpaceAfterEnd = nextStart - lastStart - lastPatternSize;\n    // If 50% of last pattern size, following last pattern, is not whitespace, fail\n    // (but if it's whitespace to the very end of the image, that's OK)\n    if (nextStart !== end && whiteSpaceAfterEnd * 2 < lastPatternSize) {\n      throw new NotFoundException_1.default();\n    }\n    if (this.usingCheckDigit) {\n      var max = this.decodeRowResult.length - 1;\n      var total = 0;\n      for (var i = 0; i < max; i++) {\n        total += Code39Reader.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(i));\n      }\n      if (this.decodeRowResult.charAt(max) !== Code39Reader.ALPHABET_STRING.charAt(total % 43)) {\n        throw new ChecksumException_1.default();\n      }\n      this.decodeRowResult = this.decodeRowResult.substring(0, max);\n    }\n    if (this.decodeRowResult.length === 0) {\n      // false positive\n      throw new NotFoundException_1.default();\n    }\n    var resultString;\n    if (this.extendedMode) {\n      resultString = Code39Reader.decodeExtended(this.decodeRowResult);\n    } else {\n      resultString = this.decodeRowResult;\n    }\n    var left = (start[1] + start[0]) / 2.0;\n    var right = lastStart + lastPatternSize / 2.0;\n    return new Result_1.default(resultString, null, 0, [new ResultPoint_1.default(left, rowNumber), new ResultPoint_1.default(right, rowNumber)], BarcodeFormat_1.default.CODE_39, new Date().getTime());\n  };\n  Code39Reader.findAsteriskPattern = function (row, counters) {\n    var width = row.getSize();\n    var rowOffset = row.getNextSet(0);\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    var isWhite = false;\n    var patternLength = counters.length;\n    for (var i = rowOffset; i < width; i++) {\n      if (row.get(i) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          // Look for whitespace before start pattern, >= 50% of width of start pattern\n          if (this.toNarrowWidePattern(counters) === Code39Reader.ASTERISK_ENCODING && row.isRange(Math.max(0, patternStart - Math.floor((i - patternStart) / 2)), patternStart, false)) {\n            return [patternStart, i];\n          }\n          patternStart += counters[0] + counters[1];\n          counters.copyWithin(0, 2, 2 + counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  // For efficiency, returns -1 on failure. Not throwing here saved as many as 700 exceptions\n  // per image when using some of our blackbox images.\n  Code39Reader.toNarrowWidePattern = function (counters) {\n    var e_3, _a;\n    var numCounters = counters.length;\n    var maxNarrowCounter = 0;\n    var wideCounters;\n    do {\n      var minCounter = 0x7fffffff;\n      try {\n        for (var counters_1 = __values(counters), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n          if (counter < minCounter && counter > maxNarrowCounter) {\n            minCounter = counter;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      maxNarrowCounter = minCounter;\n      wideCounters = 0;\n      var totalWideCountersWidth = 0;\n      var pattern = 0;\n      for (var i = 0; i < numCounters; i++) {\n        var counter = counters[i];\n        if (counter > maxNarrowCounter) {\n          pattern |= 1 << numCounters - 1 - i;\n          wideCounters++;\n          totalWideCountersWidth += counter;\n        }\n      }\n      if (wideCounters === 3) {\n        // Found 3 wide counters, but are they close enough in width?\n        // We can perform a cheap, conservative check to see if any individual\n        // counter is more than 1.5 times the average:\n        for (var i = 0; i < numCounters && wideCounters > 0; i++) {\n          var counter = counters[i];\n          if (counter > maxNarrowCounter) {\n            wideCounters--;\n            // totalWideCountersWidth = 3 * average, so this checks if counter >= 3/2 * average\n            if (counter * 2 >= totalWideCountersWidth) {\n              return -1;\n            }\n          }\n        }\n        return pattern;\n      }\n    } while (wideCounters > 3);\n    return -1;\n  };\n  Code39Reader.patternToChar = function (pattern) {\n    for (var i = 0; i < Code39Reader.CHARACTER_ENCODINGS.length; i++) {\n      if (Code39Reader.CHARACTER_ENCODINGS[i] === pattern) {\n        return Code39Reader.ALPHABET_STRING.charAt(i);\n      }\n    }\n    if (pattern === Code39Reader.ASTERISK_ENCODING) {\n      return '*';\n    }\n    throw new NotFoundException_1.default();\n  };\n  Code39Reader.decodeExtended = function (encoded) {\n    var length = encoded.length;\n    var decoded = '';\n    for (var i = 0; i < length; i++) {\n      var c = encoded.charAt(i);\n      if (c === '+' || c === '$' || c === '%' || c === '/') {\n        var next = encoded.charAt(i + 1);\n        var decodedChar = '\\0';\n        switch (c) {\n          case '+':\n            // +A to +Z map to a to z\n            if (next >= 'A' && next <= 'Z') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case '$':\n            // $A to $Z map to control codes SH to SB\n            if (next >= 'A' && next <= 'Z') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case '%':\n            // %A to %E map to control codes ESC to US\n            if (next >= 'A' && next <= 'E') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);\n            } else if (next >= 'F' && next <= 'J') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);\n            } else if (next >= 'K' && next <= 'O') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);\n            } else if (next >= 'P' && next <= 'T') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);\n            } else if (next === 'U') {\n              decodedChar = '\\0';\n            } else if (next === 'V') {\n              decodedChar = '@';\n            } else if (next === 'W') {\n              decodedChar = '`';\n            } else if (next === 'X' || next === 'Y' || next === 'Z') {\n              decodedChar = '\\x7f';\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n          case '/':\n            // /A to /O map to ! to , and /Z maps to :\n            if (next >= 'A' && next <= 'O') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);\n            } else if (next === 'Z') {\n              decodedChar = ':';\n            } else {\n              throw new FormatException_1.default();\n            }\n            break;\n        }\n        decoded += decodedChar;\n        // bump up i again since we read two characters\n        i++;\n      } else {\n        decoded += c;\n      }\n    }\n    return decoded;\n  };\n  Code39Reader.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%';\n  /**\n   * These represent the encodings of characters, as patterns of wide and narrow bars.\n   * The 9 least-significant bits of each int correspond to the pattern of wide and narrow,\n   * with 1s representing \"wide\" and 0s representing narrow.\n   */\n  Code39Reader.CHARACTER_ENCODINGS = [0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, 0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, 0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, 0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x0A8, 0x0A2, 0x08A, 0x02A // /-%\n  ];\n\n  Code39Reader.ASTERISK_ENCODING = 0x094;\n  return Code39Reader;\n}(OneDReader_1.default);\nexports.default = Code39Reader;","map":{"version":3,"names":["BarcodeFormat_1","require","ChecksumException_1","FormatException_1","NotFoundException_1","OneDReader_1","Result_1","ResultPoint_1","Code39Reader","_super","__extends","usingCheckDigit","extendedMode","_this","call","decodeRowResult","counters","Array","prototype","decodeRow","rowNumber","row","hints","theCounters","fill","start","findAsteriskPattern","nextStart","getNextSet","end","getSize","decodedChar","lastStart","recordPattern","pattern","toNarrowWidePattern","default","patternToChar","theCounters_1","__values","theCounters_1_1","next","done","counter","value","substring","length","lastPatternSize","theCounters_2","theCounters_2_1","whiteSpaceAfterEnd","max","total","i","ALPHABET_STRING","indexOf","charAt","resultString","decodeExtended","left","right","CODE_39","Date","getTime","width","rowOffset","counterPosition","patternStart","isWhite","patternLength","get","ASTERISK_ENCODING","isRange","Math","floor","copyWithin","numCounters","maxNarrowCounter","wideCounters","minCounter","counters_1","counters_1_1","totalWideCountersWidth","CHARACTER_ENCODINGS","encoded","decoded","c","String","fromCharCode","charCodeAt"],"sources":["../../../src/core/oned/Code39Reader.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}