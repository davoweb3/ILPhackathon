{"ast":null,"code":"\"use strict\";\n\n/*\n* Copyright 2012 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder.ec;\nvar IllegalArgumentException_1 = require(\"../../../IllegalArgumentException\");\nvar System_1 = require(\"../../../util/System\");\nvar StringBuilder_1 = require(\"../../../util/StringBuilder\");\n/**\n * @author Sean Owen\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\n */\nvar ModulusPoly = /** @class */function () {\n  function ModulusPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    this.field = field;\n    var coefficientsLength = /*int*/coefficients.length;\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = /*int*/1;\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = new Int32Array([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n  ModulusPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\n   * @return degree of this polynomial\n   */\n  ModulusPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\n   * @return true iff this polynomial is the monomial \"0\"\n   */\n  ModulusPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\n   * @return coefficient of x^degree term in this polynomial\n   */\n  ModulusPoly.prototype.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\n   * @return evaluation of this polynomial at a given point\n   */\n  ModulusPoly.prototype.evaluateAt = function (a) {\n    var e_1, _a;\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    if (a === 1) {\n      // Just the sum of the coefficients\n      var sum = /*int*/0;\n      try {\n        for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var coefficient = _c.value /*int*/;\n          sum = this.field.add(sum, coefficient);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return sum;\n    }\n    var result = /*int*/this.coefficients[0];\n    var size = /*int*/this.coefficients.length;\n    for (var i /*int*/ = 1; i < size; i++) {\n      result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n    }\n    return result;\n  };\n  ModulusPoly.prototype.add = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero()) {\n      return other;\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = /*int*/largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new ModulusPoly(this.field, sumDiff);\n  };\n  ModulusPoly.prototype.subtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    return this.add(other.negative());\n  };\n  ModulusPoly.prototype.multiply = function (other) {\n    if (other instanceof ModulusPoly) {\n      return this.multiplyOther(other);\n    }\n    return this.multiplyScalar(other);\n  };\n  ModulusPoly.prototype.multiplyOther = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero() || other.isZero()) {\n      // return this.field.getZero();\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = /*int*/aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = /*int*/bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    for (var i /*int*/ = 0; i < aLength; i++) {\n      var aCoeff = /*int*/aCoefficients[i];\n      for (var j /*int*/ = 0; j < bLength; j++) {\n        product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.negative = function () {\n    var size = /*int*/this.coefficients.length;\n    var negativeCoefficients = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n    }\n    return new ModulusPoly(this.field, negativeCoefficients);\n  };\n  ModulusPoly.prototype.multiplyScalar = function (scalar) {\n    if (scalar === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    if (scalar === 1) {\n      return this;\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    if (coefficient === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size + degree);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  /*\n  ModulusPoly[] divide(other: ModulusPoly) {\n    if (!field.equals(other.field)) {\n      throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n    }\n    if (other.isZero()) {\n      throw new IllegalArgumentException(\"Divide by 0\");\n    }\n       let quotient: ModulusPoly = field.getZero();\n    let remainder: ModulusPoly = this;\n       let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\n    let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\n       while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\n      let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\n      let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.add(iterationQuotient);\n      remainder = remainder.subtract(term);\n    }\n       return new ModulusPoly[] { quotient, remainder };\n  }\n  */\n  // @Override\n  ModulusPoly.prototype.toString = function () {\n    var result = new StringBuilder_1.default( /*8 * this.getDegree()*/); // dynamic string size in JS\n    for (var degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = /*int*/this.getCoefficient(degree);\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result.append(' - ');\n          coefficient = -coefficient;\n        } else {\n          if (result.length() > 0) {\n            result.append(' + ');\n          }\n        }\n        if (degree === 0 || coefficient !== 1) {\n          result.append(coefficient);\n        }\n        if (degree !== 0) {\n          if (degree === 1) {\n            result.append('x');\n          } else {\n            result.append('x^');\n            result.append(degree);\n          }\n        }\n      }\n    }\n    return result.toString();\n  };\n  return ModulusPoly;\n}();\nexports.default = ModulusPoly;","map":{"version":3,"sources":["../../../../../src/core/pdf417/decoder/ec/ModulusPoly.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n* Copyright 2012 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder.ec;\nvar IllegalArgumentException_1 = require(\"../../../IllegalArgumentException\");\nvar System_1 = require(\"../../../util/System\");\nvar StringBuilder_1 = require(\"../../../util/StringBuilder\");\n/**\n * @author Sean Owen\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\n */\nvar ModulusPoly = /** @class */ (function () {\n    function ModulusPoly(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        this.field = field;\n        var coefficientsLength = /*int*/ coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            var firstNonZero = /*int*/ 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = new Int32Array([0]);\n            }\n            else {\n                this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n                System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    ModulusPoly.prototype.getCoefficients = function () {\n        return this.coefficients;\n    };\n    /**\n     * @return degree of this polynomial\n     */\n    ModulusPoly.prototype.getDegree = function () {\n        return this.coefficients.length - 1;\n    };\n    /**\n     * @return true iff this polynomial is the monomial \"0\"\n     */\n    ModulusPoly.prototype.isZero = function () {\n        return this.coefficients[0] === 0;\n    };\n    /**\n     * @return coefficient of x^degree term in this polynomial\n     */\n    ModulusPoly.prototype.getCoefficient = function (degree) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    };\n    /**\n     * @return evaluation of this polynomial at a given point\n     */\n    ModulusPoly.prototype.evaluateAt = function (a) {\n        var e_1, _a;\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        if (a === 1) {\n            // Just the sum of the coefficients\n            var sum = /*int*/ 0;\n            try {\n                for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var coefficient = _c.value /*int*/;\n                    sum = this.field.add(sum, coefficient);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return sum;\n        }\n        var result = /*int*/ this.coefficients[0];\n        var size = /*int*/ this.coefficients.length;\n        for (var i /*int*/ = 1; i < size; i++) {\n            result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n        }\n        return result;\n    };\n    ModulusPoly.prototype.add = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n        }\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        var smallerCoefficients = this.coefficients;\n        var largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            var temp = smallerCoefficients;\n            smallerCoefficients = largerCoefficients;\n            largerCoefficients = temp;\n        }\n        var sumDiff = new Int32Array(largerCoefficients.length);\n        var lengthDiff = /*int*/ largerCoefficients.length - smallerCoefficients.length;\n        // Copy high-order terms only found in higher-degree polynomial's coefficients\n        System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n        for (var i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new ModulusPoly(this.field, sumDiff);\n    };\n    ModulusPoly.prototype.subtract = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        return this.add(other.negative());\n    };\n    ModulusPoly.prototype.multiply = function (other) {\n        if (other instanceof ModulusPoly) {\n            return this.multiplyOther(other);\n        }\n        return this.multiplyScalar(other);\n    };\n    ModulusPoly.prototype.multiplyOther = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n        }\n        if (this.isZero() || other.isZero()) {\n            // return this.field.getZero();\n            return new ModulusPoly(this.field, new Int32Array([0]));\n        }\n        var aCoefficients = this.coefficients;\n        var aLength = /*int*/ aCoefficients.length;\n        var bCoefficients = other.coefficients;\n        var bLength = /*int*/ bCoefficients.length;\n        var product = new Int32Array(aLength + bLength - 1);\n        for (var i /*int*/ = 0; i < aLength; i++) {\n            var aCoeff = /*int*/ aCoefficients[i];\n            for (var j /*int*/ = 0; j < bLength; j++) {\n                product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new ModulusPoly(this.field, product);\n    };\n    ModulusPoly.prototype.negative = function () {\n        var size = /*int*/ this.coefficients.length;\n        var negativeCoefficients = new Int32Array(size);\n        for (var i /*int*/ = 0; i < size; i++) {\n            negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n        }\n        return new ModulusPoly(this.field, negativeCoefficients);\n    };\n    ModulusPoly.prototype.multiplyScalar = function (scalar) {\n        if (scalar === 0) {\n            return new ModulusPoly(this.field, new Int32Array([0]));\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        var size = /*int*/ this.coefficients.length;\n        var product = new Int32Array(size);\n        for (var i /*int*/ = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\n        }\n        return new ModulusPoly(this.field, product);\n    };\n    ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n        if (degree < 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        if (coefficient === 0) {\n            return new ModulusPoly(this.field, new Int32Array([0]));\n        }\n        var size = /*int*/ this.coefficients.length;\n        var product = new Int32Array(size + degree);\n        for (var i /*int*/ = 0; i < size; i++) {\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\n        }\n        return new ModulusPoly(this.field, product);\n    };\n    /*\n    ModulusPoly[] divide(other: ModulusPoly) {\n      if (!field.equals(other.field)) {\n        throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n      }\n      if (other.isZero()) {\n        throw new IllegalArgumentException(\"Divide by 0\");\n      }\n  \n      let quotient: ModulusPoly = field.getZero();\n      let remainder: ModulusPoly = this;\n  \n      let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\n      let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\n  \n      while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n        let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\n        let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n        let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\n        let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\n        quotient = quotient.add(iterationQuotient);\n        remainder = remainder.subtract(term);\n      }\n  \n      return new ModulusPoly[] { quotient, remainder };\n    }\n    */\n    // @Override\n    ModulusPoly.prototype.toString = function () {\n        var result = new StringBuilder_1.default( /*8 * this.getDegree()*/); // dynamic string size in JS\n        for (var degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\n            var coefficient = /*int*/ this.getCoefficient(degree);\n            if (coefficient !== 0) {\n                if (coefficient < 0) {\n                    result.append(' - ');\n                    coefficient = -coefficient;\n                }\n                else {\n                    if (result.length() > 0) {\n                        result.append(' + ');\n                    }\n                }\n                if (degree === 0 || coefficient !== 1) {\n                    result.append(coefficient);\n                }\n                if (degree !== 0) {\n                    if (degree === 1) {\n                        result.append('x');\n                    }\n                    else {\n                        result.append('x^');\n                        result.append(degree);\n                    }\n                }\n            }\n        }\n        return result.toString();\n    };\n    return ModulusPoly;\n}());\nexports.default = ModulusPoly;\n//# sourceMappingURL=ModulusPoly.js.map"]},"metadata":{},"sourceType":"script"}