{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n  StringUtils.castAsNonUtf8Char = function (code, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    }\n    // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n    // you can see this method as a Java version of String.fromCharCode\n    var e = encoding ? encoding.getName() : this.ISO88591;\n    // use passed format (fromCharCode will return UTF8 encoding)\n    return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n  };\n  /**\n   * @param bytes bytes encoding a string, whose encoding should be guessed\n   * @param hints decode hints if applicable\n   * @return name of guessed encoding; at the moment will only guess one of:\n   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n   *  default encoding if none of these can possibly be correct\n   */\n  StringUtils.guessEncoding = function (bytes, hints) {\n    if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n      return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n    }\n    // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n    // which should be by far the most common encodings.\n    var length = bytes.length;\n    var canBeISO88591 = true;\n    var canBeShiftJIS = true;\n    var canBeUTF8 = true;\n    var utf8BytesLeft = 0;\n    // int utf8LowChars = 0\n    var utf2BytesChars = 0;\n    var utf3BytesChars = 0;\n    var utf4BytesChars = 0;\n    var sjisBytesLeft = 0;\n    // int sjisLowChars = 0\n    var sjisKatakanaChars = 0;\n    // int sjisDoubleBytesChars = 0\n    var sjisCurKatakanaWordLength = 0;\n    var sjisCurDoubleBytesWordLength = 0;\n    var sjisMaxKatakanaWordLength = 0;\n    var sjisMaxDoubleBytesWordLength = 0;\n    // int isoLowChars = 0\n    // int isoHighChars = 0\n    var isoHighOther = 0;\n    var utf8bom = bytes.length > 3 && bytes[0] === /*(byte) */0xEF && bytes[1] === /*(byte) */0xBB && bytes[2] === /*(byte) */0xBF;\n    for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n      var value = bytes[i] & 0xFF;\n      // UTF-8 stuff\n      if (canBeUTF8) {\n        if (utf8BytesLeft > 0) {\n          if ((value & 0x80) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft--;\n          }\n        } else if ((value & 0x80) !== 0) {\n          if ((value & 0x40) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft++;\n            if ((value & 0x20) === 0) {\n              utf2BytesChars++;\n            } else {\n              utf8BytesLeft++;\n              if ((value & 0x10) === 0) {\n                utf3BytesChars++;\n              } else {\n                utf8BytesLeft++;\n                if ((value & 0x08) === 0) {\n                  utf4BytesChars++;\n                } else {\n                  canBeUTF8 = false;\n                }\n              }\n            }\n          }\n        } // else {\n        // utf8LowChars++\n        // }\n      }\n      // ISO-8859-1 stuff\n      if (canBeISO88591) {\n        if (value > 0x7F && value < 0xA0) {\n          canBeISO88591 = false;\n        } else if (value > 0x9F) {\n          if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n            isoHighOther++;\n          } // else {\n          // isoHighChars++\n          // }\n        } // else {\n        // isoLowChars++\n        // }\n      }\n      // Shift_JIS stuff\n      if (canBeShiftJIS) {\n        if (sjisBytesLeft > 0) {\n          if (value < 0x40 || value === 0x7F || value > 0xFC) {\n            canBeShiftJIS = false;\n          } else {\n            sjisBytesLeft--;\n          }\n        } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n          canBeShiftJIS = false;\n        } else if (value > 0xA0 && value < 0xE0) {\n          sjisKatakanaChars++;\n          sjisCurDoubleBytesWordLength = 0;\n          sjisCurKatakanaWordLength++;\n          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n          }\n        } else if (value > 0x7F) {\n          sjisBytesLeft++;\n          // sjisDoubleBytesChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength++;\n          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n          }\n        } else {\n          // sjisLowChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength = 0;\n        }\n      }\n    }\n    if (canBeUTF8 && utf8BytesLeft > 0) {\n      canBeUTF8 = false;\n    }\n    if (canBeShiftJIS && sjisBytesLeft > 0) {\n      canBeShiftJIS = false;\n    }\n    // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n      return StringUtils.UTF8;\n    }\n    // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n    if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n      return StringUtils.SHIFT_JIS;\n    }\n    // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n    // - If we saw\n    //   - only two consecutive katakana chars in the whole text, or\n    //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n    // - then we conclude Shift_JIS, else ISO-8859-1\n    if (canBeISO88591 && canBeShiftJIS) {\n      return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n    }\n    // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n    if (canBeISO88591) {\n      return StringUtils.ISO88591;\n    }\n    if (canBeShiftJIS) {\n      return StringUtils.SHIFT_JIS;\n    }\n    if (canBeUTF8) {\n      return StringUtils.UTF8;\n    }\n    // Otherwise, we take a wild guess with platform encoding\n    return StringUtils.PLATFORM_DEFAULT_ENCODING;\n  };\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n  StringUtils.format = function (append) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var i = -1;\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (args[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n      switch (p4) {\n        case 's':\n          val = args[i];\n          break;\n        case 'c':\n          val = args[i][0];\n          break;\n        case 'f':\n          val = parseFloat(args[i]).toFixed(exp);\n          break;\n        case 'p':\n          val = parseFloat(args[i]).toPrecision(exp);\n          break;\n        case 'e':\n          val = parseFloat(args[i]).toExponential(exp);\n          break;\n        case 'x':\n          val = parseInt(args[i]).toString(base ? base : 16);\n          break;\n        case 'd':\n          val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1); /* padding size */\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' '; /* isnull? */\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n      return val;\n    }\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return append.replace(regex, callback);\n  };\n  /**\n   *\n   */\n  StringUtils.getBytes = function (str, encoding) {\n    return StringEncoding_1.default.encode(str, encoding);\n  };\n  /**\n   * Returns the charcode at the specified index or at index zero.\n   */\n  StringUtils.getCharCode = function (str, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n    return str.charCodeAt(index);\n  };\n  /**\n   * Returns char for given charcode\n   */\n  StringUtils.getCharAt = function (charCode) {\n    return String.fromCharCode(charCode);\n  };\n  StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n  StringUtils.GB2312 = 'GB2312';\n  StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n  StringUtils.EUC_JP = 'EUC_JP';\n  StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n  StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n  StringUtils.ASSUME_SHIFT_JIS = false;\n  return StringUtils;\n}();\nexports.default = StringUtils;","map":{"version":3,"sources":["../../../src/core/common/StringUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\nvar StringUtils = /** @class */ (function () {\n    function StringUtils() {\n    }\n    // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n    // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n    StringUtils.castAsNonUtf8Char = function (code, encoding) {\n        if (encoding === void 0) { encoding = null; }\n        // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n        // you can see this method as a Java version of String.fromCharCode\n        var e = encoding ? encoding.getName() : this.ISO88591;\n        // use passed format (fromCharCode will return UTF8 encoding)\n        return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n    };\n    /**\n     * @param bytes bytes encoding a string, whose encoding should be guessed\n     * @param hints decode hints if applicable\n     * @return name of guessed encoding; at the moment will only guess one of:\n     *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n     *  default encoding if none of these can possibly be correct\n     */\n    StringUtils.guessEncoding = function (bytes, hints) {\n        if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n            return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n        }\n        // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n        // which should be by far the most common encodings.\n        var length = bytes.length;\n        var canBeISO88591 = true;\n        var canBeShiftJIS = true;\n        var canBeUTF8 = true;\n        var utf8BytesLeft = 0;\n        // int utf8LowChars = 0\n        var utf2BytesChars = 0;\n        var utf3BytesChars = 0;\n        var utf4BytesChars = 0;\n        var sjisBytesLeft = 0;\n        // int sjisLowChars = 0\n        var sjisKatakanaChars = 0;\n        // int sjisDoubleBytesChars = 0\n        var sjisCurKatakanaWordLength = 0;\n        var sjisCurDoubleBytesWordLength = 0;\n        var sjisMaxKatakanaWordLength = 0;\n        var sjisMaxDoubleBytesWordLength = 0;\n        // int isoLowChars = 0\n        // int isoHighChars = 0\n        var isoHighOther = 0;\n        var utf8bom = bytes.length > 3 &&\n            bytes[0] === /*(byte) */ 0xEF &&\n            bytes[1] === /*(byte) */ 0xBB &&\n            bytes[2] === /*(byte) */ 0xBF;\n        for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n            var value = bytes[i] & 0xFF;\n            // UTF-8 stuff\n            if (canBeUTF8) {\n                if (utf8BytesLeft > 0) {\n                    if ((value & 0x80) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft--;\n                    }\n                }\n                else if ((value & 0x80) !== 0) {\n                    if ((value & 0x40) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft++;\n                        if ((value & 0x20) === 0) {\n                            utf2BytesChars++;\n                        }\n                        else {\n                            utf8BytesLeft++;\n                            if ((value & 0x10) === 0) {\n                                utf3BytesChars++;\n                            }\n                            else {\n                                utf8BytesLeft++;\n                                if ((value & 0x08) === 0) {\n                                    utf4BytesChars++;\n                                }\n                                else {\n                                    canBeUTF8 = false;\n                                }\n                            }\n                        }\n                    }\n                } // else {\n                // utf8LowChars++\n                // }\n            }\n            // ISO-8859-1 stuff\n            if (canBeISO88591) {\n                if (value > 0x7F && value < 0xA0) {\n                    canBeISO88591 = false;\n                }\n                else if (value > 0x9F) {\n                    if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n                        isoHighOther++;\n                    } // else {\n                    // isoHighChars++\n                    // }\n                } // else {\n                // isoLowChars++\n                // }\n            }\n            // Shift_JIS stuff\n            if (canBeShiftJIS) {\n                if (sjisBytesLeft > 0) {\n                    if (value < 0x40 || value === 0x7F || value > 0xFC) {\n                        canBeShiftJIS = false;\n                    }\n                    else {\n                        sjisBytesLeft--;\n                    }\n                }\n                else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n                    canBeShiftJIS = false;\n                }\n                else if (value > 0xA0 && value < 0xE0) {\n                    sjisKatakanaChars++;\n                    sjisCurDoubleBytesWordLength = 0;\n                    sjisCurKatakanaWordLength++;\n                    if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n                        sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n                    }\n                }\n                else if (value > 0x7F) {\n                    sjisBytesLeft++;\n                    // sjisDoubleBytesChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength++;\n                    if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n                        sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n                    }\n                }\n                else {\n                    // sjisLowChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength = 0;\n                }\n            }\n        }\n        if (canBeUTF8 && utf8BytesLeft > 0) {\n            canBeUTF8 = false;\n        }\n        if (canBeShiftJIS && sjisBytesLeft > 0) {\n            canBeShiftJIS = false;\n        }\n        // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n        if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n            return StringUtils.UTF8;\n        }\n        // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n        if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n            return StringUtils.SHIFT_JIS;\n        }\n        // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n        // - If we saw\n        //   - only two consecutive katakana chars in the whole text, or\n        //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n        // - then we conclude Shift_JIS, else ISO-8859-1\n        if (canBeISO88591 && canBeShiftJIS) {\n            return (sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2) || isoHighOther * 10 >= length\n                ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n        }\n        // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n        if (canBeISO88591) {\n            return StringUtils.ISO88591;\n        }\n        if (canBeShiftJIS) {\n            return StringUtils.SHIFT_JIS;\n        }\n        if (canBeUTF8) {\n            return StringUtils.UTF8;\n        }\n        // Otherwise, we take a wild guess with platform encoding\n        return StringUtils.PLATFORM_DEFAULT_ENCODING;\n    };\n    /**\n     *\n     * @see https://stackoverflow.com/a/13439711/4367683\n     *\n     * @param append The new string to append.\n     * @param args Argumets values to be formated.\n     */\n    StringUtils.format = function (append) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var i = -1;\n        function callback(exp, p0, p1, p2, p3, p4) {\n            if (exp === '%%')\n                return '%';\n            if (args[++i] === undefined)\n                return undefined;\n            exp = p2 ? parseInt(p2.substr(1)) : undefined;\n            var base = p3 ? parseInt(p3.substr(1)) : undefined;\n            var val;\n            switch (p4) {\n                case 's':\n                    val = args[i];\n                    break;\n                case 'c':\n                    val = args[i][0];\n                    break;\n                case 'f':\n                    val = parseFloat(args[i]).toFixed(exp);\n                    break;\n                case 'p':\n                    val = parseFloat(args[i]).toPrecision(exp);\n                    break;\n                case 'e':\n                    val = parseFloat(args[i]).toExponential(exp);\n                    break;\n                case 'x':\n                    val = parseInt(args[i]).toString(base ? base : 16);\n                    break;\n                case 'd':\n                    val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                    break;\n            }\n            val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n            var size = parseInt(p1); /* padding size */\n            var ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n            while (val.length < size)\n                val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n            return val;\n        }\n        var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n        return append.replace(regex, callback);\n    };\n    /**\n     *\n     */\n    StringUtils.getBytes = function (str, encoding) {\n        return StringEncoding_1.default.encode(str, encoding);\n    };\n    /**\n     * Returns the charcode at the specified index or at index zero.\n     */\n    StringUtils.getCharCode = function (str, index) {\n        if (index === void 0) { index = 0; }\n        return str.charCodeAt(index);\n    };\n    /**\n     * Returns char for given charcode\n     */\n    StringUtils.getCharAt = function (charCode) {\n        return String.fromCharCode(charCode);\n    };\n    StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n    StringUtils.GB2312 = 'GB2312';\n    StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n    StringUtils.EUC_JP = 'EUC_JP';\n    StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n    StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n    StringUtils.ASSUME_SHIFT_JIS = false;\n    return StringUtils;\n}());\nexports.default = StringUtils;\n//# sourceMappingURL=StringUtils.js.map"]},"metadata":{},"sourceType":"script"}