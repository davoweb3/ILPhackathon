{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BarcodeFormat_1 = require(\"../../../BarcodeFormat\");\nvar NotFoundException_1 = require(\"../../../NotFoundException\");\nvar Result_1 = require(\"../../../Result\");\nvar MathUtils_1 = require(\"../../../common/detector/MathUtils\");\nvar AbstractRSSReader_1 = require(\"../../rss/AbstractRSSReader\");\nvar DataCharacter_1 = require(\"../../rss/DataCharacter\");\nvar FinderPattern_1 = require(\"../../rss/FinderPattern\");\nvar RSSUtils_1 = require(\"../../rss/RSSUtils\");\nvar AbstractExpandedDecoderComplement_1 = require(\"./decoders/AbstractExpandedDecoderComplement\");\nvar ExpandedPair_1 = require(\"./ExpandedPair\");\nvar ExpandedRow_1 = require(\"./ExpandedRow\");\nvar BitArrayBuilder_1 = require(\"./BitArrayBuilder\");\nvar System_1 = require(\"../../../util/System\");\n// import java.util.ArrayList;\n// import java.util.Iterator;\n// import java.util.List;\n// import java.util.Map;\n// import java.util.Collections;\nvar RSSExpandedReader = /** @class */function (_super) {\n  __extends(RSSExpandedReader, _super);\n  function RSSExpandedReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n    _this.rows = new Array();\n    _this.startEnd = [2];\n    return _this;\n  }\n  RSSExpandedReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    // Rows can start with even pattern in case in prev rows there where odd number of patters.\n    // So lets try twice\n    //this.pairs.clear();\n    this.pairs.length = 0;\n    this.startFromEven = false;\n    try {\n      return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n    this.pairs.length = 0;\n    this.startFromEven = true;\n    return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n  };\n  RSSExpandedReader.prototype.reset = function () {\n    this.pairs.length = 0;\n    this.rows.length = 0;\n  };\n  // Not private for testing\n  RSSExpandedReader.prototype.decodeRow2pairs = function (rowNumber, row) {\n    var done = false;\n    while (!done) {\n      try {\n        this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n      } catch (NotFoundException) {\n        if (!this.pairs.length) {\n          throw new NotFoundException();\n        }\n        // exit this loop when retrieveNextPair() fails and throws\n        done = true;\n      }\n    }\n    // TODO: verify sequence of finder patterns as in checkPairSequence()\n    if (this.checkChecksum()) {\n      return this.pairs;\n    }\n    var tryStackedDecode;\n    if (this.rows.length) {\n      tryStackedDecode = true;\n    } else {\n      tryStackedDecode = false;\n    }\n    //let tryStackedDecode = !this.rows.isEmpty();\n    this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n    if (tryStackedDecode) {\n      // When the image is 180-rotated, then rows are sorted in wrong direction.\n      // Try twice with both the directions.\n      var ps = this.checkRowsBoolean(false);\n      if (ps != null) {\n        return ps;\n      }\n      ps = this.checkRowsBoolean(true);\n      if (ps != null) {\n        return ps;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  //Need to Verify\n  RSSExpandedReader.prototype.checkRowsBoolean = function (reverse) {\n    // Limit number of rows we are checking\n    // We use recursive algorithm with pure complexity and don't want it to take forever\n    // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n    if (this.rows.length > 25) {\n      this.rows.length = 0; // We will never have a chance to get result, so clear it\n      return null;\n    }\n    this.pairs.length = 0;\n    if (reverse) {\n      this.rows = this.rows.reverse();\n      //Collections.reverse(this.rows);\n    }\n\n    var ps = null;\n    try {\n      ps = this.checkRows(new Array(), 0);\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n    if (reverse) {\n      this.rows = this.rows.reverse();\n      //Collections.reverse(this.rows);\n    }\n\n    return ps;\n  };\n  // Try to construct a valid rows sequence\n  // Recursion is used to implement backtracking\n  RSSExpandedReader.prototype.checkRows = function (collectedRows, currentRow) {\n    var e_1, _a;\n    for (var i = currentRow; i < this.rows.length; i++) {\n      var row = this.rows[i];\n      this.pairs.length = 0;\n      try {\n        for (var collectedRows_1 = __values(collectedRows), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {\n          var collectedRow = collectedRows_1_1.value;\n          this.pairs.push(collectedRow.getPairs());\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (collectedRows_1_1 && !collectedRows_1_1.done && (_a = collectedRows_1.return)) _a.call(collectedRows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.pairs.push(row.getPairs());\n      if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n        continue;\n      }\n      if (this.checkChecksum()) {\n        return this.pairs;\n      }\n      var rs = new Array(collectedRows);\n      rs.push(row);\n      try {\n        // Recursion: try to add more rows\n        return this.checkRows(rs, i + 1);\n      } catch (e) {\n        // We failed, try the next candidate\n        console.log(e);\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  // Whether the pairs form a valid find pattern sequence,\n  // either complete or a prefix\n  RSSExpandedReader.isValidSequence = function (pairs) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(RSSExpandedReader.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sequence = _c.value;\n        if (pairs.length > sequence.length) {\n          continue;\n        }\n        var stop_1 = true;\n        for (var j = 0; j < pairs.length; j++) {\n          if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n            stop_1 = false;\n            break;\n          }\n        }\n        if (stop_1) {\n          return true;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return false;\n  };\n  RSSExpandedReader.prototype.storeRow = function (rowNumber, wasReversed) {\n    // Discard if duplicate above or below; otherwise insert in order by row number.\n    var insertPos = 0;\n    var prevIsSame = false;\n    var nextIsSame = false;\n    while (insertPos < this.rows.length) {\n      var erow = this.rows[insertPos];\n      if (erow.getRowNumber() > rowNumber) {\n        nextIsSame = erow.isEquivalent(this.pairs);\n        break;\n      }\n      prevIsSame = erow.isEquivalent(this.pairs);\n      insertPos++;\n    }\n    if (nextIsSame || prevIsSame) {\n      return;\n    }\n    // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n    // it will prevent us from detecting the barcode.\n    // Try to merge partial rows\n    // Check whether the row is part of an allready detected row\n    if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n      return;\n    }\n    this.rows.push(insertPos, new ExpandedRow_1.default(this.pairs, rowNumber, wasReversed));\n    this.removePartialRows(this.pairs, this.rows);\n  };\n  // Remove all the rows that contains only specified pairs\n  RSSExpandedReader.prototype.removePartialRows = function (pairs, rows) {\n    var e_3, _a, e_4, _b, e_5, _c;\n    try {\n      // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n      //   ExpandedRow r = iterator.next();\n      //   if (r.getPairs().size() == pairs.size()) {\n      //     continue;\n      //   }\n      //   boolean allFound = true;\n      //   for (ExpandedPair p : r.getPairs()) {\n      //     boolean found = false;\n      //     for (ExpandedPair pp : pairs) {\n      //       if (p.equals(pp)) {\n      //         found = true;\n      //         break;\n      //       }\n      //     }\n      //     if (!found) {\n      //       allFound = false;\n      //       break;\n      //     }\n      //   }\n      //   if (allFound) {\n      //     // 'pairs' contains all the pairs from the row 'r'\n      //     iterator.remove();\n      //   }\n      // }\n      for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n        var row = rows_1_1.value;\n        if (row.getPairs().length === pairs.length) {\n          continue;\n        }\n        var allFound = true;\n        try {\n          for (var _d = __values(row.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n            var p = _e.value;\n            var found = false;\n            try {\n              for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {\n                var pp = pairs_1_1.value;\n                if (ExpandedPair_1.default.equals(p, pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n            if (!found) {\n              allFound = false;\n            }\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  // Returns true when one of the rows already contains all the pairs\n  RSSExpandedReader.isPartialRow = function (pairs, rows) {\n    var e_6, _a, e_7, _b, e_8, _c;\n    try {\n      for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n        var r = rows_2_1.value;\n        var allFound = true;\n        try {\n          for (var pairs_2 = __values(pairs), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {\n            var p = pairs_2_1.value;\n            var found = false;\n            try {\n              for (var _d = __values(r.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var pp = _e.value;\n                if (p.equals(pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n            if (!found) {\n              allFound = false;\n              break;\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n        if (allFound) {\n          // the row 'r' contain all the pairs from 'pairs'\n          return true;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    return false;\n  };\n  // Only used for unit testing\n  RSSExpandedReader.prototype.getRows = function () {\n    return this.rows;\n  };\n  // Not private for unit testing\n  RSSExpandedReader.constructResult = function (pairs) {\n    var binary = BitArrayBuilder_1.default.buildBitArray(pairs);\n    var decoder = AbstractExpandedDecoderComplement_1.createDecoder(binary);\n    var resultingString = decoder.parseInformation();\n    var firstPoints = pairs[0].getFinderPattern().getResultPoints();\n    var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n    var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n    return new Result_1.default(resultingString, null, null, points, BarcodeFormat_1.default.RSS_EXPANDED, null);\n  };\n  RSSExpandedReader.prototype.checkChecksum = function () {\n    var firstPair = this.pairs.get(0);\n    var checkCharacter = firstPair.getLeftChar();\n    var firstCharacter = firstPair.getRightChar();\n    if (firstCharacter == null) {\n      return false;\n    }\n    var checksum = firstCharacter.getChecksumPortion();\n    var s = 2;\n    for (var i = 1; i < this.pairs.size(); ++i) {\n      var currentPair = this.pairs.get(i);\n      checksum += currentPair.getLeftChar().getChecksumPortion();\n      s++;\n      var currentRightChar = currentPair.getRightChar();\n      if (currentRightChar != null) {\n        checksum += currentRightChar.getChecksumPortion();\n        s++;\n      }\n    }\n    checksum %= 211;\n    var checkCharacterValue = 211 * (s - 4) + checksum;\n    return checkCharacterValue == checkCharacter.getValue();\n  };\n  RSSExpandedReader.getNextSecondBar = function (row, initialPos) {\n    var currentPos;\n    if (row.get(initialPos)) {\n      currentPos = row.getNextUnset(initialPos);\n      currentPos = row.getNextSet(currentPos);\n    } else {\n      currentPos = row.getNextSet(initialPos);\n      currentPos = row.getNextUnset(currentPos);\n    }\n    return currentPos;\n  };\n  // not private for testing\n  RSSExpandedReader.prototype.retrieveNextPair = function (row, previousPairs, rowNumber) {\n    var isOddPattern = previousPairs.length % 2 == 0;\n    if (this.startFromEven) {\n      isOddPattern = !isOddPattern;\n    }\n    var pattern;\n    var keepFinding = true;\n    var forcedOffset = -1;\n    do {\n      this.findNextPair(row, previousPairs, forcedOffset);\n      pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n      if (pattern == null) {\n        forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n      } else {\n        keepFinding = false;\n      }\n    } while (keepFinding);\n    // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n    // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n    var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n    if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n      throw new NotFoundException_1.default();\n    }\n    var rightChar;\n    try {\n      rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n    } catch (e) {\n      rightChar = null;\n      console.log(e);\n    }\n    return new ExpandedPair_1.default(leftChar, rightChar, pattern, true);\n  };\n  RSSExpandedReader.prototype.isEmptyPair = function (pairs) {\n    if (pairs.length === 0) {\n      return true;\n    }\n    return false;\n  };\n  RSSExpandedReader.prototype.findNextPair = function (row, previousPairs, forcedOffset) {\n    var counters = this.getDecodeFinderCounters();\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var width = row.getSize();\n    var rowOffset;\n    if (forcedOffset >= 0) {\n      rowOffset = forcedOffset;\n    } else if (this.isEmptyPair(previousPairs)) {\n      rowOffset = 0;\n    } else {\n      var lastPair = previousPairs[previousPairs.length - 1];\n      rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n    }\n    var searchingEvenPair = previousPairs.length % 2 != 0;\n    if (this.startFromEven) {\n      searchingEvenPair = !searchingEvenPair;\n    }\n    var isWhite = false;\n    while (rowOffset < width) {\n      isWhite = !row.get(rowOffset);\n      if (!isWhite) {\n        break;\n      }\n      rowOffset++;\n    }\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    for (var x = rowOffset; x < width; x++) {\n      if (row.get(x) != isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition == 3) {\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n          if (RSSExpandedReader.isFinderPattern(counters)) {\n            this.startEnd[0] = patternStart;\n            this.startEnd[1] = x;\n            return;\n          }\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n          patternStart += counters[0] + counters[1];\n          counters[0] = counters[2];\n          counters[1] = counters[3];\n          counters[2] = 0;\n          counters[3] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  RSSExpandedReader.reverseCounters = function (counters) {\n    var length = counters.length;\n    for (var i = 0; i < length / 2; ++i) {\n      var tmp = counters[i];\n      counters[i] = counters[length - i - 1];\n      counters[length - i - 1] = tmp;\n    }\n  };\n  RSSExpandedReader.prototype.parseFoundFinderPattern = function (row, rowNumber, oddPattern) {\n    // Actually we found elements 2-5.\n    var firstCounter;\n    var start;\n    var end;\n    if (oddPattern) {\n      // If pattern number is odd, we need to locate element 1 *before* the current block.\n      var firstElementStart = this.startEnd[0] - 1;\n      // Locate element 1\n      while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n        firstElementStart--;\n      }\n      firstElementStart++;\n      firstCounter = this.startEnd[0] - firstElementStart;\n      start = firstElementStart;\n      end = this.startEnd[1];\n    } else {\n      // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n      start = this.startEnd[0];\n      end = row.getNextUnset(this.startEnd[1] + 1);\n      firstCounter = end - this.startEnd[1];\n    }\n    // Make 'counters' hold 1-4\n    var counters = this.getDecodeFinderCounters();\n    System_1.default.arraycopy(counters, 0, counters, 1, counters.length - 1);\n    counters[0] = firstCounter;\n    var value;\n    try {\n      value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n    } catch (e) {\n      return null;\n      console.log(e);\n    }\n    //return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n    return new FinderPattern_1.default(value, [start, end], start, end, rowNumber);\n  };\n  RSSExpandedReader.prototype.decodeDataCharacter = function (row, pattern, isOddPattern, leftChar) {\n    var counters = this.getDataCharacterCounters();\n    for (var x = 0; x < counters.length; x++) {\n      counters[x] = 0;\n    }\n    if (leftChar) {\n      RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n    } else {\n      RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters);\n      // reverse it\n      for (var i = 0, j = counters.length - 1; i < j; i++, j--) {\n        var temp = counters[i];\n        counters[i] = counters[j];\n        counters[j] = temp;\n      }\n    } //counters[] has the pixels of the module\n    var numModules = 17; //left and right data characters have all the same length\n    var elementWidth = MathUtils_1.default.sum(new Int32Array(counters)) / numModules;\n    // Sanity check: element width for pattern and the character should match\n    var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n    if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n      throw new NotFoundException_1.default();\n    }\n    var oddCounts = this.getOddCounts();\n    var evenCounts = this.getEvenCounts();\n    var oddRoundingErrors = this.getOddRoundingErrors();\n    var evenRoundingErrors = this.getEvenRoundingErrors();\n    for (var i = 0; i < counters.length; i++) {\n      var value_1 = 1.0 * counters[i] / elementWidth;\n      var count = value_1 + 0.5; // Round\n      if (count < 1) {\n        if (value_1 < 0.3) {\n          throw new NotFoundException_1.default();\n        }\n        count = 1;\n      } else if (count > 8) {\n        if (value_1 > 8.7) {\n          throw new NotFoundException_1.default();\n        }\n        count = 8;\n      }\n      var offset = i / 2;\n      if ((i & 0x01) == 0) {\n        oddCounts[offset] = count;\n        oddRoundingErrors[offset] = value_1 - count;\n      } else {\n        evenCounts[offset] = count;\n        evenRoundingErrors[offset] = value_1 - count;\n      }\n    }\n    this.adjustOddEvenCounts(numModules);\n    var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n    var oddSum = 0;\n    var oddChecksumPortion = 0;\n    for (var i = oddCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n        oddChecksumPortion += oddCounts[i] * weight;\n      }\n      oddSum += oddCounts[i];\n    }\n    var evenChecksumPortion = 0;\n    //int evenSum = 0;\n    for (var i = evenCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n        evenChecksumPortion += evenCounts[i] * weight;\n      }\n      //evenSum += evenCounts[i];\n    }\n\n    var checksumPortion = oddChecksumPortion + evenChecksumPortion;\n    if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n      throw new NotFoundException_1.default();\n    }\n    var group = (13 - oddSum) / 2;\n    var oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n    var evenWidest = 9 - oddWidest;\n    var vOdd = RSSUtils_1.default.getRSSvalue(oddCounts, oddWidest, true);\n    var vEven = RSSUtils_1.default.getRSSvalue(evenCounts, evenWidest, false);\n    var tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n    var gSum = RSSExpandedReader.GSUM[group];\n    var value = vOdd * tEven + vEven + gSum;\n    return new DataCharacter_1.default(value, checksumPortion);\n  };\n  RSSExpandedReader.isNotA1left = function (pattern, isOddPattern, leftChar) {\n    // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n    return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n  };\n  RSSExpandedReader.prototype.adjustOddEvenCounts = function (numModules) {\n    var oddSum = MathUtils_1.default.sum(new Int32Array(this.getOddCounts()));\n    var evenSum = MathUtils_1.default.sum(new Int32Array(this.getEvenCounts()));\n    var incrementOdd = false;\n    var decrementOdd = false;\n    if (oddSum > 13) {\n      decrementOdd = true;\n    } else if (oddSum < 4) {\n      incrementOdd = true;\n    }\n    var incrementEven = false;\n    var decrementEven = false;\n    if (evenSum > 13) {\n      decrementEven = true;\n    } else if (evenSum < 4) {\n      incrementEven = true;\n    }\n    var mismatch = oddSum + evenSum - numModules;\n    var oddParityBad = (oddSum & 0x01) == 1;\n    var evenParityBad = (evenSum & 0x01) == 0;\n    if (mismatch == 1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        decrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        decrementEven = true;\n      }\n    } else if (mismatch == -1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        incrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        incrementEven = true;\n      }\n    } else if (mismatch == 0) {\n      if (oddParityBad) {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        // Both bad\n        if (oddSum < evenSum) {\n          incrementOdd = true;\n          decrementEven = true;\n        } else {\n          decrementOdd = true;\n          incrementEven = true;\n        }\n      } else {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        // Nothing to do!\n      }\n    } else {\n      throw new NotFoundException_1.default();\n    }\n    if (incrementOdd) {\n      if (decrementOdd) {\n        throw new NotFoundException_1.default();\n      }\n      RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n    if (decrementOdd) {\n      RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n    if (incrementEven) {\n      if (decrementEven) {\n        throw new NotFoundException_1.default();\n      }\n      RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n    }\n    if (decrementEven) {\n      RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n    }\n  };\n  RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n  RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n  RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n  RSSExpandedReader.FINDER_PATTERNS = [[1, 8, 4, 1], [3, 6, 4, 1], [3, 4, 6, 1], [3, 2, 8, 1], [2, 6, 5, 1], [2, 2, 9, 1] // F\n  ];\n\n  RSSExpandedReader.WEIGHTS = [[1, 3, 9, 27, 81, 32, 96, 77], [20, 60, 180, 118, 143, 7, 21, 63], [189, 145, 13, 39, 117, 140, 209, 205], [193, 157, 49, 147, 19, 57, 171, 91], [62, 186, 136, 197, 169, 85, 44, 132], [185, 133, 188, 142, 4, 12, 36, 108], [113, 128, 173, 97, 80, 29, 87, 50], [150, 28, 84, 41, 123, 158, 52, 156], [46, 138, 203, 187, 139, 206, 196, 166], [76, 17, 51, 153, 37, 111, 122, 155], [43, 129, 176, 106, 107, 110, 119, 146], [16, 48, 144, 10, 30, 90, 59, 177], [109, 116, 137, 200, 178, 112, 125, 164], [70, 210, 208, 202, 184, 130, 179, 115], [134, 191, 151, 31, 93, 68, 204, 190], [148, 22, 66, 198, 172, 94, 71, 2], [6, 18, 54, 162, 64, 192, 154, 40], [120, 149, 25, 75, 14, 42, 126, 167], [79, 26, 78, 23, 69, 207, 199, 175], [103, 98, 83, 38, 114, 131, 182, 124], [161, 61, 183, 127, 170, 88, 53, 159], [55, 165, 73, 8, 24, 72, 5, 15], [45, 135, 194, 160, 58, 174, 100, 89]];\n  RSSExpandedReader.FINDER_PAT_A = 0;\n  RSSExpandedReader.FINDER_PAT_B = 1;\n  RSSExpandedReader.FINDER_PAT_C = 2;\n  RSSExpandedReader.FINDER_PAT_D = 3;\n  RSSExpandedReader.FINDER_PAT_E = 4;\n  RSSExpandedReader.FINDER_PAT_F = 5;\n  RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [[RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F]];\n  RSSExpandedReader.MAX_PAIRS = 11;\n  return RSSExpandedReader;\n}(AbstractRSSReader_1.default);\nexports.default = RSSExpandedReader;","map":{"version":3,"names":["BarcodeFormat_1","require","NotFoundException_1","Result_1","MathUtils_1","AbstractRSSReader_1","DataCharacter_1","FinderPattern_1","RSSUtils_1","AbstractExpandedDecoderComplement_1","ExpandedPair_1","ExpandedRow_1","BitArrayBuilder_1","System_1","RSSExpandedReader","_super","__extends","_this","apply","arguments","pairs","Array","MAX_PAIRS","rows","startEnd","prototype","decodeRow","rowNumber","row","hints","length","startFromEven","constructResult","decodeRow2pairs","e","console","log","reset","done","push","retrieveNextPair","NotFoundException","checkChecksum","tryStackedDecode","storeRow","ps","checkRowsBoolean","default","reverse","checkRows","collectedRows","currentRow","i","collectedRows_1","__values","collectedRows_1_1","next","collectedRow","value","getPairs","isValidSequence","rs","_b","FINDER_PATTERN_SEQUENCES","_c","sequence","stop_1","j","getFinderPattern","getValue","wasReversed","insertPos","prevIsSame","nextIsSame","erow","getRowNumber","isEquivalent","isPartialRow","removePartialRows","rows_1","rows_1_1","allFound","_d","_e","p","found","pairs_1","pairs_1_1","pp","equals","rows_2","rows_2_1","r","pairs_2","pairs_2_1","getRows","binary","buildBitArray","decoder","createDecoder","resultingString","parseInformation","firstPoints","getResultPoints","lastPoints","points","RSS_EXPANDED","firstPair","get","checkCharacter","getLeftChar","firstCharacter","getRightChar","checksum","getChecksumPortion","s","size","currentPair","currentRightChar","checkCharacterValue","getNextSecondBar","initialPos","currentPos","getNextUnset","getNextSet","previousPairs","isOddPattern","pattern","keepFinding","forcedOffset","findNextPair","parseFoundFinderPattern","leftChar","decodeDataCharacter","isEmptyPair","mustBeLast","rightChar","counters","getDecodeFinderCounters","width","getSize","rowOffset","lastPair","getStartEnd","searchingEvenPair","isWhite","counterPosition","patternStart","x","reverseCounters","isFinderPattern","tmp","oddPattern","firstCounter","start","end","firstElementStart","arraycopy","parseFinderValue","FINDER_PATTERNS","getDataCharacterCounters","recordPatternInReverse","recordPattern","temp","numModules","elementWidth","sum","Int32Array","expectedElementWidth","Math","abs","oddCounts","getOddCounts","evenCounts","getEvenCounts","oddRoundingErrors","getOddRoundingErrors","evenRoundingErrors","getEvenRoundingErrors","value_1","count","offset","adjustOddEvenCounts","weightRowNumber","oddSum","oddChecksumPortion","isNotA1left","weight","WEIGHTS","evenChecksumPortion","checksumPortion","group","oddWidest","SYMBOL_WIDEST","evenWidest","vOdd","getRSSvalue","vEven","tEven","EVEN_TOTAL_SUBSET","gSum","GSUM","evenSum","incrementOdd","decrementOdd","incrementEven","decrementEven","mismatch","oddParityBad","evenParityBad","increment","decrement","FINDER_PAT_A","FINDER_PAT_B","FINDER_PAT_C","FINDER_PAT_D","FINDER_PAT_E","FINDER_PAT_F"],"sources":["../../../../../src/core/oned/rss/expanded/RSSExpandedReader.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}