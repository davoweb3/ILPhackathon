{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar System_1 = require(\"../../util/System\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Represents a polynomial whose coefficients are elements of a GF.\n * Instances of this class are immutable.</p>\n *\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n * port of his C++ Reed-Solomon implementation.</p>\n *\n * @author Sean Owen\n */\nvar GenericGFPoly = /** @class */function () {\n  /**\n   * @param field the {@link GenericGF} instance representing the field to use\n   * to perform computations\n   * @param coefficients coefficients as ints representing elements of GF(size), arranged\n   * from most significant (highest-power term) coefficient to least significant\n   * @throws IllegalArgumentException if argument is null or empty,\n   * or if leading coefficient is 0 and this is not a\n   * constant polynomial (that is, it is not the monomial \"0\")\n   */\n  function GenericGFPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    this.field = field;\n    var coefficientsLength = coefficients.length;\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = 1;\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = Int32Array.from([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n  GenericGFPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\n   * @return degree of this polynomial\n   */\n  GenericGFPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\n   * @return true iff this polynomial is the monomial \"0\"\n   */\n  GenericGFPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\n   * @return coefficient of x^degree term in this polynomial\n   */\n  GenericGFPoly.prototype.getCoefficient = function (degree /*int*/) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\n   * @return evaluation of this polynomial at a given point\n   */\n  GenericGFPoly.prototype.evaluateAt = function (a /*int*/) {\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    var coefficients = this.coefficients;\n    var result;\n    if (a === 1) {\n      // Just the sum of the coefficients\n      result = 0;\n      for (var i = 0, length_1 = coefficients.length; i !== length_1; i++) {\n        var coefficient = coefficients[i];\n        result = AbstractGenericGF_1.default.addOrSubtract(result, coefficient);\n      }\n      return result;\n    }\n    result = coefficients[0];\n    var size = coefficients.length;\n    var field = this.field;\n    for (var i = 1; i < size; i++) {\n      result = AbstractGenericGF_1.default.addOrSubtract(field.multiply(a, result), coefficients[i]);\n    }\n    return result;\n  };\n  GenericGFPoly.prototype.addOrSubtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n    if (this.isZero()) {\n      return other;\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = AbstractGenericGF_1.default.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new GenericGFPoly(this.field, sumDiff);\n  };\n  GenericGFPoly.prototype.multiply = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n    if (this.isZero() || other.isZero()) {\n      return this.field.getZero();\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    var field = this.field;\n    for (var i = 0; i < aLength; i++) {\n      var aCoeff = aCoefficients[i];\n      for (var j = 0; j < bLength; j++) {\n        product[i + j] = AbstractGenericGF_1.default.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.multiplyScalar = function (scalar /*int*/) {\n    if (scalar === 0) {\n      return this.field.getZero();\n    }\n    if (scalar === 1) {\n      return this;\n    }\n    var size = this.coefficients.length;\n    var field = this.field;\n    var product = new Int32Array(size);\n    var coefficients = this.coefficients;\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], scalar);\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.multiplyByMonomial = function (degree /*int*/, coefficient /*int*/) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    if (coefficient === 0) {\n      return this.field.getZero();\n    }\n    var coefficients = this.coefficients;\n    var size = coefficients.length;\n    var product = new Int32Array(size + degree);\n    var field = this.field;\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], coefficient);\n    }\n    return new GenericGFPoly(field, product);\n  };\n  GenericGFPoly.prototype.divide = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n    if (other.isZero()) {\n      throw new IllegalArgumentException_1.default('Divide by 0');\n    }\n    var field = this.field;\n    var quotient = field.getZero();\n    var remainder = this;\n    var denominatorLeadingTerm = other.getCoefficient(other.getDegree());\n    var inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\n    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      var degreeDifference = remainder.getDegree() - other.getDegree();\n      var scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      var term = other.multiplyByMonomial(degreeDifference, scale);\n      var iterationQuotient = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.addOrSubtract(iterationQuotient);\n      remainder = remainder.addOrSubtract(term);\n    }\n    return [quotient, remainder];\n  };\n  /*@Override*/\n  GenericGFPoly.prototype.toString = function () {\n    var result = '';\n    for (var degree = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = this.getCoefficient(degree);\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result += ' - ';\n          coefficient = -coefficient;\n        } else {\n          if (result.length > 0) {\n            result += ' + ';\n          }\n        }\n        if (degree === 0 || coefficient !== 1) {\n          var alphaPower = this.field.log(coefficient);\n          if (alphaPower === 0) {\n            result += '1';\n          } else if (alphaPower === 1) {\n            result += 'a';\n          } else {\n            result += 'a^';\n            result += alphaPower;\n          }\n        }\n        if (degree !== 0) {\n          if (degree === 1) {\n            result += 'x';\n          } else {\n            result += 'x^';\n            result += degree;\n          }\n        }\n      }\n    }\n    return result;\n  };\n  return GenericGFPoly;\n}();\nexports.default = GenericGFPoly;","map":{"version":3,"names":["AbstractGenericGF_1","require","System_1","IllegalArgumentException_1","GenericGFPoly","field","coefficients","length","default","coefficientsLength","firstNonZero","Int32Array","from","arraycopy","prototype","getCoefficients","getDegree","isZero","getCoefficient","degree","evaluateAt","a","result","i","length_1","coefficient","addOrSubtract","size","multiply","other","equals","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","getZero","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","multiplyScalar","scalar","multiplyByMonomial","divide","quotient","remainder","denominatorLeadingTerm","inverseDenominatorLeadingTerm","inverse","degreeDifference","scale","term","iterationQuotient","buildMonomial","toString","alphaPower","log"],"sources":["../../../../src/core/common/reedsolomon/GenericGFPoly.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}