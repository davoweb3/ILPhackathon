{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BarcodeFormat_1 = require(\"../../../BarcodeFormat\");\nvar NotFoundException_1 = require(\"../../../NotFoundException\");\nvar Result_1 = require(\"../../../Result\");\nvar MathUtils_1 = require(\"../../../common/detector/MathUtils\");\nvar AbstractRSSReader_1 = require(\"../../rss/AbstractRSSReader\");\nvar DataCharacter_1 = require(\"../../rss/DataCharacter\");\nvar FinderPattern_1 = require(\"../../rss/FinderPattern\");\nvar RSSUtils_1 = require(\"../../rss/RSSUtils\");\nvar AbstractExpandedDecoderComplement_1 = require(\"./decoders/AbstractExpandedDecoderComplement\");\nvar ExpandedPair_1 = require(\"./ExpandedPair\");\nvar ExpandedRow_1 = require(\"./ExpandedRow\");\nvar BitArrayBuilder_1 = require(\"./BitArrayBuilder\");\nvar System_1 = require(\"../../../util/System\");\n// import java.util.ArrayList;\n// import java.util.Iterator;\n// import java.util.List;\n// import java.util.Map;\n// import java.util.Collections;\nvar RSSExpandedReader = /** @class */function (_super) {\n  __extends(RSSExpandedReader, _super);\n  function RSSExpandedReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n    _this.rows = new Array();\n    _this.startEnd = [2];\n    return _this;\n  }\n  RSSExpandedReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    // Rows can start with even pattern in case in prev rows there where odd number of patters.\n    // So lets try twice\n    //this.pairs.clear();\n    this.pairs.length = 0;\n    this.startFromEven = false;\n    try {\n      return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n    this.pairs.length = 0;\n    this.startFromEven = true;\n    return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n  };\n  RSSExpandedReader.prototype.reset = function () {\n    this.pairs.length = 0;\n    this.rows.length = 0;\n  };\n  // Not private for testing\n  RSSExpandedReader.prototype.decodeRow2pairs = function (rowNumber, row) {\n    var done = false;\n    while (!done) {\n      try {\n        this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n      } catch (NotFoundException) {\n        if (!this.pairs.length) {\n          throw new NotFoundException();\n        }\n        // exit this loop when retrieveNextPair() fails and throws\n        done = true;\n      }\n    }\n    // TODO: verify sequence of finder patterns as in checkPairSequence()\n    if (this.checkChecksum()) {\n      return this.pairs;\n    }\n    var tryStackedDecode;\n    if (this.rows.length) {\n      tryStackedDecode = true;\n    } else {\n      tryStackedDecode = false;\n    }\n    //let tryStackedDecode = !this.rows.isEmpty();\n    this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n    if (tryStackedDecode) {\n      // When the image is 180-rotated, then rows are sorted in wrong direction.\n      // Try twice with both the directions.\n      var ps = this.checkRowsBoolean(false);\n      if (ps != null) {\n        return ps;\n      }\n      ps = this.checkRowsBoolean(true);\n      if (ps != null) {\n        return ps;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  //Need to Verify\n  RSSExpandedReader.prototype.checkRowsBoolean = function (reverse) {\n    // Limit number of rows we are checking\n    // We use recursive algorithm with pure complexity and don't want it to take forever\n    // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n    if (this.rows.length > 25) {\n      this.rows.length = 0; // We will never have a chance to get result, so clear it\n      return null;\n    }\n    this.pairs.length = 0;\n    if (reverse) {\n      this.rows = this.rows.reverse();\n      //Collections.reverse(this.rows);\n    }\n\n    var ps = null;\n    try {\n      ps = this.checkRows(new Array(), 0);\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n    if (reverse) {\n      this.rows = this.rows.reverse();\n      //Collections.reverse(this.rows);\n    }\n\n    return ps;\n  };\n  // Try to construct a valid rows sequence\n  // Recursion is used to implement backtracking\n  RSSExpandedReader.prototype.checkRows = function (collectedRows, currentRow) {\n    var e_1, _a;\n    for (var i = currentRow; i < this.rows.length; i++) {\n      var row = this.rows[i];\n      this.pairs.length = 0;\n      try {\n        for (var collectedRows_1 = __values(collectedRows), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {\n          var collectedRow = collectedRows_1_1.value;\n          this.pairs.push(collectedRow.getPairs());\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (collectedRows_1_1 && !collectedRows_1_1.done && (_a = collectedRows_1.return)) _a.call(collectedRows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.pairs.push(row.getPairs());\n      if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n        continue;\n      }\n      if (this.checkChecksum()) {\n        return this.pairs;\n      }\n      var rs = new Array(collectedRows);\n      rs.push(row);\n      try {\n        // Recursion: try to add more rows\n        return this.checkRows(rs, i + 1);\n      } catch (e) {\n        // We failed, try the next candidate\n        console.log(e);\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  // Whether the pairs form a valid find pattern sequence,\n  // either complete or a prefix\n  RSSExpandedReader.isValidSequence = function (pairs) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(RSSExpandedReader.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sequence = _c.value;\n        if (pairs.length > sequence.length) {\n          continue;\n        }\n        var stop_1 = true;\n        for (var j = 0; j < pairs.length; j++) {\n          if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n            stop_1 = false;\n            break;\n          }\n        }\n        if (stop_1) {\n          return true;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return false;\n  };\n  RSSExpandedReader.prototype.storeRow = function (rowNumber, wasReversed) {\n    // Discard if duplicate above or below; otherwise insert in order by row number.\n    var insertPos = 0;\n    var prevIsSame = false;\n    var nextIsSame = false;\n    while (insertPos < this.rows.length) {\n      var erow = this.rows[insertPos];\n      if (erow.getRowNumber() > rowNumber) {\n        nextIsSame = erow.isEquivalent(this.pairs);\n        break;\n      }\n      prevIsSame = erow.isEquivalent(this.pairs);\n      insertPos++;\n    }\n    if (nextIsSame || prevIsSame) {\n      return;\n    }\n    // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n    // it will prevent us from detecting the barcode.\n    // Try to merge partial rows\n    // Check whether the row is part of an allready detected row\n    if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n      return;\n    }\n    this.rows.push(insertPos, new ExpandedRow_1.default(this.pairs, rowNumber, wasReversed));\n    this.removePartialRows(this.pairs, this.rows);\n  };\n  // Remove all the rows that contains only specified pairs\n  RSSExpandedReader.prototype.removePartialRows = function (pairs, rows) {\n    var e_3, _a, e_4, _b, e_5, _c;\n    try {\n      // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n      //   ExpandedRow r = iterator.next();\n      //   if (r.getPairs().size() == pairs.size()) {\n      //     continue;\n      //   }\n      //   boolean allFound = true;\n      //   for (ExpandedPair p : r.getPairs()) {\n      //     boolean found = false;\n      //     for (ExpandedPair pp : pairs) {\n      //       if (p.equals(pp)) {\n      //         found = true;\n      //         break;\n      //       }\n      //     }\n      //     if (!found) {\n      //       allFound = false;\n      //       break;\n      //     }\n      //   }\n      //   if (allFound) {\n      //     // 'pairs' contains all the pairs from the row 'r'\n      //     iterator.remove();\n      //   }\n      // }\n      for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n        var row = rows_1_1.value;\n        if (row.getPairs().length === pairs.length) {\n          continue;\n        }\n        var allFound = true;\n        try {\n          for (var _d = __values(row.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n            var p = _e.value;\n            var found = false;\n            try {\n              for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {\n                var pp = pairs_1_1.value;\n                if (ExpandedPair_1.default.equals(p, pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n            if (!found) {\n              allFound = false;\n            }\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  // Returns true when one of the rows already contains all the pairs\n  RSSExpandedReader.isPartialRow = function (pairs, rows) {\n    var e_6, _a, e_7, _b, e_8, _c;\n    try {\n      for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n        var r = rows_2_1.value;\n        var allFound = true;\n        try {\n          for (var pairs_2 = __values(pairs), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {\n            var p = pairs_2_1.value;\n            var found = false;\n            try {\n              for (var _d = __values(r.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var pp = _e.value;\n                if (p.equals(pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n            if (!found) {\n              allFound = false;\n              break;\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n        if (allFound) {\n          // the row 'r' contain all the pairs from 'pairs'\n          return true;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    return false;\n  };\n  // Only used for unit testing\n  RSSExpandedReader.prototype.getRows = function () {\n    return this.rows;\n  };\n  // Not private for unit testing\n  RSSExpandedReader.constructResult = function (pairs) {\n    var binary = BitArrayBuilder_1.default.buildBitArray(pairs);\n    var decoder = AbstractExpandedDecoderComplement_1.createDecoder(binary);\n    var resultingString = decoder.parseInformation();\n    var firstPoints = pairs[0].getFinderPattern().getResultPoints();\n    var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n    var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n    return new Result_1.default(resultingString, null, null, points, BarcodeFormat_1.default.RSS_EXPANDED, null);\n  };\n  RSSExpandedReader.prototype.checkChecksum = function () {\n    var firstPair = this.pairs.get(0);\n    var checkCharacter = firstPair.getLeftChar();\n    var firstCharacter = firstPair.getRightChar();\n    if (firstCharacter == null) {\n      return false;\n    }\n    var checksum = firstCharacter.getChecksumPortion();\n    var s = 2;\n    for (var i = 1; i < this.pairs.size(); ++i) {\n      var currentPair = this.pairs.get(i);\n      checksum += currentPair.getLeftChar().getChecksumPortion();\n      s++;\n      var currentRightChar = currentPair.getRightChar();\n      if (currentRightChar != null) {\n        checksum += currentRightChar.getChecksumPortion();\n        s++;\n      }\n    }\n    checksum %= 211;\n    var checkCharacterValue = 211 * (s - 4) + checksum;\n    return checkCharacterValue == checkCharacter.getValue();\n  };\n  RSSExpandedReader.getNextSecondBar = function (row, initialPos) {\n    var currentPos;\n    if (row.get(initialPos)) {\n      currentPos = row.getNextUnset(initialPos);\n      currentPos = row.getNextSet(currentPos);\n    } else {\n      currentPos = row.getNextSet(initialPos);\n      currentPos = row.getNextUnset(currentPos);\n    }\n    return currentPos;\n  };\n  // not private for testing\n  RSSExpandedReader.prototype.retrieveNextPair = function (row, previousPairs, rowNumber) {\n    var isOddPattern = previousPairs.length % 2 == 0;\n    if (this.startFromEven) {\n      isOddPattern = !isOddPattern;\n    }\n    var pattern;\n    var keepFinding = true;\n    var forcedOffset = -1;\n    do {\n      this.findNextPair(row, previousPairs, forcedOffset);\n      pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n      if (pattern == null) {\n        forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n      } else {\n        keepFinding = false;\n      }\n    } while (keepFinding);\n    // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n    // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n    var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n    if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n      throw new NotFoundException_1.default();\n    }\n    var rightChar;\n    try {\n      rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n    } catch (e) {\n      rightChar = null;\n      console.log(e);\n    }\n    return new ExpandedPair_1.default(leftChar, rightChar, pattern, true);\n  };\n  RSSExpandedReader.prototype.isEmptyPair = function (pairs) {\n    if (pairs.length === 0) {\n      return true;\n    }\n    return false;\n  };\n  RSSExpandedReader.prototype.findNextPair = function (row, previousPairs, forcedOffset) {\n    var counters = this.getDecodeFinderCounters();\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var width = row.getSize();\n    var rowOffset;\n    if (forcedOffset >= 0) {\n      rowOffset = forcedOffset;\n    } else if (this.isEmptyPair(previousPairs)) {\n      rowOffset = 0;\n    } else {\n      var lastPair = previousPairs[previousPairs.length - 1];\n      rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n    }\n    var searchingEvenPair = previousPairs.length % 2 != 0;\n    if (this.startFromEven) {\n      searchingEvenPair = !searchingEvenPair;\n    }\n    var isWhite = false;\n    while (rowOffset < width) {\n      isWhite = !row.get(rowOffset);\n      if (!isWhite) {\n        break;\n      }\n      rowOffset++;\n    }\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    for (var x = rowOffset; x < width; x++) {\n      if (row.get(x) != isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition == 3) {\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n          if (RSSExpandedReader.isFinderPattern(counters)) {\n            this.startEnd[0] = patternStart;\n            this.startEnd[1] = x;\n            return;\n          }\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n          patternStart += counters[0] + counters[1];\n          counters[0] = counters[2];\n          counters[1] = counters[3];\n          counters[2] = 0;\n          counters[3] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException_1.default();\n  };\n  RSSExpandedReader.reverseCounters = function (counters) {\n    var length = counters.length;\n    for (var i = 0; i < length / 2; ++i) {\n      var tmp = counters[i];\n      counters[i] = counters[length - i - 1];\n      counters[length - i - 1] = tmp;\n    }\n  };\n  RSSExpandedReader.prototype.parseFoundFinderPattern = function (row, rowNumber, oddPattern) {\n    // Actually we found elements 2-5.\n    var firstCounter;\n    var start;\n    var end;\n    if (oddPattern) {\n      // If pattern number is odd, we need to locate element 1 *before* the current block.\n      var firstElementStart = this.startEnd[0] - 1;\n      // Locate element 1\n      while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n        firstElementStart--;\n      }\n      firstElementStart++;\n      firstCounter = this.startEnd[0] - firstElementStart;\n      start = firstElementStart;\n      end = this.startEnd[1];\n    } else {\n      // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n      start = this.startEnd[0];\n      end = row.getNextUnset(this.startEnd[1] + 1);\n      firstCounter = end - this.startEnd[1];\n    }\n    // Make 'counters' hold 1-4\n    var counters = this.getDecodeFinderCounters();\n    System_1.default.arraycopy(counters, 0, counters, 1, counters.length - 1);\n    counters[0] = firstCounter;\n    var value;\n    try {\n      value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n    } catch (e) {\n      return null;\n      console.log(e);\n    }\n    //return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n    return new FinderPattern_1.default(value, [start, end], start, end, rowNumber);\n  };\n  RSSExpandedReader.prototype.decodeDataCharacter = function (row, pattern, isOddPattern, leftChar) {\n    var counters = this.getDataCharacterCounters();\n    for (var x = 0; x < counters.length; x++) {\n      counters[x] = 0;\n    }\n    if (leftChar) {\n      RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n    } else {\n      RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters);\n      // reverse it\n      for (var i = 0, j = counters.length - 1; i < j; i++, j--) {\n        var temp = counters[i];\n        counters[i] = counters[j];\n        counters[j] = temp;\n      }\n    } //counters[] has the pixels of the module\n    var numModules = 17; //left and right data characters have all the same length\n    var elementWidth = MathUtils_1.default.sum(new Int32Array(counters)) / numModules;\n    // Sanity check: element width for pattern and the character should match\n    var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n    if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n      throw new NotFoundException_1.default();\n    }\n    var oddCounts = this.getOddCounts();\n    var evenCounts = this.getEvenCounts();\n    var oddRoundingErrors = this.getOddRoundingErrors();\n    var evenRoundingErrors = this.getEvenRoundingErrors();\n    for (var i = 0; i < counters.length; i++) {\n      var value_1 = 1.0 * counters[i] / elementWidth;\n      var count = value_1 + 0.5; // Round\n      if (count < 1) {\n        if (value_1 < 0.3) {\n          throw new NotFoundException_1.default();\n        }\n        count = 1;\n      } else if (count > 8) {\n        if (value_1 > 8.7) {\n          throw new NotFoundException_1.default();\n        }\n        count = 8;\n      }\n      var offset = i / 2;\n      if ((i & 0x01) == 0) {\n        oddCounts[offset] = count;\n        oddRoundingErrors[offset] = value_1 - count;\n      } else {\n        evenCounts[offset] = count;\n        evenRoundingErrors[offset] = value_1 - count;\n      }\n    }\n    this.adjustOddEvenCounts(numModules);\n    var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n    var oddSum = 0;\n    var oddChecksumPortion = 0;\n    for (var i = oddCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n        oddChecksumPortion += oddCounts[i] * weight;\n      }\n      oddSum += oddCounts[i];\n    }\n    var evenChecksumPortion = 0;\n    //int evenSum = 0;\n    for (var i = evenCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n        evenChecksumPortion += evenCounts[i] * weight;\n      }\n      //evenSum += evenCounts[i];\n    }\n\n    var checksumPortion = oddChecksumPortion + evenChecksumPortion;\n    if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n      throw new NotFoundException_1.default();\n    }\n    var group = (13 - oddSum) / 2;\n    var oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n    var evenWidest = 9 - oddWidest;\n    var vOdd = RSSUtils_1.default.getRSSvalue(oddCounts, oddWidest, true);\n    var vEven = RSSUtils_1.default.getRSSvalue(evenCounts, evenWidest, false);\n    var tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n    var gSum = RSSExpandedReader.GSUM[group];\n    var value = vOdd * tEven + vEven + gSum;\n    return new DataCharacter_1.default(value, checksumPortion);\n  };\n  RSSExpandedReader.isNotA1left = function (pattern, isOddPattern, leftChar) {\n    // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n    return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n  };\n  RSSExpandedReader.prototype.adjustOddEvenCounts = function (numModules) {\n    var oddSum = MathUtils_1.default.sum(new Int32Array(this.getOddCounts()));\n    var evenSum = MathUtils_1.default.sum(new Int32Array(this.getEvenCounts()));\n    var incrementOdd = false;\n    var decrementOdd = false;\n    if (oddSum > 13) {\n      decrementOdd = true;\n    } else if (oddSum < 4) {\n      incrementOdd = true;\n    }\n    var incrementEven = false;\n    var decrementEven = false;\n    if (evenSum > 13) {\n      decrementEven = true;\n    } else if (evenSum < 4) {\n      incrementEven = true;\n    }\n    var mismatch = oddSum + evenSum - numModules;\n    var oddParityBad = (oddSum & 0x01) == 1;\n    var evenParityBad = (evenSum & 0x01) == 0;\n    if (mismatch == 1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        decrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        decrementEven = true;\n      }\n    } else if (mismatch == -1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        incrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        incrementEven = true;\n      }\n    } else if (mismatch == 0) {\n      if (oddParityBad) {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        // Both bad\n        if (oddSum < evenSum) {\n          incrementOdd = true;\n          decrementEven = true;\n        } else {\n          decrementOdd = true;\n          incrementEven = true;\n        }\n      } else {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n        // Nothing to do!\n      }\n    } else {\n      throw new NotFoundException_1.default();\n    }\n    if (incrementOdd) {\n      if (decrementOdd) {\n        throw new NotFoundException_1.default();\n      }\n      RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n    if (decrementOdd) {\n      RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n    if (incrementEven) {\n      if (decrementEven) {\n        throw new NotFoundException_1.default();\n      }\n      RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n    }\n    if (decrementEven) {\n      RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n    }\n  };\n  RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n  RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n  RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n  RSSExpandedReader.FINDER_PATTERNS = [[1, 8, 4, 1], [3, 6, 4, 1], [3, 4, 6, 1], [3, 2, 8, 1], [2, 6, 5, 1], [2, 2, 9, 1] // F\n  ];\n\n  RSSExpandedReader.WEIGHTS = [[1, 3, 9, 27, 81, 32, 96, 77], [20, 60, 180, 118, 143, 7, 21, 63], [189, 145, 13, 39, 117, 140, 209, 205], [193, 157, 49, 147, 19, 57, 171, 91], [62, 186, 136, 197, 169, 85, 44, 132], [185, 133, 188, 142, 4, 12, 36, 108], [113, 128, 173, 97, 80, 29, 87, 50], [150, 28, 84, 41, 123, 158, 52, 156], [46, 138, 203, 187, 139, 206, 196, 166], [76, 17, 51, 153, 37, 111, 122, 155], [43, 129, 176, 106, 107, 110, 119, 146], [16, 48, 144, 10, 30, 90, 59, 177], [109, 116, 137, 200, 178, 112, 125, 164], [70, 210, 208, 202, 184, 130, 179, 115], [134, 191, 151, 31, 93, 68, 204, 190], [148, 22, 66, 198, 172, 94, 71, 2], [6, 18, 54, 162, 64, 192, 154, 40], [120, 149, 25, 75, 14, 42, 126, 167], [79, 26, 78, 23, 69, 207, 199, 175], [103, 98, 83, 38, 114, 131, 182, 124], [161, 61, 183, 127, 170, 88, 53, 159], [55, 165, 73, 8, 24, 72, 5, 15], [45, 135, 194, 160, 58, 174, 100, 89]];\n  RSSExpandedReader.FINDER_PAT_A = 0;\n  RSSExpandedReader.FINDER_PAT_B = 1;\n  RSSExpandedReader.FINDER_PAT_C = 2;\n  RSSExpandedReader.FINDER_PAT_D = 3;\n  RSSExpandedReader.FINDER_PAT_E = 4;\n  RSSExpandedReader.FINDER_PAT_F = 5;\n  RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [[RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F]];\n  RSSExpandedReader.MAX_PAIRS = 11;\n  return RSSExpandedReader;\n}(AbstractRSSReader_1.default);\nexports.default = RSSExpandedReader;","map":{"version":3,"sources":["../../../../../src/core/oned/rss/expanded/RSSExpandedReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BarcodeFormat_1 = require(\"../../../BarcodeFormat\");\nvar NotFoundException_1 = require(\"../../../NotFoundException\");\nvar Result_1 = require(\"../../../Result\");\nvar MathUtils_1 = require(\"../../../common/detector/MathUtils\");\nvar AbstractRSSReader_1 = require(\"../../rss/AbstractRSSReader\");\nvar DataCharacter_1 = require(\"../../rss/DataCharacter\");\nvar FinderPattern_1 = require(\"../../rss/FinderPattern\");\nvar RSSUtils_1 = require(\"../../rss/RSSUtils\");\nvar AbstractExpandedDecoderComplement_1 = require(\"./decoders/AbstractExpandedDecoderComplement\");\nvar ExpandedPair_1 = require(\"./ExpandedPair\");\nvar ExpandedRow_1 = require(\"./ExpandedRow\");\nvar BitArrayBuilder_1 = require(\"./BitArrayBuilder\");\nvar System_1 = require(\"../../../util/System\");\n// import java.util.ArrayList;\n// import java.util.Iterator;\n// import java.util.List;\n// import java.util.Map;\n// import java.util.Collections;\nvar RSSExpandedReader = /** @class */ (function (_super) {\n    __extends(RSSExpandedReader, _super);\n    function RSSExpandedReader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n        _this.rows = new Array();\n        _this.startEnd = [2];\n        return _this;\n    }\n    RSSExpandedReader.prototype.decodeRow = function (rowNumber, row, hints) {\n        // Rows can start with even pattern in case in prev rows there where odd number of patters.\n        // So lets try twice\n        //this.pairs.clear();\n        this.pairs.length = 0;\n        this.startFromEven = false;\n        try {\n            return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n        }\n        catch (e) {\n            // OK\n            console.log(e);\n        }\n        this.pairs.length = 0;\n        this.startFromEven = true;\n        return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n    };\n    RSSExpandedReader.prototype.reset = function () {\n        this.pairs.length = 0;\n        this.rows.length = 0;\n    };\n    // Not private for testing\n    RSSExpandedReader.prototype.decodeRow2pairs = function (rowNumber, row) {\n        var done = false;\n        while (!done) {\n            try {\n                this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n            }\n            catch (NotFoundException) {\n                if (!this.pairs.length) {\n                    throw new NotFoundException();\n                }\n                // exit this loop when retrieveNextPair() fails and throws\n                done = true;\n            }\n        }\n        // TODO: verify sequence of finder patterns as in checkPairSequence()\n        if (this.checkChecksum()) {\n            return this.pairs;\n        }\n        var tryStackedDecode;\n        if (this.rows.length) {\n            tryStackedDecode = true;\n        }\n        else {\n            tryStackedDecode = false;\n        }\n        //let tryStackedDecode = !this.rows.isEmpty();\n        this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n        if (tryStackedDecode) {\n            // When the image is 180-rotated, then rows are sorted in wrong direction.\n            // Try twice with both the directions.\n            var ps = this.checkRowsBoolean(false);\n            if (ps != null) {\n                return ps;\n            }\n            ps = this.checkRowsBoolean(true);\n            if (ps != null) {\n                return ps;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    //Need to Verify\n    RSSExpandedReader.prototype.checkRowsBoolean = function (reverse) {\n        // Limit number of rows we are checking\n        // We use recursive algorithm with pure complexity and don't want it to take forever\n        // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n        if (this.rows.length > 25) {\n            this.rows.length = 0; // We will never have a chance to get result, so clear it\n            return null;\n        }\n        this.pairs.length = 0;\n        if (reverse) {\n            this.rows = this.rows.reverse();\n            //Collections.reverse(this.rows);\n        }\n        var ps = null;\n        try {\n            ps = this.checkRows(new Array(), 0);\n        }\n        catch (e) {\n            // OK\n            console.log(e);\n        }\n        if (reverse) {\n            this.rows = this.rows.reverse();\n            //Collections.reverse(this.rows);\n        }\n        return ps;\n    };\n    // Try to construct a valid rows sequence\n    // Recursion is used to implement backtracking\n    RSSExpandedReader.prototype.checkRows = function (collectedRows, currentRow) {\n        var e_1, _a;\n        for (var i = currentRow; i < this.rows.length; i++) {\n            var row = this.rows[i];\n            this.pairs.length = 0;\n            try {\n                for (var collectedRows_1 = __values(collectedRows), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {\n                    var collectedRow = collectedRows_1_1.value;\n                    this.pairs.push(collectedRow.getPairs());\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (collectedRows_1_1 && !collectedRows_1_1.done && (_a = collectedRows_1.return)) _a.call(collectedRows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.pairs.push(row.getPairs());\n            if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n                continue;\n            }\n            if (this.checkChecksum()) {\n                return this.pairs;\n            }\n            var rs = new Array(collectedRows);\n            rs.push(row);\n            try {\n                // Recursion: try to add more rows\n                return this.checkRows(rs, i + 1);\n            }\n            catch (e) {\n                // We failed, try the next candidate\n                console.log(e);\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    // Whether the pairs form a valid find pattern sequence,\n    // either complete or a prefix\n    RSSExpandedReader.isValidSequence = function (pairs) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(RSSExpandedReader.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var sequence = _c.value;\n                if (pairs.length > sequence.length) {\n                    continue;\n                }\n                var stop_1 = true;\n                for (var j = 0; j < pairs.length; j++) {\n                    if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n                        stop_1 = false;\n                        break;\n                    }\n                }\n                if (stop_1) {\n                    return true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return false;\n    };\n    RSSExpandedReader.prototype.storeRow = function (rowNumber, wasReversed) {\n        // Discard if duplicate above or below; otherwise insert in order by row number.\n        var insertPos = 0;\n        var prevIsSame = false;\n        var nextIsSame = false;\n        while (insertPos < this.rows.length) {\n            var erow = this.rows[insertPos];\n            if (erow.getRowNumber() > rowNumber) {\n                nextIsSame = erow.isEquivalent(this.pairs);\n                break;\n            }\n            prevIsSame = erow.isEquivalent(this.pairs);\n            insertPos++;\n        }\n        if (nextIsSame || prevIsSame) {\n            return;\n        }\n        // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n        // it will prevent us from detecting the barcode.\n        // Try to merge partial rows\n        // Check whether the row is part of an allready detected row\n        if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n            return;\n        }\n        this.rows.push(insertPos, new ExpandedRow_1.default(this.pairs, rowNumber, wasReversed));\n        this.removePartialRows(this.pairs, this.rows);\n    };\n    // Remove all the rows that contains only specified pairs\n    RSSExpandedReader.prototype.removePartialRows = function (pairs, rows) {\n        var e_3, _a, e_4, _b, e_5, _c;\n        try {\n            // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n            //   ExpandedRow r = iterator.next();\n            //   if (r.getPairs().size() == pairs.size()) {\n            //     continue;\n            //   }\n            //   boolean allFound = true;\n            //   for (ExpandedPair p : r.getPairs()) {\n            //     boolean found = false;\n            //     for (ExpandedPair pp : pairs) {\n            //       if (p.equals(pp)) {\n            //         found = true;\n            //         break;\n            //       }\n            //     }\n            //     if (!found) {\n            //       allFound = false;\n            //       break;\n            //     }\n            //   }\n            //   if (allFound) {\n            //     // 'pairs' contains all the pairs from the row 'r'\n            //     iterator.remove();\n            //   }\n            // }\n            for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n                var row = rows_1_1.value;\n                if (row.getPairs().length === pairs.length) {\n                    continue;\n                }\n                var allFound = true;\n                try {\n                    for (var _d = __values(row.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                        var p = _e.value;\n                        var found = false;\n                        try {\n                            for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {\n                                var pp = pairs_1_1.value;\n                                if (ExpandedPair_1.default.equals(p, pp)) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                        finally {\n                            try {\n                                if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);\n                            }\n                            finally { if (e_5) throw e_5.error; }\n                        }\n                        if (!found) {\n                            allFound = false;\n                        }\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    // Returns true when one of the rows already contains all the pairs\n    RSSExpandedReader.isPartialRow = function (pairs, rows) {\n        var e_6, _a, e_7, _b, e_8, _c;\n        try {\n            for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n                var r = rows_2_1.value;\n                var allFound = true;\n                try {\n                    for (var pairs_2 = __values(pairs), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {\n                        var p = pairs_2_1.value;\n                        var found = false;\n                        try {\n                            for (var _d = __values(r.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                                var pp = _e.value;\n                                if (p.equals(pp)) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n                        finally {\n                            try {\n                                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n                            }\n                            finally { if (e_8) throw e_8.error; }\n                        }\n                        if (!found) {\n                            allFound = false;\n                            break;\n                        }\n                    }\n                }\n                catch (e_7_1) { e_7 = { error: e_7_1 }; }\n                finally {\n                    try {\n                        if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);\n                    }\n                    finally { if (e_7) throw e_7.error; }\n                }\n                if (allFound) {\n                    // the row 'r' contain all the pairs from 'pairs'\n                    return true;\n                }\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        return false;\n    };\n    // Only used for unit testing\n    RSSExpandedReader.prototype.getRows = function () {\n        return this.rows;\n    };\n    // Not private for unit testing\n    RSSExpandedReader.constructResult = function (pairs) {\n        var binary = BitArrayBuilder_1.default.buildBitArray(pairs);\n        var decoder = AbstractExpandedDecoderComplement_1.createDecoder(binary);\n        var resultingString = decoder.parseInformation();\n        var firstPoints = pairs[0].getFinderPattern().getResultPoints();\n        var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n        var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n        return new Result_1.default(resultingString, null, null, points, BarcodeFormat_1.default.RSS_EXPANDED, null);\n    };\n    RSSExpandedReader.prototype.checkChecksum = function () {\n        var firstPair = this.pairs.get(0);\n        var checkCharacter = firstPair.getLeftChar();\n        var firstCharacter = firstPair.getRightChar();\n        if (firstCharacter == null) {\n            return false;\n        }\n        var checksum = firstCharacter.getChecksumPortion();\n        var s = 2;\n        for (var i = 1; i < this.pairs.size(); ++i) {\n            var currentPair = this.pairs.get(i);\n            checksum += currentPair.getLeftChar().getChecksumPortion();\n            s++;\n            var currentRightChar = currentPair.getRightChar();\n            if (currentRightChar != null) {\n                checksum += currentRightChar.getChecksumPortion();\n                s++;\n            }\n        }\n        checksum %= 211;\n        var checkCharacterValue = 211 * (s - 4) + checksum;\n        return checkCharacterValue == checkCharacter.getValue();\n    };\n    RSSExpandedReader.getNextSecondBar = function (row, initialPos) {\n        var currentPos;\n        if (row.get(initialPos)) {\n            currentPos = row.getNextUnset(initialPos);\n            currentPos = row.getNextSet(currentPos);\n        }\n        else {\n            currentPos = row.getNextSet(initialPos);\n            currentPos = row.getNextUnset(currentPos);\n        }\n        return currentPos;\n    };\n    // not private for testing\n    RSSExpandedReader.prototype.retrieveNextPair = function (row, previousPairs, rowNumber) {\n        var isOddPattern = previousPairs.length % 2 == 0;\n        if (this.startFromEven) {\n            isOddPattern = !isOddPattern;\n        }\n        var pattern;\n        var keepFinding = true;\n        var forcedOffset = -1;\n        do {\n            this.findNextPair(row, previousPairs, forcedOffset);\n            pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n            if (pattern == null) {\n                forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n            }\n            else {\n                keepFinding = false;\n            }\n        } while (keepFinding);\n        // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n        // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n        var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n        if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n            throw new NotFoundException_1.default();\n        }\n        var rightChar;\n        try {\n            rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n        }\n        catch (e) {\n            rightChar = null;\n            console.log(e);\n        }\n        return new ExpandedPair_1.default(leftChar, rightChar, pattern, true);\n    };\n    RSSExpandedReader.prototype.isEmptyPair = function (pairs) {\n        if (pairs.length === 0) {\n            return true;\n        }\n        return false;\n    };\n    RSSExpandedReader.prototype.findNextPair = function (row, previousPairs, forcedOffset) {\n        var counters = this.getDecodeFinderCounters();\n        counters[0] = 0;\n        counters[1] = 0;\n        counters[2] = 0;\n        counters[3] = 0;\n        var width = row.getSize();\n        var rowOffset;\n        if (forcedOffset >= 0) {\n            rowOffset = forcedOffset;\n        }\n        else if (this.isEmptyPair(previousPairs)) {\n            rowOffset = 0;\n        }\n        else {\n            var lastPair = previousPairs[previousPairs.length - 1];\n            rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n        }\n        var searchingEvenPair = previousPairs.length % 2 != 0;\n        if (this.startFromEven) {\n            searchingEvenPair = !searchingEvenPair;\n        }\n        var isWhite = false;\n        while (rowOffset < width) {\n            isWhite = !row.get(rowOffset);\n            if (!isWhite) {\n                break;\n            }\n            rowOffset++;\n        }\n        var counterPosition = 0;\n        var patternStart = rowOffset;\n        for (var x = rowOffset; x < width; x++) {\n            if (row.get(x) != isWhite) {\n                counters[counterPosition]++;\n            }\n            else {\n                if (counterPosition == 3) {\n                    if (searchingEvenPair) {\n                        RSSExpandedReader.reverseCounters(counters);\n                    }\n                    if (RSSExpandedReader.isFinderPattern(counters)) {\n                        this.startEnd[0] = patternStart;\n                        this.startEnd[1] = x;\n                        return;\n                    }\n                    if (searchingEvenPair) {\n                        RSSExpandedReader.reverseCounters(counters);\n                    }\n                    patternStart += counters[0] + counters[1];\n                    counters[0] = counters[2];\n                    counters[1] = counters[3];\n                    counters[2] = 0;\n                    counters[3] = 0;\n                    counterPosition--;\n                }\n                else {\n                    counterPosition++;\n                }\n                counters[counterPosition] = 1;\n                isWhite = !isWhite;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    RSSExpandedReader.reverseCounters = function (counters) {\n        var length = counters.length;\n        for (var i = 0; i < length / 2; ++i) {\n            var tmp = counters[i];\n            counters[i] = counters[length - i - 1];\n            counters[length - i - 1] = tmp;\n        }\n    };\n    RSSExpandedReader.prototype.parseFoundFinderPattern = function (row, rowNumber, oddPattern) {\n        // Actually we found elements 2-5.\n        var firstCounter;\n        var start;\n        var end;\n        if (oddPattern) {\n            // If pattern number is odd, we need to locate element 1 *before* the current block.\n            var firstElementStart = this.startEnd[0] - 1;\n            // Locate element 1\n            while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n                firstElementStart--;\n            }\n            firstElementStart++;\n            firstCounter = this.startEnd[0] - firstElementStart;\n            start = firstElementStart;\n            end = this.startEnd[1];\n        }\n        else {\n            // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n            start = this.startEnd[0];\n            end = row.getNextUnset(this.startEnd[1] + 1);\n            firstCounter = end - this.startEnd[1];\n        }\n        // Make 'counters' hold 1-4\n        var counters = this.getDecodeFinderCounters();\n        System_1.default.arraycopy(counters, 0, counters, 1, counters.length - 1);\n        counters[0] = firstCounter;\n        var value;\n        try {\n            value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n        }\n        catch (e) {\n            return null;\n            console.log(e);\n        }\n        //return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n        return new FinderPattern_1.default(value, [start, end], start, end, rowNumber);\n    };\n    RSSExpandedReader.prototype.decodeDataCharacter = function (row, pattern, isOddPattern, leftChar) {\n        var counters = this.getDataCharacterCounters();\n        for (var x = 0; x < counters.length; x++) {\n            counters[x] = 0;\n        }\n        if (leftChar) {\n            RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n        }\n        else {\n            RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters);\n            // reverse it\n            for (var i = 0, j = counters.length - 1; i < j; i++, j--) {\n                var temp = counters[i];\n                counters[i] = counters[j];\n                counters[j] = temp;\n            }\n        } //counters[] has the pixels of the module\n        var numModules = 17; //left and right data characters have all the same length\n        var elementWidth = MathUtils_1.default.sum(new Int32Array(counters)) / numModules;\n        // Sanity check: element width for pattern and the character should match\n        var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n        if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n            throw new NotFoundException_1.default();\n        }\n        var oddCounts = this.getOddCounts();\n        var evenCounts = this.getEvenCounts();\n        var oddRoundingErrors = this.getOddRoundingErrors();\n        var evenRoundingErrors = this.getEvenRoundingErrors();\n        for (var i = 0; i < counters.length; i++) {\n            var value_1 = 1.0 * counters[i] / elementWidth;\n            var count = value_1 + 0.5; // Round\n            if (count < 1) {\n                if (value_1 < 0.3) {\n                    throw new NotFoundException_1.default();\n                }\n                count = 1;\n            }\n            else if (count > 8) {\n                if (value_1 > 8.7) {\n                    throw new NotFoundException_1.default();\n                }\n                count = 8;\n            }\n            var offset = i / 2;\n            if ((i & 0x01) == 0) {\n                oddCounts[offset] = count;\n                oddRoundingErrors[offset] = value_1 - count;\n            }\n            else {\n                evenCounts[offset] = count;\n                evenRoundingErrors[offset] = value_1 - count;\n            }\n        }\n        this.adjustOddEvenCounts(numModules);\n        var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n        var oddSum = 0;\n        var oddChecksumPortion = 0;\n        for (var i = oddCounts.length - 1; i >= 0; i--) {\n            if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n                oddChecksumPortion += oddCounts[i] * weight;\n            }\n            oddSum += oddCounts[i];\n        }\n        var evenChecksumPortion = 0;\n        //int evenSum = 0;\n        for (var i = evenCounts.length - 1; i >= 0; i--) {\n            if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n                evenChecksumPortion += evenCounts[i] * weight;\n            }\n            //evenSum += evenCounts[i];\n        }\n        var checksumPortion = oddChecksumPortion + evenChecksumPortion;\n        if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n            throw new NotFoundException_1.default();\n        }\n        var group = (13 - oddSum) / 2;\n        var oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n        var evenWidest = 9 - oddWidest;\n        var vOdd = RSSUtils_1.default.getRSSvalue(oddCounts, oddWidest, true);\n        var vEven = RSSUtils_1.default.getRSSvalue(evenCounts, evenWidest, false);\n        var tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n        var gSum = RSSExpandedReader.GSUM[group];\n        var value = vOdd * tEven + vEven + gSum;\n        return new DataCharacter_1.default(value, checksumPortion);\n    };\n    RSSExpandedReader.isNotA1left = function (pattern, isOddPattern, leftChar) {\n        // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n        return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n    };\n    RSSExpandedReader.prototype.adjustOddEvenCounts = function (numModules) {\n        var oddSum = MathUtils_1.default.sum(new Int32Array(this.getOddCounts()));\n        var evenSum = MathUtils_1.default.sum(new Int32Array(this.getEvenCounts()));\n        var incrementOdd = false;\n        var decrementOdd = false;\n        if (oddSum > 13) {\n            decrementOdd = true;\n        }\n        else if (oddSum < 4) {\n            incrementOdd = true;\n        }\n        var incrementEven = false;\n        var decrementEven = false;\n        if (evenSum > 13) {\n            decrementEven = true;\n        }\n        else if (evenSum < 4) {\n            incrementEven = true;\n        }\n        var mismatch = oddSum + evenSum - numModules;\n        var oddParityBad = (oddSum & 0x01) == 1;\n        var evenParityBad = (evenSum & 0x01) == 0;\n        if (mismatch == 1) {\n            if (oddParityBad) {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                decrementOdd = true;\n            }\n            else {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                decrementEven = true;\n            }\n        }\n        else if (mismatch == -1) {\n            if (oddParityBad) {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                incrementOdd = true;\n            }\n            else {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                incrementEven = true;\n            }\n        }\n        else if (mismatch == 0) {\n            if (oddParityBad) {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                // Both bad\n                if (oddSum < evenSum) {\n                    incrementOdd = true;\n                    decrementEven = true;\n                }\n                else {\n                    decrementOdd = true;\n                    incrementEven = true;\n                }\n            }\n            else {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                // Nothing to do!\n            }\n        }\n        else {\n            throw new NotFoundException_1.default();\n        }\n        if (incrementOdd) {\n            if (decrementOdd) {\n                throw new NotFoundException_1.default();\n            }\n            RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (decrementOdd) {\n            RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (incrementEven) {\n            if (decrementEven) {\n                throw new NotFoundException_1.default();\n            }\n            RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n        }\n        if (decrementEven) {\n            RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n        }\n    };\n    RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n    RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n    RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n    RSSExpandedReader.FINDER_PATTERNS = [\n        [1, 8, 4, 1],\n        [3, 6, 4, 1],\n        [3, 4, 6, 1],\n        [3, 2, 8, 1],\n        [2, 6, 5, 1],\n        [2, 2, 9, 1] // F\n    ];\n    RSSExpandedReader.WEIGHTS = [\n        [1, 3, 9, 27, 81, 32, 96, 77],\n        [20, 60, 180, 118, 143, 7, 21, 63],\n        [189, 145, 13, 39, 117, 140, 209, 205],\n        [193, 157, 49, 147, 19, 57, 171, 91],\n        [62, 186, 136, 197, 169, 85, 44, 132],\n        [185, 133, 188, 142, 4, 12, 36, 108],\n        [113, 128, 173, 97, 80, 29, 87, 50],\n        [150, 28, 84, 41, 123, 158, 52, 156],\n        [46, 138, 203, 187, 139, 206, 196, 166],\n        [76, 17, 51, 153, 37, 111, 122, 155],\n        [43, 129, 176, 106, 107, 110, 119, 146],\n        [16, 48, 144, 10, 30, 90, 59, 177],\n        [109, 116, 137, 200, 178, 112, 125, 164],\n        [70, 210, 208, 202, 184, 130, 179, 115],\n        [134, 191, 151, 31, 93, 68, 204, 190],\n        [148, 22, 66, 198, 172, 94, 71, 2],\n        [6, 18, 54, 162, 64, 192, 154, 40],\n        [120, 149, 25, 75, 14, 42, 126, 167],\n        [79, 26, 78, 23, 69, 207, 199, 175],\n        [103, 98, 83, 38, 114, 131, 182, 124],\n        [161, 61, 183, 127, 170, 88, 53, 159],\n        [55, 165, 73, 8, 24, 72, 5, 15],\n        [45, 135, 194, 160, 58, 174, 100, 89]\n    ];\n    RSSExpandedReader.FINDER_PAT_A = 0;\n    RSSExpandedReader.FINDER_PAT_B = 1;\n    RSSExpandedReader.FINDER_PAT_C = 2;\n    RSSExpandedReader.FINDER_PAT_D = 3;\n    RSSExpandedReader.FINDER_PAT_E = 4;\n    RSSExpandedReader.FINDER_PAT_F = 5;\n    RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n    ];\n    RSSExpandedReader.MAX_PAIRS = 11;\n    return RSSExpandedReader;\n}(AbstractRSSReader_1.default));\nexports.default = RSSExpandedReader;\n//# sourceMappingURL=RSSExpandedReader.js.map"]},"metadata":{},"sourceType":"script"}