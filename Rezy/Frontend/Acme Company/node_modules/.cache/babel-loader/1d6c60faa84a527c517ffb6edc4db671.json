{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar System_1 = require(\"./System\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar ArrayIndexOutOfBoundsException_1 = require(\"../ArrayIndexOutOfBoundsException\");\nvar Arrays = /** @class */function () {\n  function Arrays() {}\n  /**\n   * Assigns the specified int value to each element of the specified array\n   * of ints.\n   *\n   * @param a the array to be filled\n   * @param val the value to be stored in all elements of the array\n   */\n  Arrays.fill = function (a, val) {\n    for (var i = 0, len = a.length; i < len; i++) a[i] = val;\n  };\n  /**\n   * Assigns the specified int value to each element of the specified\n   * range of the specified array of ints.  The range to be filled\n   * extends from index {@code fromIndex}, inclusive, to index\n   * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\n   * range to be filled is empty.)\n   *\n   * @param a the array to be filled\n   * @param fromIndex the index of the first element (inclusive) to be\n   *        filled with the specified value\n   * @param toIndex the index of the last element (exclusive) to be\n   *        filled with the specified value\n   * @param val the value to be stored in all elements of the array\n   * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n   * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\n   *         {@code toIndex > a.length}\n   */\n  Arrays.fillWithin = function (a, fromIndex, toIndex, val) {\n    Arrays.rangeCheck(a.length, fromIndex, toIndex);\n    for (var i = fromIndex; i < toIndex; i++) a[i] = val;\n  };\n  /**\n   * Checks that {@code fromIndex} and {@code toIndex} are in\n   * the range and throws an exception if they aren't.\n   */\n  Arrays.rangeCheck = function (arrayLength, fromIndex, toIndex) {\n    if (fromIndex > toIndex) {\n      throw new IllegalArgumentException_1.default('fromIndex(' + fromIndex + ') > toIndex(' + toIndex + ')');\n    }\n    if (fromIndex < 0) {\n      throw new ArrayIndexOutOfBoundsException_1.default(fromIndex);\n    }\n    if (toIndex > arrayLength) {\n      throw new ArrayIndexOutOfBoundsException_1.default(toIndex);\n    }\n  };\n  Arrays.asList = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return args;\n  };\n  Arrays.create = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n  Arrays.createInt32Array = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Int32Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n  Arrays.equals = function (first, second) {\n    if (!first) {\n      return false;\n    }\n    if (!second) {\n      return false;\n    }\n    if (!first.length) {\n      return false;\n    }\n    if (!second.length) {\n      return false;\n    }\n    if (first.length !== second.length) {\n      return false;\n    }\n    for (var i = 0, length_1 = first.length; i < length_1; i++) {\n      if (first[i] !== second[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Arrays.hashCode = function (a) {\n    var e_1, _a;\n    if (a === null) {\n      return 0;\n    }\n    var result = 1;\n    try {\n      for (var a_1 = __values(a), a_1_1 = a_1.next(); !a_1_1.done; a_1_1 = a_1.next()) {\n        var element = a_1_1.value;\n        result = 31 * result + element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (a_1_1 && !a_1_1.done && (_a = a_1.return)) _a.call(a_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return result;\n  };\n  Arrays.fillUint8Array = function (a, value) {\n    for (var i = 0; i !== a.length; i++) {\n      a[i] = value;\n    }\n  };\n  Arrays.copyOf = function (original, newLength) {\n    return original.slice(0, newLength);\n  };\n  Arrays.copyOfUint8Array = function (original, newLength) {\n    if (original.length <= newLength) {\n      var newArray = new Uint8Array(newLength);\n      newArray.set(original);\n      return newArray;\n    }\n    return original.slice(0, newLength);\n  };\n  Arrays.copyOfRange = function (original, from, to) {\n    var newLength = to - from;\n    var copy = new Int32Array(newLength);\n    System_1.default.arraycopy(original, from, copy, 0, newLength);\n    return copy;\n  };\n  /*\n  * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\n  * for the new element.\n  * Parameters:\n  *     ar - A sorted array\n  *     el - An element to search for\n  *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\n  *        a negative number  if a is less than b;\n  *        0 if a is equal to b;\n  *        a positive number of a is greater than b.\n  * The array may contain duplicate elements. If there are more than one equal elements in the array,\n  * the returned value can be the index of any one of the equal elements.\n  *\n  * http://jsfiddle.net/aryzhov/pkfst550/\n  */\n  Arrays.binarySearch = function (ar, el, comparator) {\n    if (undefined === comparator) {\n      comparator = Arrays.numberComparator;\n    }\n    var m = 0;\n    var n = ar.length - 1;\n    while (m <= n) {\n      var k = n + m >> 1;\n      var cmp = comparator(el, ar[k]);\n      if (cmp > 0) {\n        m = k + 1;\n      } else if (cmp < 0) {\n        n = k - 1;\n      } else {\n        return k;\n      }\n    }\n    return -m - 1;\n  };\n  Arrays.numberComparator = function (a, b) {\n    return a - b;\n  };\n  return Arrays;\n}();\nexports.default = Arrays;","map":{"version":3,"names":["System_1","require","IllegalArgumentException_1","ArrayIndexOutOfBoundsException_1","Arrays","fill","a","val","i","len","length","fillWithin","fromIndex","toIndex","rangeCheck","arrayLength","default","asList","args","_i","arguments","create","rows","cols","value","arr","Array","from","map","x","createInt32Array","Int32Array","equals","first","second","length_1","hashCode","result","a_1","__values","a_1_1","next","done","element","fillUint8Array","copyOf","original","newLength","slice","copyOfUint8Array","newArray","Uint8Array","set","copyOfRange","to","copy","arraycopy","binarySearch","ar","el","comparator","undefined","numberComparator","m","n","k","cmp","b"],"sources":["../../../src/core/util/Arrays.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}