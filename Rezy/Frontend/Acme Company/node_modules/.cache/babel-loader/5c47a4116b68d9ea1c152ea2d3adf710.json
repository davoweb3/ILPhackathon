{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BitSource_1 = require(\"../../common/BitSource\");\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar Mode_1 = require(\"./Mode\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\nvar FormatException_1 = require(\"../../FormatException\");\n/*import java.io.UnsupportedEncodingException;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collection;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes\n * in one QR Code. This class decodes the bits back into text.</p>\n *\n * <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>\n *\n * @author Sean Owen\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  DecodedBitStreamParser.decode = function (bytes, version, ecLevel, hints) {\n    var bits = new BitSource_1.default(bytes);\n    var result = new StringBuilder_1.default();\n    var byteSegments = new Array(); // 1\n    // TYPESCRIPTPORT: I do not use constructor with size 1 as in original Java means capacity and the array length is checked below\n    var symbolSequence = -1;\n    var parityData = -1;\n    try {\n      var currentCharacterSetECI = null;\n      var fc1InEffect = false;\n      var mode = void 0;\n      do {\n        // While still another segment to read...\n        if (bits.available() < 4) {\n          // OK, assume we're done. Really, a TERMINATOR mode should have been recorded here\n          mode = Mode_1.default.TERMINATOR;\n        } else {\n          var modeBits = bits.readBits(4);\n          mode = Mode_1.default.forBits(modeBits); // mode is encoded by 4 bits\n        }\n\n        switch (mode) {\n          case Mode_1.default.TERMINATOR:\n            break;\n          case Mode_1.default.FNC1_FIRST_POSITION:\n          case Mode_1.default.FNC1_SECOND_POSITION:\n            // We do little with FNC1 except alter the parsed result a bit according to the spec\n            fc1InEffect = true;\n            break;\n          case Mode_1.default.STRUCTURED_APPEND:\n            if (bits.available() < 16) {\n              throw new FormatException_1.default();\n            }\n            // sequence number and parity is added later to the result metadata\n            // Read next 8 bits (symbol sequence #) and 8 bits (data: parity), then continue\n            symbolSequence = bits.readBits(8);\n            parityData = bits.readBits(8);\n            break;\n          case Mode_1.default.ECI:\n            // Count doesn't apply to ECI\n            var value = DecodedBitStreamParser.parseECIValue(bits);\n            currentCharacterSetECI = CharacterSetECI_1.default.getCharacterSetECIByValue(value);\n            if (currentCharacterSetECI === null) {\n              throw new FormatException_1.default();\n            }\n            break;\n          case Mode_1.default.HANZI:\n            // First handle Hanzi mode which does not start with character count\n            // Chinese mode contains a sub set indicator right after mode indicator\n            var subset = bits.readBits(4);\n            var countHanzi = bits.readBits(mode.getCharacterCountBits(version));\n            if (subset === DecodedBitStreamParser.GB2312_SUBSET) {\n              DecodedBitStreamParser.decodeHanziSegment(bits, result, countHanzi);\n            }\n            break;\n          default:\n            // \"Normal\" QR code modes:\n            // How many characters will follow, encoded in this mode?\n            var count = bits.readBits(mode.getCharacterCountBits(version));\n            switch (mode) {\n              case Mode_1.default.NUMERIC:\n                DecodedBitStreamParser.decodeNumericSegment(bits, result, count);\n                break;\n              case Mode_1.default.ALPHANUMERIC:\n                DecodedBitStreamParser.decodeAlphanumericSegment(bits, result, count, fc1InEffect);\n                break;\n              case Mode_1.default.BYTE:\n                DecodedBitStreamParser.decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);\n                break;\n              case Mode_1.default.KANJI:\n                DecodedBitStreamParser.decodeKanjiSegment(bits, result, count);\n                break;\n              default:\n                throw new FormatException_1.default();\n            }\n            break;\n        }\n      } while (mode !== Mode_1.default.TERMINATOR);\n    } catch (iae /*: IllegalArgumentException*/) {\n      // from readBits() calls\n      throw new FormatException_1.default();\n    }\n    return new DecoderResult_1.default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, ecLevel === null ? null : ecLevel.toString(), symbolSequence, parityData);\n  };\n  /**\n   * See specification GBT 18284-2000\n   */\n  DecodedBitStreamParser.decodeHanziSegment = function (bits, result, count /*int*/) {\n    // Don't crash trying to read more bits than we have available.\n    if (count * 13 > bits.available()) {\n      throw new FormatException_1.default();\n    }\n    // Each character will require 2 bytes. Read the characters as 2-byte pairs\n    // and decode as GB2312 afterwards\n    var buffer = new Uint8Array(2 * count);\n    var offset = 0;\n    while (count > 0) {\n      // Each 13 bits encodes a 2-byte character\n      var twoBytes = bits.readBits(13);\n      var assembledTwoBytes = twoBytes / 0x060 << 8 & 0xFFFFFFFF | twoBytes % 0x060;\n      if (assembledTwoBytes < 0x003BF) {\n        // In the 0xA1A1 to 0xAAFE range\n        assembledTwoBytes += 0x0A1A1;\n      } else {\n        // In the 0xB0A1 to 0xFAFE range\n        assembledTwoBytes += 0x0A6A1;\n      }\n      buffer[offset] = /*(byte) */assembledTwoBytes >> 8 & 0xFF;\n      buffer[offset + 1] = /*(byte) */assembledTwoBytes & 0xFF;\n      offset += 2;\n      count--;\n    }\n    try {\n      result.append(StringEncoding_1.default.decode(buffer, StringUtils_1.default.GB2312));\n      // TYPESCRIPTPORT: TODO: implement GB2312 decode. StringView from MDN could be a starting point\n    } catch (ignored /*: UnsupportedEncodingException*/) {\n      throw new FormatException_1.default(ignored);\n    }\n  };\n  DecodedBitStreamParser.decodeKanjiSegment = function (bits, result, count /*int*/) {\n    // Don't crash trying to read more bits than we have available.\n    if (count * 13 > bits.available()) {\n      throw new FormatException_1.default();\n    }\n    // Each character will require 2 bytes. Read the characters as 2-byte pairs\n    // and decode as Shift_JIS afterwards\n    var buffer = new Uint8Array(2 * count);\n    var offset = 0;\n    while (count > 0) {\n      // Each 13 bits encodes a 2-byte character\n      var twoBytes = bits.readBits(13);\n      var assembledTwoBytes = twoBytes / 0x0C0 << 8 & 0xFFFFFFFF | twoBytes % 0x0C0;\n      if (assembledTwoBytes < 0x01F00) {\n        // In the 0x8140 to 0x9FFC range\n        assembledTwoBytes += 0x08140;\n      } else {\n        // In the 0xE040 to 0xEBBF range\n        assembledTwoBytes += 0x0C140;\n      }\n      buffer[offset] = /*(byte) */assembledTwoBytes >> 8;\n      buffer[offset + 1] = /*(byte) */assembledTwoBytes;\n      offset += 2;\n      count--;\n    }\n    // Shift_JIS may not be supported in some environments:\n    try {\n      result.append(StringEncoding_1.default.decode(buffer, StringUtils_1.default.SHIFT_JIS));\n      // TYPESCRIPTPORT: TODO: implement SHIFT_JIS decode. StringView from MDN could be a starting point\n    } catch (ignored /*: UnsupportedEncodingException*/) {\n      throw new FormatException_1.default(ignored);\n    }\n  };\n  DecodedBitStreamParser.decodeByteSegment = function (bits, result, count /*int*/, currentCharacterSetECI, byteSegments, hints) {\n    // Don't crash trying to read more bits than we have available.\n    if (8 * count > bits.available()) {\n      throw new FormatException_1.default();\n    }\n    var readBytes = new Uint8Array(count);\n    for (var i = 0; i < count; i++) {\n      readBytes[i] = /*(byte) */bits.readBits(8);\n    }\n    var encoding;\n    if (currentCharacterSetECI === null) {\n      // The spec isn't clear on this mode; see\n      // section 6.4.5: t does not say which encoding to assuming\n      // upon decoding. I have seen ISO-8859-1 used as well as\n      // Shift_JIS -- without anything like an ECI designator to\n      // give a hint.\n      encoding = StringUtils_1.default.guessEncoding(readBytes, hints);\n    } else {\n      encoding = currentCharacterSetECI.getName();\n    }\n    try {\n      result.append(StringEncoding_1.default.decode(readBytes, encoding));\n    } catch (ignored /*: UnsupportedEncodingException*/) {\n      throw new FormatException_1.default(ignored);\n    }\n    byteSegments.push(readBytes);\n  };\n  DecodedBitStreamParser.toAlphaNumericChar = function (value /*int*/) {\n    if (value >= DecodedBitStreamParser.ALPHANUMERIC_CHARS.length) {\n      throw new FormatException_1.default();\n    }\n    return DecodedBitStreamParser.ALPHANUMERIC_CHARS[value];\n  };\n  DecodedBitStreamParser.decodeAlphanumericSegment = function (bits, result, count /*int*/, fc1InEffect) {\n    // Read two characters at a time\n    var start = result.length();\n    while (count > 1) {\n      if (bits.available() < 11) {\n        throw new FormatException_1.default();\n      }\n      var nextTwoCharsBits = bits.readBits(11);\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(nextTwoCharsBits / 45)));\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(nextTwoCharsBits % 45));\n      count -= 2;\n    }\n    if (count === 1) {\n      // special case: one character left\n      if (bits.available() < 6) {\n        throw new FormatException_1.default();\n      }\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(bits.readBits(6)));\n    }\n    // See section 6.4.8.1, 6.4.8.2\n    if (fc1InEffect) {\n      // We need to massage the result a bit if in an FNC1 mode:\n      for (var i = start; i < result.length(); i++) {\n        if (result.charAt(i) === '%') {\n          if (i < result.length() - 1 && result.charAt(i + 1) === '%') {\n            // %% is rendered as %\n            result.deleteCharAt(i + 1);\n          } else {\n            // In alpha mode, % should be converted to FNC1 separator 0x1D\n            result.setCharAt(i, String.fromCharCode(0x1D));\n          }\n        }\n      }\n    }\n  };\n  DecodedBitStreamParser.decodeNumericSegment = function (bits, result, count /*int*/) {\n    // Read three digits at a time\n    while (count >= 3) {\n      // Each 10 bits encodes three digits\n      if (bits.available() < 10) {\n        throw new FormatException_1.default();\n      }\n      var threeDigitsBits = bits.readBits(10);\n      if (threeDigitsBits >= 1000) {\n        throw new FormatException_1.default();\n      }\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(threeDigitsBits / 100)));\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(threeDigitsBits / 10) % 10));\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(threeDigitsBits % 10));\n      count -= 3;\n    }\n    if (count === 2) {\n      // Two digits left over to read, encoded in 7 bits\n      if (bits.available() < 7) {\n        throw new FormatException_1.default();\n      }\n      var twoDigitsBits = bits.readBits(7);\n      if (twoDigitsBits >= 100) {\n        throw new FormatException_1.default();\n      }\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(twoDigitsBits / 10)));\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(twoDigitsBits % 10));\n    } else if (count === 1) {\n      // One digit left over to read\n      if (bits.available() < 4) {\n        throw new FormatException_1.default();\n      }\n      var digitBits = bits.readBits(4);\n      if (digitBits >= 10) {\n        throw new FormatException_1.default();\n      }\n      result.append(DecodedBitStreamParser.toAlphaNumericChar(digitBits));\n    }\n  };\n  DecodedBitStreamParser.parseECIValue = function (bits) {\n    var firstByte = bits.readBits(8);\n    if ((firstByte & 0x80) === 0) {\n      // just one byte\n      return firstByte & 0x7F;\n    }\n    if ((firstByte & 0xC0) === 0x80) {\n      // two bytes\n      var secondByte = bits.readBits(8);\n      return (firstByte & 0x3F) << 8 & 0xFFFFFFFF | secondByte;\n    }\n    if ((firstByte & 0xE0) === 0xC0) {\n      // three bytes\n      var secondThirdBytes = bits.readBits(16);\n      return (firstByte & 0x1F) << 16 & 0xFFFFFFFF | secondThirdBytes;\n    }\n    throw new FormatException_1.default();\n  };\n  /**\n   * See ISO 18004:2006, 6.4.4 Table 5\n   */\n  DecodedBitStreamParser.ALPHANUMERIC_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  DecodedBitStreamParser.GB2312_SUBSET = 1;\n  return DecodedBitStreamParser;\n}();\nexports.default = DecodedBitStreamParser;\nfunction Uint8ArrayToString(a) {\n  var CHUNK_SZ = 0x8000;\n  var c = new StringBuilder_1.default();\n  for (var i = 0, length_1 = a.length; i < length_1; i += CHUNK_SZ) {\n    c.append(String.fromCharCode.apply(null, a.subarray(i, i + CHUNK_SZ)));\n  }\n  return c.toString();\n}","map":{"version":3,"names":["BitSource_1","require","CharacterSetECI_1","DecoderResult_1","StringUtils_1","Mode_1","StringBuilder_1","StringEncoding_1","FormatException_1","DecodedBitStreamParser","decode","bytes","version","ecLevel","hints","bits","default","result","byteSegments","Array","symbolSequence","parityData","currentCharacterSetECI","fc1InEffect","mode","available","TERMINATOR","modeBits","readBits","forBits","FNC1_FIRST_POSITION","FNC1_SECOND_POSITION","STRUCTURED_APPEND","ECI","value","parseECIValue","getCharacterSetECIByValue","HANZI","subset","countHanzi","getCharacterCountBits","GB2312_SUBSET","decodeHanziSegment","count","NUMERIC","decodeNumericSegment","ALPHANUMERIC","decodeAlphanumericSegment","BYTE","decodeByteSegment","KANJI","decodeKanjiSegment","iae","toString","length","buffer","Uint8Array","offset","twoBytes","assembledTwoBytes","append","GB2312","ignored","SHIFT_JIS","readBytes","i","encoding","guessEncoding","getName","push","toAlphaNumericChar","ALPHANUMERIC_CHARS","start","nextTwoCharsBits","Math","floor","charAt","deleteCharAt","setCharAt","String","fromCharCode","threeDigitsBits","twoDigitsBits","digitBits","firstByte","secondByte","secondThirdBytes","Uint8ArrayToString","a","CHUNK_SZ","c","length_1","apply","subarray"],"sources":["../../../../src/core/qrcode/decoder/DecodedBitStreamParser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}