{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar BarcodeMetadata_1 = require(\"./BarcodeMetadata\");\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResultRowIndicatorColumn = /** @class */function (_super) {\n  __extends(DetectionResultRowIndicatorColumn, _super);\n  function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n    var _this = _super.call(this, boundingBox) || this;\n    _this._isLeft = isLeft;\n    return _this;\n  }\n  DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value /*Codeword*/;\n        if (codeword != null) {\n          codeword.setRowNumberAsRowIndicatorColumn();\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  // TODO implement properly\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n  DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var codewords = this.getCodewords();\n    this.setRowNumbers();\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n    // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n    // taller rows\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n    for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var codeword = codewords[codewordsRow];\n      //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n      //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n      //        SimpleLog.log(LEVEL.WARNING,\n      //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n      //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n      //        codewords[codewordsRow] = null;\n      //      }\n      var rowDifference = codeword.getRowNumber() - barcodeRow;\n      // TODO improve handling with case where first row indicator doesn't start with 0\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (rowDifference < 0 || codeword.getRowNumber() >= barcodeMetadata.getRowCount() || rowDifference > codewordsRow) {\n        codewords[codewordsRow] = null;\n      } else {\n        var checkedRows = void 0;\n        if (maxRowHeight > 2) {\n          checkedRows = (maxRowHeight - 2) * rowDifference;\n        } else {\n          checkedRows = rowDifference;\n        }\n        var closePreviousCodewordFound = checkedRows >= codewordsRow;\n        for (var i /*int*/ = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n          // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n          // This should hopefully get rid of most problems already.\n          closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n        }\n        if (closePreviousCodewordFound) {\n          codewords[codewordsRow] = null;\n        } else {\n          barcodeRow = codeword.getRowNumber();\n          currentRowHeight = 1;\n        }\n      }\n    }\n    // return (int) (averageRowHeight + 0.5);\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n    var e_2, _a;\n    var barcodeMetadata = this.getBarcodeMetadata();\n    if (barcodeMetadata == null) {\n      return null;\n    }\n    this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n    var result = new Int32Array(barcodeMetadata.getRowCount());\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value /*Codeword*/;\n        if (codeword != null) {\n          var rowNumber = codeword.getRowNumber();\n          if (rowNumber >= result.length) {\n            // We have more rows than the barcode metadata allows for, ignore them.\n            continue;\n          }\n          result[rowNumber]++;\n        } // else throw exception?\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return result;\n  };\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n  DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n    var codewords = this.getCodewords();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n    for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var codeword = codewords[codewordsRow];\n      codeword.setRowNumberAsRowIndicatorColumn();\n      var rowDifference = codeword.getRowNumber() - barcodeRow;\n      // TODO improve handling with case where first row indicator doesn't start with 0\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n        codewords[codewordsRow] = null;\n      } else {\n        barcodeRow = codeword.getRowNumber();\n        currentRowHeight = 1;\n      }\n    }\n    // return (int) (averageRowHeight + 0.5);\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n    var e_3, _a;\n    var codewords = this.getCodewords();\n    var barcodeColumnCount = new BarcodeValue_1.default();\n    var barcodeRowCountUpperPart = new BarcodeValue_1.default();\n    var barcodeRowCountLowerPart = new BarcodeValue_1.default();\n    var barcodeECLevel = new BarcodeValue_1.default();\n    try {\n      for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n        var codeword = codewords_1_1.value /*Codeword*/;\n        if (codeword == null) {\n          continue;\n        }\n        codeword.setRowNumberAsRowIndicatorColumn();\n        var rowIndicatorValue = codeword.getValue() % 30;\n        var codewordRowNumber = codeword.getRowNumber();\n        if (!this._isLeft) {\n          codewordRowNumber += 2;\n        }\n        switch (codewordRowNumber % 3) {\n          case 0:\n            barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n            break;\n          case 1:\n            barcodeECLevel.setValue(rowIndicatorValue / 3);\n            barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n            break;\n          case 2:\n            barcodeColumnCount.setValue(rowIndicatorValue + 1);\n            break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    // Maybe we should check if we have ambiguous values?\n    if (barcodeColumnCount.getValue().length === 0 || barcodeRowCountUpperPart.getValue().length === 0 || barcodeRowCountLowerPart.getValue().length === 0 || barcodeECLevel.getValue().length === 0 || barcodeColumnCount.getValue()[0] < 1 || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_1.default.MIN_ROWS_IN_BARCODE || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_1.default.MAX_ROWS_IN_BARCODE) {\n      return null;\n    }\n    var barcodeMetadata = new BarcodeMetadata_1.default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    return barcodeMetadata;\n  };\n  DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n    // Remove codewords which do not match the metadata\n    // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n    for (var codewordRow /*int*/ = 0; codewordRow < codewords.length; codewordRow++) {\n      var codeword = codewords[codewordRow];\n      if (codewords[codewordRow] == null) {\n        continue;\n      }\n      var rowIndicatorValue = codeword.getValue() % 30;\n      var codewordRowNumber = codeword.getRowNumber();\n      if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n        codewords[codewordRow] = null;\n        continue;\n      }\n      if (!this._isLeft) {\n        codewordRowNumber += 2;\n      }\n      switch (codewordRowNumber % 3) {\n        case 0:\n          if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n        case 1:\n          if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() || rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n        case 2:\n          if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n      }\n    }\n  };\n  DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n    return this._isLeft;\n  };\n  // @Override\n  DetectionResultRowIndicatorColumn.prototype.toString = function () {\n    return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n  };\n  return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn_1.default);\nexports.default = DetectionResultRowIndicatorColumn;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/DetectionResultRowIndicatorColumn.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar BarcodeMetadata_1 = require(\"./BarcodeMetadata\");\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResultRowIndicatorColumn = /** @class */ (function (_super) {\n    __extends(DetectionResultRowIndicatorColumn, _super);\n    function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n        var _this = _super.call(this, boundingBox) || this;\n        _this._isLeft = isLeft;\n        return _this;\n    }\n    DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var codeword = _c.value /*Codeword*/;\n                if (codeword != null) {\n                    codeword.setRowNumberAsRowIndicatorColumn();\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    // TODO implement properly\n    // TODO maybe we should add missing codewords to store the correct row number to make\n    // finding row numbers for other columns easier\n    // use row height count to make detection of invalid row numbers more reliable\n    DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n        var codewords = this.getCodewords();\n        this.setRowNumbers();\n        this.removeIncorrectCodewords(codewords, barcodeMetadata);\n        var boundingBox = this.getBoundingBox();\n        var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n        var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n        var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n        var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n        // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n        // taller rows\n        // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n        var barcodeRow = -1;\n        var maxRowHeight = 1;\n        var currentRowHeight = 0;\n        for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var codeword = codewords[codewordsRow];\n            //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n            //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n            //        SimpleLog.log(LEVEL.WARNING,\n            //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n            //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n            //        codewords[codewordsRow] = null;\n            //      }\n            var rowDifference = codeword.getRowNumber() - barcodeRow;\n            // TODO improve handling with case where first row indicator doesn't start with 0\n            if (rowDifference === 0) {\n                currentRowHeight++;\n            }\n            else if (rowDifference === 1) {\n                maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n                currentRowHeight = 1;\n                barcodeRow = codeword.getRowNumber();\n            }\n            else if (rowDifference < 0 ||\n                codeword.getRowNumber() >= barcodeMetadata.getRowCount() ||\n                rowDifference > codewordsRow) {\n                codewords[codewordsRow] = null;\n            }\n            else {\n                var checkedRows = void 0;\n                if (maxRowHeight > 2) {\n                    checkedRows = (maxRowHeight - 2) * rowDifference;\n                }\n                else {\n                    checkedRows = rowDifference;\n                }\n                var closePreviousCodewordFound = checkedRows >= codewordsRow;\n                for (var i /*int*/ = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n                    // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n                    // This should hopefully get rid of most problems already.\n                    closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n                }\n                if (closePreviousCodewordFound) {\n                    codewords[codewordsRow] = null;\n                }\n                else {\n                    barcodeRow = codeword.getRowNumber();\n                    currentRowHeight = 1;\n                }\n            }\n        }\n        // return (int) (averageRowHeight + 0.5);\n    };\n    DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n        var e_2, _a;\n        var barcodeMetadata = this.getBarcodeMetadata();\n        if (barcodeMetadata == null) {\n            return null;\n        }\n        this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n        var result = new Int32Array(barcodeMetadata.getRowCount());\n        try {\n            for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var codeword = _c.value /*Codeword*/;\n                if (codeword != null) {\n                    var rowNumber = codeword.getRowNumber();\n                    if (rowNumber >= result.length) {\n                        // We have more rows than the barcode metadata allows for, ignore them.\n                        continue;\n                    }\n                    result[rowNumber]++;\n                } // else throw exception?\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return result;\n    };\n    // TODO maybe we should add missing codewords to store the correct row number to make\n    // finding row numbers for other columns easier\n    // use row height count to make detection of invalid row numbers more reliable\n    DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n        var boundingBox = this.getBoundingBox();\n        var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n        var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n        var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n        var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n        // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n        var codewords = this.getCodewords();\n        var barcodeRow = -1;\n        var maxRowHeight = 1;\n        var currentRowHeight = 0;\n        for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var codeword = codewords[codewordsRow];\n            codeword.setRowNumberAsRowIndicatorColumn();\n            var rowDifference = codeword.getRowNumber() - barcodeRow;\n            // TODO improve handling with case where first row indicator doesn't start with 0\n            if (rowDifference === 0) {\n                currentRowHeight++;\n            }\n            else if (rowDifference === 1) {\n                maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n                currentRowHeight = 1;\n                barcodeRow = codeword.getRowNumber();\n            }\n            else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n                codewords[codewordsRow] = null;\n            }\n            else {\n                barcodeRow = codeword.getRowNumber();\n                currentRowHeight = 1;\n            }\n        }\n        // return (int) (averageRowHeight + 0.5);\n    };\n    DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n        var e_3, _a;\n        var codewords = this.getCodewords();\n        var barcodeColumnCount = new BarcodeValue_1.default();\n        var barcodeRowCountUpperPart = new BarcodeValue_1.default();\n        var barcodeRowCountLowerPart = new BarcodeValue_1.default();\n        var barcodeECLevel = new BarcodeValue_1.default();\n        try {\n            for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n                var codeword = codewords_1_1.value /*Codeword*/;\n                if (codeword == null) {\n                    continue;\n                }\n                codeword.setRowNumberAsRowIndicatorColumn();\n                var rowIndicatorValue = codeword.getValue() % 30;\n                var codewordRowNumber = codeword.getRowNumber();\n                if (!this._isLeft) {\n                    codewordRowNumber += 2;\n                }\n                switch (codewordRowNumber % 3) {\n                    case 0:\n                        barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n                        break;\n                    case 1:\n                        barcodeECLevel.setValue(rowIndicatorValue / 3);\n                        barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n                        break;\n                    case 2:\n                        barcodeColumnCount.setValue(rowIndicatorValue + 1);\n                        break;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        // Maybe we should check if we have ambiguous values?\n        if ((barcodeColumnCount.getValue().length === 0) ||\n            (barcodeRowCountUpperPart.getValue().length === 0) ||\n            (barcodeRowCountLowerPart.getValue().length === 0) ||\n            (barcodeECLevel.getValue().length === 0) ||\n            barcodeColumnCount.getValue()[0] < 1 ||\n            barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_1.default.MIN_ROWS_IN_BARCODE ||\n            barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_1.default.MAX_ROWS_IN_BARCODE) {\n            return null;\n        }\n        var barcodeMetadata = new BarcodeMetadata_1.default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n        this.removeIncorrectCodewords(codewords, barcodeMetadata);\n        return barcodeMetadata;\n    };\n    DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n        // Remove codewords which do not match the metadata\n        // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n        for (var codewordRow /*int*/ = 0; codewordRow < codewords.length; codewordRow++) {\n            var codeword = codewords[codewordRow];\n            if (codewords[codewordRow] == null) {\n                continue;\n            }\n            var rowIndicatorValue = codeword.getValue() % 30;\n            var codewordRowNumber = codeword.getRowNumber();\n            if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n                codewords[codewordRow] = null;\n                continue;\n            }\n            if (!this._isLeft) {\n                codewordRowNumber += 2;\n            }\n            switch (codewordRowNumber % 3) {\n                case 0:\n                    if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n                case 1:\n                    if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() ||\n                        rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n                case 2:\n                    if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n            }\n        }\n    };\n    DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n        return this._isLeft;\n    };\n    // @Override\n    DetectionResultRowIndicatorColumn.prototype.toString = function () {\n        return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n    };\n    return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn_1.default));\nexports.default = DetectionResultRowIndicatorColumn;\n//# sourceMappingURL=DetectionResultRowIndicatorColumn.js.map"]},"metadata":{},"sourceType":"script"}