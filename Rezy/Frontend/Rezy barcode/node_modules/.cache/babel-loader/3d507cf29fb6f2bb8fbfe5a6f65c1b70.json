{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVOTRADE\\\\Desktop\\\\Rezy barcode\\\\scanner\\\\scanner\\\\src\\\\scan\\\\Scan.js\",\n  _s2 = $RefreshSig$();\nimport \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\n\n// const URL = \"https://backend-products-scan.onrender.com:3500\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3500';\nfunction Scan() {\n  _s2();\n  var _s = $RefreshSig$();\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [stopStream, setStopStream] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n  const [open, setOpen] = useState(false);\n  const handleClose = () => {\n    postToArduino(\"1\");\n    setOpen(false);\n  };\n  const postToArduino = option => {\n    const headers = {\n      \"Content-Type\": \"text/html\"\n    };\n    let url = `http://rezy.lat/esp-outputs-action.php?action=output_update&id=3&state=1`;\n    fetch(url, {\n      headers\n    }).then(response => {\n      if (response.status === 200) {\n        setData(\"Green led is on\");\n        console.log(setData);\n      } else {\n        setData(\"Green led is off\");\n      }\n    }).catch(err => {\n      console.log(err);\n      setOpen(false);\n    });\n  };\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n  const handleErrorWebCam = error => {\n    console.log(error);\n  };\n  const parseAndSendToEndpoint = result => {\n    _s();\n    // Create an object to hold the data to be sent\n    const dataToSend = {\n      result: result\n    };\n\n    // Define the headers for the POST request\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    useEffect(() => {\n      fetch('http://localhost:9000/api/data').then(response => response.json()).then(data => {\n        setData(data);\n        setIsLoading(false);\n        // Assuming the API response has a 'balance' property, set it here\n        if (data && data.balance !== undefined) {\n          setBalance(data.balance / 100);\n        }\n      }).catch(error => console.error('Error fetching data:', error));\n    }, []);\n\n    // Make the POST request to the endpoint\n    fetch('http://127.0.0.1:3500/scan', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(dataToSend)\n    }).then(response => {\n      if (response.status === 200) {\n        // Request was successful\n        return response.json();\n      } else {\n        // Handle errors here\n        console.error('Error sending data to the endpoint');\n      }\n    }).then(responseData => {\n      // Handle the response from the endpoint if needed\n      console.log('Response from endpoint:', responseData);\n    }).catch(error => {\n      // Handle any network errors here\n      console.error('Network error:', error);\n    });\n  };\n  _s(parseAndSendToEndpoint, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleScanWebCam = result => {\n    if (result) {\n      const resultText = result.toString(); // Convert result to a string\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText); // Use resultText to fetch the product\n      }\n      // Call the function to parse and send the data\n      parseAndSendToEndpoint(resultText);\n    }\n  };\n  const getProduct = id => {\n    const foundElement = filteredData.find(item => item.Id === id);\n    if (foundElement) {\n      // Do something with the found element\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"title\",\n        children: \"Step 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan a selected product listed on www.rezy.com, aim to the camera and\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Wait for the confirmation popup, once the bottle is recognized , Accept and deposit your bottle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          width: window.innerWidth < 1000 ? \"100%\" : \"25%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xl: 12,\n          lg: 12,\n          md: 12,\n          sm: 12,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(BarcodeScannerComponent, {\n            width: 400,\n            height: 400,\n            facingMode: \"environment\"\n            // stopStream={stopStream}\n            ,\n            onUpdate: (err, result) => {\n              if (result) {\n                handleScanWebCam(result.text);\n                console.log(result);\n\n                // setData(result.text);\n                // setStopStream(true);\n              } else {\n                setData(\".....Waiting for your bottle\");\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonStyle, {\n        Text: \"Scan!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalStyle, {\n      flag: open,\n      close: handleClose,\n      product: producto,\n      accept: handleAccept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s2(Scan, \"yPhIYLFRDL438uaWG6QUCUlDQ5E=\", false, function () {\n  return [useNavigate];\n});\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["ButtonStyle","ModalStyle","React","useState","QrReader","Grid","useNavigate","Barcode","BarcodeScannerComponent","products","jsxDEV","_jsxDEV","URL","Scan","_s2","_s","$RefreshSig$","initialData","data","setData","producto","setProducto","stopStream","setStopStream","filteredData","setFilteredData","navigate","open","setOpen","handleClose","postToArduino","option","headers","url","fetch","then","response","status","console","log","catch","err","handleAccept","setTimeout","handleErrorWebCam","error","parseAndSendToEndpoint","result","dataToSend","useEffect","json","setIsLoading","balance","undefined","setBalance","method","body","JSON","stringify","responseData","handleScanWebCam","resultText","toString","getProduct","id","foundElement","find","item","Id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","container","style","width","window","innerWidth","xl","lg","md","sm","xs","height","facingMode","onUpdate","text","Text","flag","close","product","accept","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json'\n\n// const URL = \"https://backend-products-scan.onrender.com:3500\";\nconst URL = 'http://localhost:3500';\n\nfunction Scan() {\n  const initialData = products\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [stopStream, setStopStream] = useState(false);\n  const [filteredData, setFilteredData] = useState(initialData);\n\n  let navigate = useNavigate();\n\n  const [open, setOpen] = useState(false);\n  const handleClose = () => {\n    postToArduino(\"1\");\n    setOpen(false);\n  };\n\n  const postToArduino = (option) => {\n    const headers = {\n      \"Content-Type\": \"text/html\",\n    };\n    let url = `http://rezy.lat/esp-outputs-action.php?action=output_update&id=3&state=1`;\n    fetch(url, { headers })\n      .then((response) => {\n        if (response.status === 200) {\n          setData(\"Green led is on\");\n          console.log(setData)\n        } else {\n          setData(\"Green led is off\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setOpen(false);\n      });\n  };\n\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  };\n\n  const parseAndSendToEndpoint = (result) => {\n    // Create an object to hold the data to be sent\n    const dataToSend = { result: result };\n\n    // Define the headers for the POST request\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n\n\n    useEffect(() => {\n      fetch('http://localhost:9000/api/data')\n        .then((response) => response.json())\n        .then((data) => {\n          setData(data);\n          setIsLoading(false);\n          // Assuming the API response has a 'balance' property, set it here\n          if (data && data.balance !== undefined) {\n            setBalance(data.balance/100);\n          }\n        })\n        .catch((error) => console.error('Error fetching data:', error));\n    }, []);\n    \n    // Make the POST request to the endpoint\n    fetch('http://127.0.0.1:3500/scan', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(dataToSend),\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          // Request was successful\n          return response.json();\n        } else {\n          // Handle errors here\n          console.error('Error sending data to the endpoint');\n        }\n      })\n      .then((responseData) => {\n        // Handle the response from the endpoint if needed\n        console.log('Response from endpoint:', responseData);\n      })\n      .catch((error) => {\n        // Handle any network errors here\n        console.error('Network error:', error);\n      });\n  };\n\n  const handleScanWebCam = (result) => {\n  if (result) {\n    const resultText = result.toString(); // Convert result to a string\n    setData(resultText);\n    if (!open) {\n      getProduct(resultText); // Use resultText to fetch the product\n    }\n    // Call the function to parse and send the data\n    parseAndSendToEndpoint(resultText);\n  }\n};\n\n  const getProduct = (id) => {\n    const foundElement = filteredData.find(item => item.Id === id);\n\n    if (foundElement) {\n      // Do something with the found element\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      // Element with the given id was not found\n      // console.log('Element not found');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <label className=\"title\">Step 1</label>\n        <p>\n          Scan a selected product listed on www.rezy.com, aim to the camera and</p>\n          <p> Wait for the confirmation popup, once the bottle is recognized , Accept and deposit your bottle</p>\n        \n\n        <Grid\n          container\n          style={{ width: window.innerWidth < 1000 ? \"100%\" : \"25%\" }}\n        >\n          <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n            <BarcodeScannerComponent\n              width={400}\n              height={400}\n              facingMode=\"environment\"\n              // stopStream={stopStream}\n              onUpdate={(err, result) => {\n                if (result) {\n                  handleScanWebCam(result.text)\n                  console.log(result);\n                 \n                  // setData(result.text);\n                  // setStopStream(true);\n                } else {\n                  setData(\".....Waiting for your bottle\");\n                }\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        <p>{data}</p>\n        <ButtonStyle Text={\"Scan!\"}></ButtonStyle>\n      </div>\n      <ModalStyle\n        flag={open}\n        close={handleClose}\n        product={producto}\n        accept={handleAccept}\n      ></ModalStyle>\n    </div>\n  );\n}\n\nexport default Scan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}