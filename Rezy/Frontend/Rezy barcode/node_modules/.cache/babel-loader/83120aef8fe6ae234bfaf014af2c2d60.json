{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar UnsupportedOperationException_1 = require(\"../UnsupportedOperationException\");\nvar CharacterSetECI_1 = require(\"../common/CharacterSetECI\");\n/**\n * Responsible for en/decoding strings.\n */\nvar StringEncoding = /** @class */function () {\n  function StringEncoding() {}\n  /**\n   * Decodes some Uint8Array to a string format.\n   */\n  StringEncoding.decode = function (bytes, encoding) {\n    var encodingName = this.encodingName(encoding);\n    if (this.customDecoder) {\n      return this.customDecoder(bytes, encodingName);\n    }\n    // Increases browser support.\n    if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n      return this.decodeFallback(bytes, encodingName);\n    }\n    return new TextDecoder(encodingName).decode(bytes);\n  };\n  /**\n   * Checks if the decoding method should use the fallback for decoding\n   * once Node TextDecoder doesn't support all encoding formats.\n   *\n   * @param encodingName\n   */\n  StringEncoding.shouldDecodeOnFallback = function (encodingName) {\n    return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n  };\n  /**\n   * Encodes some string into a Uint8Array.\n   */\n  StringEncoding.encode = function (s, encoding) {\n    var encodingName = this.encodingName(encoding);\n    if (this.customEncoder) {\n      return this.customEncoder(s, encodingName);\n    }\n    // Increases browser support.\n    if (typeof TextEncoder === 'undefined') {\n      return this.encodeFallback(s);\n    }\n    // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n    return new TextEncoder().encode(s);\n  };\n  StringEncoding.isBrowser = function () {\n    return typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]';\n  };\n  /**\n   * Returns the string value from some encoding character set.\n   */\n  StringEncoding.encodingName = function (encoding) {\n    return typeof encoding === 'string' ? encoding : encoding.getName();\n  };\n  /**\n   * Returns character set from some encoding character set.\n   */\n  StringEncoding.encodingCharacterSet = function (encoding) {\n    if (encoding instanceof CharacterSetECI_1.default) {\n      return encoding;\n    }\n    return CharacterSetECI_1.default.getCharacterSetECIByName(encoding);\n  };\n  /**\n   * Runs a fallback for the native decoding funcion.\n   */\n  StringEncoding.decodeFallback = function (bytes, encoding) {\n    var characterSet = this.encodingCharacterSet(encoding);\n    if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n      var s = '';\n      for (var i = 0, length_1 = bytes.length; i < length_1; i++) {\n        var h = bytes[i].toString(16);\n        if (h.length < 2) {\n          h = '0' + h;\n        }\n        s += '%' + h;\n      }\n      return decodeURIComponent(s);\n    }\n    if (characterSet.equals(CharacterSetECI_1.default.UnicodeBigUnmarked)) {\n      return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n    }\n    throw new UnsupportedOperationException_1.default(\"Encoding \" + this.encodingName(encoding) + \" not supported by fallback.\");\n  };\n  StringEncoding.isDecodeFallbackSupported = function (characterSet) {\n    return characterSet.equals(CharacterSetECI_1.default.UTF8) || characterSet.equals(CharacterSetECI_1.default.ISO8859_1) || characterSet.equals(CharacterSetECI_1.default.ASCII);\n  };\n  /**\n   * Runs a fallback for the native encoding funcion.\n   *\n   * @see https://stackoverflow.com/a/17192845/4367683\n   */\n  StringEncoding.encodeFallback = function (s) {\n    var encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n    var charList = encodedURIstring.split('');\n    var uintArray = [];\n    for (var i = 0; i < charList.length; i++) {\n      uintArray.push(charList[i].charCodeAt(0));\n    }\n    return new Uint8Array(uintArray);\n  };\n  return StringEncoding;\n}();\nexports.default = StringEncoding;","map":{"version":3,"sources":["../../../src/core/util/StringEncoding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UnsupportedOperationException_1 = require(\"../UnsupportedOperationException\");\nvar CharacterSetECI_1 = require(\"../common/CharacterSetECI\");\n/**\n * Responsible for en/decoding strings.\n */\nvar StringEncoding = /** @class */ (function () {\n    function StringEncoding() {\n    }\n    /**\n     * Decodes some Uint8Array to a string format.\n     */\n    StringEncoding.decode = function (bytes, encoding) {\n        var encodingName = this.encodingName(encoding);\n        if (this.customDecoder) {\n            return this.customDecoder(bytes, encodingName);\n        }\n        // Increases browser support.\n        if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n            return this.decodeFallback(bytes, encodingName);\n        }\n        return new TextDecoder(encodingName).decode(bytes);\n    };\n    /**\n     * Checks if the decoding method should use the fallback for decoding\n     * once Node TextDecoder doesn't support all encoding formats.\n     *\n     * @param encodingName\n     */\n    StringEncoding.shouldDecodeOnFallback = function (encodingName) {\n        return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n    };\n    /**\n     * Encodes some string into a Uint8Array.\n     */\n    StringEncoding.encode = function (s, encoding) {\n        var encodingName = this.encodingName(encoding);\n        if (this.customEncoder) {\n            return this.customEncoder(s, encodingName);\n        }\n        // Increases browser support.\n        if (typeof TextEncoder === 'undefined') {\n            return this.encodeFallback(s);\n        }\n        // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n        return new TextEncoder().encode(s);\n    };\n    StringEncoding.isBrowser = function () {\n        return (typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]');\n    };\n    /**\n     * Returns the string value from some encoding character set.\n     */\n    StringEncoding.encodingName = function (encoding) {\n        return typeof encoding === 'string'\n            ? encoding\n            : encoding.getName();\n    };\n    /**\n     * Returns character set from some encoding character set.\n     */\n    StringEncoding.encodingCharacterSet = function (encoding) {\n        if (encoding instanceof CharacterSetECI_1.default) {\n            return encoding;\n        }\n        return CharacterSetECI_1.default.getCharacterSetECIByName(encoding);\n    };\n    /**\n     * Runs a fallback for the native decoding funcion.\n     */\n    StringEncoding.decodeFallback = function (bytes, encoding) {\n        var characterSet = this.encodingCharacterSet(encoding);\n        if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n            var s = '';\n            for (var i = 0, length_1 = bytes.length; i < length_1; i++) {\n                var h = bytes[i].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                s += '%' + h;\n            }\n            return decodeURIComponent(s);\n        }\n        if (characterSet.equals(CharacterSetECI_1.default.UnicodeBigUnmarked)) {\n            return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n        }\n        throw new UnsupportedOperationException_1.default(\"Encoding \" + this.encodingName(encoding) + \" not supported by fallback.\");\n    };\n    StringEncoding.isDecodeFallbackSupported = function (characterSet) {\n        return characterSet.equals(CharacterSetECI_1.default.UTF8) ||\n            characterSet.equals(CharacterSetECI_1.default.ISO8859_1) ||\n            characterSet.equals(CharacterSetECI_1.default.ASCII);\n    };\n    /**\n     * Runs a fallback for the native encoding funcion.\n     *\n     * @see https://stackoverflow.com/a/17192845/4367683\n     */\n    StringEncoding.encodeFallback = function (s) {\n        var encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n        var charList = encodedURIstring.split('');\n        var uintArray = [];\n        for (var i = 0; i < charList.length; i++) {\n            uintArray.push(charList[i].charCodeAt(0));\n        }\n        return new Uint8Array(uintArray);\n    };\n    return StringEncoding;\n}());\nexports.default = StringEncoding;\n//# sourceMappingURL=StringEncoding.js.map"]},"metadata":{},"sourceType":"script"}