{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n  StringUtils.castAsNonUtf8Char = function (code, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    }\n    // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n    // you can see this method as a Java version of String.fromCharCode\n    var e = encoding ? encoding.getName() : this.ISO88591;\n    // use passed format (fromCharCode will return UTF8 encoding)\n    return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n  };\n  /**\n   * @param bytes bytes encoding a string, whose encoding should be guessed\n   * @param hints decode hints if applicable\n   * @return name of guessed encoding; at the moment will only guess one of:\n   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n   *  default encoding if none of these can possibly be correct\n   */\n  StringUtils.guessEncoding = function (bytes, hints) {\n    if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n      return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n    }\n    // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n    // which should be by far the most common encodings.\n    var length = bytes.length;\n    var canBeISO88591 = true;\n    var canBeShiftJIS = true;\n    var canBeUTF8 = true;\n    var utf8BytesLeft = 0;\n    // int utf8LowChars = 0\n    var utf2BytesChars = 0;\n    var utf3BytesChars = 0;\n    var utf4BytesChars = 0;\n    var sjisBytesLeft = 0;\n    // int sjisLowChars = 0\n    var sjisKatakanaChars = 0;\n    // int sjisDoubleBytesChars = 0\n    var sjisCurKatakanaWordLength = 0;\n    var sjisCurDoubleBytesWordLength = 0;\n    var sjisMaxKatakanaWordLength = 0;\n    var sjisMaxDoubleBytesWordLength = 0;\n    // int isoLowChars = 0\n    // int isoHighChars = 0\n    var isoHighOther = 0;\n    var utf8bom = bytes.length > 3 && bytes[0] === /*(byte) */0xEF && bytes[1] === /*(byte) */0xBB && bytes[2] === /*(byte) */0xBF;\n    for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n      var value = bytes[i] & 0xFF;\n      // UTF-8 stuff\n      if (canBeUTF8) {\n        if (utf8BytesLeft > 0) {\n          if ((value & 0x80) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft--;\n          }\n        } else if ((value & 0x80) !== 0) {\n          if ((value & 0x40) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft++;\n            if ((value & 0x20) === 0) {\n              utf2BytesChars++;\n            } else {\n              utf8BytesLeft++;\n              if ((value & 0x10) === 0) {\n                utf3BytesChars++;\n              } else {\n                utf8BytesLeft++;\n                if ((value & 0x08) === 0) {\n                  utf4BytesChars++;\n                } else {\n                  canBeUTF8 = false;\n                }\n              }\n            }\n          }\n        } // else {\n        // utf8LowChars++\n        // }\n      }\n      // ISO-8859-1 stuff\n      if (canBeISO88591) {\n        if (value > 0x7F && value < 0xA0) {\n          canBeISO88591 = false;\n        } else if (value > 0x9F) {\n          if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n            isoHighOther++;\n          } // else {\n          // isoHighChars++\n          // }\n        } // else {\n        // isoLowChars++\n        // }\n      }\n      // Shift_JIS stuff\n      if (canBeShiftJIS) {\n        if (sjisBytesLeft > 0) {\n          if (value < 0x40 || value === 0x7F || value > 0xFC) {\n            canBeShiftJIS = false;\n          } else {\n            sjisBytesLeft--;\n          }\n        } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n          canBeShiftJIS = false;\n        } else if (value > 0xA0 && value < 0xE0) {\n          sjisKatakanaChars++;\n          sjisCurDoubleBytesWordLength = 0;\n          sjisCurKatakanaWordLength++;\n          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n          }\n        } else if (value > 0x7F) {\n          sjisBytesLeft++;\n          // sjisDoubleBytesChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength++;\n          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n          }\n        } else {\n          // sjisLowChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength = 0;\n        }\n      }\n    }\n    if (canBeUTF8 && utf8BytesLeft > 0) {\n      canBeUTF8 = false;\n    }\n    if (canBeShiftJIS && sjisBytesLeft > 0) {\n      canBeShiftJIS = false;\n    }\n    // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n      return StringUtils.UTF8;\n    }\n    // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n    if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n      return StringUtils.SHIFT_JIS;\n    }\n    // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n    // - If we saw\n    //   - only two consecutive katakana chars in the whole text, or\n    //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n    // - then we conclude Shift_JIS, else ISO-8859-1\n    if (canBeISO88591 && canBeShiftJIS) {\n      return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n    }\n    // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n    if (canBeISO88591) {\n      return StringUtils.ISO88591;\n    }\n    if (canBeShiftJIS) {\n      return StringUtils.SHIFT_JIS;\n    }\n    if (canBeUTF8) {\n      return StringUtils.UTF8;\n    }\n    // Otherwise, we take a wild guess with platform encoding\n    return StringUtils.PLATFORM_DEFAULT_ENCODING;\n  };\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n  StringUtils.format = function (append) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var i = -1;\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (args[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n      switch (p4) {\n        case 's':\n          val = args[i];\n          break;\n        case 'c':\n          val = args[i][0];\n          break;\n        case 'f':\n          val = parseFloat(args[i]).toFixed(exp);\n          break;\n        case 'p':\n          val = parseFloat(args[i]).toPrecision(exp);\n          break;\n        case 'e':\n          val = parseFloat(args[i]).toExponential(exp);\n          break;\n        case 'x':\n          val = parseInt(args[i]).toString(base ? base : 16);\n          break;\n        case 'd':\n          val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1); /* padding size */\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' '; /* isnull? */\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n      return val;\n    }\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return append.replace(regex, callback);\n  };\n  /**\n   *\n   */\n  StringUtils.getBytes = function (str, encoding) {\n    return StringEncoding_1.default.encode(str, encoding);\n  };\n  /**\n   * Returns the charcode at the specified index or at index zero.\n   */\n  StringUtils.getCharCode = function (str, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n    return str.charCodeAt(index);\n  };\n  /**\n   * Returns char for given charcode\n   */\n  StringUtils.getCharAt = function (charCode) {\n    return String.fromCharCode(charCode);\n  };\n  StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n  StringUtils.GB2312 = 'GB2312';\n  StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n  StringUtils.EUC_JP = 'EUC_JP';\n  StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n  StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n  StringUtils.ASSUME_SHIFT_JIS = false;\n  return StringUtils;\n}();\nexports.default = StringUtils;","map":{"version":3,"names":["DecodeHintType_1","require","CharacterSetECI_1","StringEncoding_1","StringUtils","castAsNonUtf8Char","code","encoding","e","getName","ISO88591","default","decode","Uint8Array","guessEncoding","bytes","hints","undefined","get","CHARACTER_SET","toString","length","canBeISO88591","canBeShiftJIS","canBeUTF8","utf8BytesLeft","utf2BytesChars","utf3BytesChars","utf4BytesChars","sjisBytesLeft","sjisKatakanaChars","sjisCurKatakanaWordLength","sjisCurDoubleBytesWordLength","sjisMaxKatakanaWordLength","sjisMaxDoubleBytesWordLength","isoHighOther","utf8bom","i","value","UTF8","ASSUME_SHIFT_JIS","SHIFT_JIS","PLATFORM_DEFAULT_ENCODING","format","append","args","_i","arguments","callback","exp","p0","p1","p2","p3","p4","parseInt","substr","base","val","parseFloat","toFixed","toPrecision","toExponential","JSON","stringify","size","ch","regex","replace","getBytes","str","encode","getCharCode","index","charCodeAt","getCharAt","charCode","String","fromCharCode","SJIS","GB2312","ISO8859_1","EUC_JP"],"sources":["../../../src/core/common/StringUtils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}