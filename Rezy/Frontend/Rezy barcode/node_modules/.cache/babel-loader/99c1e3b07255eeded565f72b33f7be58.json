{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.3.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  return path.replace(/^:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref3.pathname,\n    _ref3$search = _ref3.search,\n    search = _ref3$search === void 0 ? \"\" : _ref3$search,\n    _ref3$hash = _ref3.hash,\n    hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n          key = _step2$value[0];\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 15;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                }); // Send the same navigation through\n\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                deleteBlocker(blockerKey);\n                updateState({\n                  blockers: new Map(state.blockers)\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 15:\n            _context2.next = 17;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 14;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 14:\n            if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 17;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 23;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 34;\n            break;\n          case 23:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 34;\n              break;\n            }\n            _context3.next = 26;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 26:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 29;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 29:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation; // Create a GET request for the loaders\n\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 34:\n            _context3.next = 36;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n          case 36:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 42;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 42:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 44:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (actionMatch.route.action) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              replace = result.location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 17;\n            return startRedirectNavigation(state, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              // Send back an empty object we can use to clear out any prior actionData\n              pendingActionData: {},\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = _extends({\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission);\n              loadingNavigation = navigation;\n            } // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n              formMethod: loadingNavigation.formMethod,\n              formAction: loadingNavigation.formAction,\n              formData: loadingNavigation.formData,\n              formEncType: loadingNavigation.formEncType\n            } : undefined;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 8;\n              break;\n            }\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}));\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 8:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (rf) {\n                var fetcher = state.fetchers.get(rf.key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(rf.key, revalidatingFetcher);\n              });\n              actionData = pendingActionData || state.actionData;\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData ? Object.keys(actionData).length === 0 ? {\n                actionData: null\n              } : {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.set(rf.key, pendingNavigationController);\n            });\n            _context5.next = 13;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 13:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 19;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 19:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 25;\n              break;\n            }\n            _context5.next = 24;\n            return startRedirectNavigation(state, redirect, {\n              replace: replace\n            });\n          case 24:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 25:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 30:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path,\n      match: match,\n      matches: matches\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (match.route.action) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n              isFetchActionRedirect: true\n            }));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 31;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 31:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission, {\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n            // No need to send through errors since we short circuit above\n            fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              fetchControllers.set(staleKey, abortController);\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            _context6.next = 44;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 44:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 50;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 50:\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 56;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 56:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 61:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = _extends({\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 24;\n              break;\n            }\n            _context7.next = 23;\n            return startRedirectNavigation(state, result);\n          case 23:\n            return _context7.abrupt(\"return\");\n          case 24:\n            if (!isErrorResult(result)) {\n              _context7.next = 29;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 29:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 33:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location,\n            // TODO: This can be removed once we get rid of useTransition in Remix v2\n            _extends({\n              _isRedirect: true\n            }, isFetchActionRedirect ? {\n              _isFetchActionRedirect: true\n            } : {}));\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n            if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n              _context8.next = 9;\n              break;\n            }\n            newOrigin = init.history.createURL(redirect.location).origin;\n            if (!(window.location.origin !== newOrigin)) {\n              _context8.next = 9;\n              break;\n            }\n            if (replace) {\n              window.location.replace(redirect.location);\n            } else {\n              window.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 9:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n            if (!submission && formMethod && formAction && formData && formEncType) {\n              submission = {\n                formMethod: formMethod,\n                formAction: formAction,\n                formEncType: formEncType,\n                formData: formData\n              };\n            } // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n              _context8.next = 18;\n              break;\n            }\n            _context8.next = 16;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, submission, {\n                formAction: redirect.location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 16:\n            _context8.next = 20;\n            break;\n          case 18:\n            _context8.next = 20;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: submission ? submission.formMethod : undefined,\n                formAction: submission ? submission.formAction : undefined,\n                formEncType: submission ? submission.formEncType : undefined,\n                formData: submission ? submission.formData : undefined\n              },\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 20:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (f) {\n              return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename);\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, request.signal, true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          id = _step5$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error3 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error3),\n              statusCode: _error3.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context11.next = 28;\n              break;\n            }\n            return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context11.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context11.abrupt(\"return\", data);\n          case 32:\n            return _context11.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error4, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (actionMatch.route.action) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            _error4 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context14.next = 19;\n              break;\n            }\n            throw _error4;\n          case 19:\n            result = {\n              type: ResultType.error,\n              error: _error4\n            };\n          case 20:\n            if (!isRouteRequest) {\n              _context14.next = 24;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 23;\n              break;\n            }\n            throw result.error;\n          case 23:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 24:\n            if (!isErrorResult(result)) {\n              _context14.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 28;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 28:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            _context14.next = 33;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 33:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 35:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  var submission;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  var defaultShouldRevalidate =\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (f, key) {\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      // This fetcher is not going to be present in the subsequent render so\n      // there's no need to revalidate it\n      return;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // This fetcher was cancelled from a prior action submission - force reload\n      revalidatingFetchers.push(_extends({\n        key: key\n      }, f));\n    } else {\n      // Revalidating fetchers are decoupled from the route matches since they\n      // hit a static href, so they _always_ check shouldRevalidate and the\n      // default is strictly if a revalidation is explicitly required (action\n      // submissions, useRevalidator, X-Remix-Revalidate).\n      var shouldRevalidate = shouldRevalidateLoader(f.match, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        defaultShouldRevalidate: defaultShouldRevalidate\n      }));\n      if (shouldRevalidate) {\n        revalidatingFetchers.push(_extends({\n          key: key\n        }, f));\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (basename === void 0) {\n            basename = \"/\";\n          }\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          abortPromise = new Promise(function (_, r) {\n            return reject = r;\n          });\n          onReject = function onReject() {\n            return reject();\n          };\n          request.signal.addEventListener(\"abort\", onReject);\n          _context16.prev = 6;\n          handler = match.route[type];\n          invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n          _context16.next = 11;\n          return Promise.race([handler({\n            request: request,\n            params: match.params,\n            context: requestContext\n          }), abortPromise]);\n        case 11:\n          result = _context16.sent;\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context16.next = 19;\n          break;\n        case 15:\n          _context16.prev = 15;\n          _context16.t0 = _context16[\"catch\"](6);\n          resultType = ResultType.error;\n          result = _context16.t0;\n        case 19:\n          _context16.prev = 19;\n          request.signal.removeEventListener(\"abort\", onReject);\n          return _context16.finish(19);\n        case 22:\n          if (!isResponse(result)) {\n            _context16.next = 47;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context16.next = 32;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n          if (!ABSOLUTE_URL_REGEX.test(location)) {\n            activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n            routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n              return match.pathnameBase;\n            });\n            resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n            invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n            if (basename) {\n              path = resolvedLocation.pathname;\n              resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n            }\n            location = createPath(resolvedLocation);\n          } else if (!isStaticRequest) {\n            // Strip off the protocol+origin for same-origin absolute redirects.\n            // If this is a static reques, we can let it go back to the browser\n            // as-is\n            currentUrl = new URL(request.url);\n            url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n            if (url.origin === currentUrl.origin) {\n              location = url.pathname + url.search + url.hash;\n            }\n          } // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context16.next = 31;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 31:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 32:\n          if (!isRouteRequest) {\n            _context16.next = 34;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 34:\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context16.next = 41;\n            break;\n          }\n          _context16.next = 38;\n          return result.json();\n        case 38:\n          data = _context16.sent;\n          _context16.next = 44;\n          break;\n        case 41:\n          _context16.next = 43;\n          return result.text();\n        case 43:\n          data = _context16.sent;\n        case 44:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 46;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 46:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 47:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 49;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 49:\n          if (!(result instanceof DeferredData)) {\n            _context16.next = 51;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result\n          });\n        case 51:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 52:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator7 = _createForOfIteratorHelper(matches),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n    pathname = _ref11.pathname,\n    routeId = _ref11.routeId,\n    method = _ref11.method,\n    type = _ref11.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader;\n            return _regeneratorRuntime().wrap(function _loop$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index];\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context17.next = 7;\n                    break;\n                  }\n                  _context17.next = 7;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 7:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          index++;\n          _context18.next = 2;\n          break;\n        case 7:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context19.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context19.sent;\n          if (!aborted) {\n            _context19.next = 6;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context19.next = 14;\n            break;\n          }\n          _context19.prev = 7;\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context19.prev = 11;\n          _context19.t0 = _context19[\"catch\"](7);\n          return _context19.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context19.t0\n          });\n        case 14:\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","deferredKeys","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionData","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","_isFetchActionRedirect","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","isStaticRequest","onReject","handler","resultType","activeMatches","resolvedLocation","protocol","contentType","text","deferred","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}