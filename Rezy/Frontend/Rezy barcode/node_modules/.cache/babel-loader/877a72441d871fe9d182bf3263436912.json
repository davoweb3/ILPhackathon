{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Result_1 = require(\"../Result\");\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar ResultMetadataType_1 = require(\"../ResultMetadataType\");\nvar System_1 = require(\"../util/System\");\nvar Decoder_1 = require(\"./decoder/Decoder\");\nvar Detector_1 = require(\"./detector/Detector\");\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\nvar AztecReader = /** @class */function () {\n  function AztecReader() {}\n  /**\n   * Locates and decodes a Data Matrix code in an image.\n   *\n   * @return a String representing the content encoded by the Data Matrix code\n   * @throws NotFoundException if a Data Matrix code cannot be found\n   * @throws FormatException if a Data Matrix code cannot be decoded\n   */\n  AztecReader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    var exception = null;\n    var detector = new Detector_1.default(image.getBlackMatrix());\n    var points = null;\n    var decoderResult = null;\n    try {\n      var detectorResult = detector.detectMirror(false);\n      points = detectorResult.getPoints();\n      this.reportFoundResultPoints(hints, points);\n      decoderResult = new Decoder_1.default().decode(detectorResult);\n    } catch (e) {\n      exception = e;\n    }\n    if (decoderResult == null) {\n      try {\n        var detectorResult = detector.detectMirror(true);\n        points = detectorResult.getPoints();\n        this.reportFoundResultPoints(hints, points);\n        decoderResult = new Decoder_1.default().decode(detectorResult);\n      } catch (e) {\n        if (exception != null) {\n          throw exception;\n        }\n        throw e;\n      }\n    }\n    var result = new Result_1.default(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat_1.default.AZTEC, System_1.default.currentTimeMillis());\n    var byteSegments = decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType_1.default.BYTE_SEGMENTS, byteSegments);\n    }\n    var ecLevel = decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType_1.default.ERROR_CORRECTION_LEVEL, ecLevel);\n    }\n    return result;\n  };\n  AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n    if (hints != null) {\n      var rpcb_1 = hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n      if (rpcb_1 != null) {\n        points.forEach(function (point, idx, arr) {\n          rpcb_1.foundPossibleResultPoint(point);\n        });\n      }\n    }\n  };\n  // @Override\n  AztecReader.prototype.reset = function () {\n    // do nothing\n  };\n  return AztecReader;\n}();\nexports.default = AztecReader;","map":{"version":3,"sources":["../../../src/core/aztec/AztecReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Result_1 = require(\"../Result\");\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar ResultMetadataType_1 = require(\"../ResultMetadataType\");\nvar System_1 = require(\"../util/System\");\nvar Decoder_1 = require(\"./decoder/Decoder\");\nvar Detector_1 = require(\"./detector/Detector\");\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\nvar AztecReader = /** @class */ (function () {\n    function AztecReader() {\n    }\n    /**\n     * Locates and decodes a Data Matrix code in an image.\n     *\n     * @return a String representing the content encoded by the Data Matrix code\n     * @throws NotFoundException if a Data Matrix code cannot be found\n     * @throws FormatException if a Data Matrix code cannot be decoded\n     */\n    AztecReader.prototype.decode = function (image, hints) {\n        if (hints === void 0) { hints = null; }\n        var exception = null;\n        var detector = new Detector_1.default(image.getBlackMatrix());\n        var points = null;\n        var decoderResult = null;\n        try {\n            var detectorResult = detector.detectMirror(false);\n            points = detectorResult.getPoints();\n            this.reportFoundResultPoints(hints, points);\n            decoderResult = new Decoder_1.default().decode(detectorResult);\n        }\n        catch (e) {\n            exception = e;\n        }\n        if (decoderResult == null) {\n            try {\n                var detectorResult = detector.detectMirror(true);\n                points = detectorResult.getPoints();\n                this.reportFoundResultPoints(hints, points);\n                decoderResult = new Decoder_1.default().decode(detectorResult);\n            }\n            catch (e) {\n                if (exception != null) {\n                    throw exception;\n                }\n                throw e;\n            }\n        }\n        var result = new Result_1.default(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat_1.default.AZTEC, System_1.default.currentTimeMillis());\n        var byteSegments = decoderResult.getByteSegments();\n        if (byteSegments != null) {\n            result.putMetadata(ResultMetadataType_1.default.BYTE_SEGMENTS, byteSegments);\n        }\n        var ecLevel = decoderResult.getECLevel();\n        if (ecLevel != null) {\n            result.putMetadata(ResultMetadataType_1.default.ERROR_CORRECTION_LEVEL, ecLevel);\n        }\n        return result;\n    };\n    AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n        if (hints != null) {\n            var rpcb_1 = hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n            if (rpcb_1 != null) {\n                points.forEach(function (point, idx, arr) {\n                    rpcb_1.foundPossibleResultPoint(point);\n                });\n            }\n        }\n    };\n    // @Override\n    AztecReader.prototype.reset = function () {\n        // do nothing\n    };\n    return AztecReader;\n}());\nexports.default = AztecReader;\n//# sourceMappingURL=AztecReader.js.map"]},"metadata":{},"sourceType":"script"}