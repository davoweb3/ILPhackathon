{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar MathUtils_1 = require(\"./MathUtils\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/**\n * <p>\n * Detects a candidate barcode-like rectangular region within an image. It\n * starts around the center of the image, increases the size of the candidate\n * region until it finds a white rectangular region. By keeping track of the\n * last black points it encountered, it determines the corners of the barcode.\n * </p>\n *\n * @author David Olivier\n */\nvar WhiteRectangleDetector = /** @class */function () {\n  // public constructor(private image: BitMatrix) /*throws NotFoundException*/ {\n  //   this(image, INIT_SIZE, image.getWidth() / 2, image.getHeight() / 2)\n  // }\n  /**\n   * @param image barcode image to find a rectangle in\n   * @param initSize initial size of search area around center\n   * @param x x position of search center\n   * @param y y position of search center\n   * @throws NotFoundException if image is too small to accommodate {@code initSize}\n   */\n  function WhiteRectangleDetector(image, initSize /*int*/, x /*int*/, y /*int*/) {\n    this.image = image;\n    this.height = image.getHeight();\n    this.width = image.getWidth();\n    if (undefined === initSize || null === initSize) {\n      initSize = WhiteRectangleDetector.INIT_SIZE;\n    }\n    if (undefined === x || null === x) {\n      x = image.getWidth() / 2 | 0;\n    }\n    if (undefined === y || null === y) {\n      y = image.getHeight() / 2 | 0;\n    }\n    var halfsize = initSize / 2 | 0;\n    this.leftInit = x - halfsize;\n    this.rightInit = x + halfsize;\n    this.upInit = y - halfsize;\n    this.downInit = y + halfsize;\n    if (this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) {\n      throw new NotFoundException_1.default();\n    }\n  }\n  /**\n   * <p>\n   * Detects a candidate barcode-like rectangular region within an image. It\n   * starts around the center of the image, increases the size of the candidate\n   * region until it finds a white rectangular region.\n   * </p>\n   *\n   * @return {@link ResultPoint}[] describing the corners of the rectangular\n   *         region. The first and last points are opposed on the diagonal, as\n   *         are the second and third. The first point will be the topmost\n   *         point and the last, the bottommost. The second point will be\n   *         leftmost and the third, the rightmost\n   * @throws NotFoundException if no Data Matrix Code can be found\n   */\n  WhiteRectangleDetector.prototype.detect = function () {\n    var left = this.leftInit;\n    var right = this.rightInit;\n    var up = this.upInit;\n    var down = this.downInit;\n    var sizeExceeded = false;\n    var aBlackPointFoundOnBorder = true;\n    var atLeastOneBlackPointFoundOnBorder = false;\n    var atLeastOneBlackPointFoundOnRight = false;\n    var atLeastOneBlackPointFoundOnBottom = false;\n    var atLeastOneBlackPointFoundOnLeft = false;\n    var atLeastOneBlackPointFoundOnTop = false;\n    var width = this.width;\n    var height = this.height;\n    while (aBlackPointFoundOnBorder) {\n      aBlackPointFoundOnBorder = false;\n      // .....\n      // .   |\n      // .....\n      var rightBorderNotWhite = true;\n      while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\n        rightBorderNotWhite = this.containsBlackPoint(up, down, right, false);\n        if (rightBorderNotWhite) {\n          right++;\n          aBlackPointFoundOnBorder = true;\n          atLeastOneBlackPointFoundOnRight = true;\n        } else if (!atLeastOneBlackPointFoundOnRight) {\n          right++;\n        }\n      }\n      if (right >= width) {\n        sizeExceeded = true;\n        break;\n      }\n      // .....\n      // .   .\n      // .___.\n      var bottomBorderNotWhite = true;\n      while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\n        bottomBorderNotWhite = this.containsBlackPoint(left, right, down, true);\n        if (bottomBorderNotWhite) {\n          down++;\n          aBlackPointFoundOnBorder = true;\n          atLeastOneBlackPointFoundOnBottom = true;\n        } else if (!atLeastOneBlackPointFoundOnBottom) {\n          down++;\n        }\n      }\n      if (down >= height) {\n        sizeExceeded = true;\n        break;\n      }\n      // .....\n      // |   .\n      // .....\n      var leftBorderNotWhite = true;\n      while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\n        leftBorderNotWhite = this.containsBlackPoint(up, down, left, false);\n        if (leftBorderNotWhite) {\n          left--;\n          aBlackPointFoundOnBorder = true;\n          atLeastOneBlackPointFoundOnLeft = true;\n        } else if (!atLeastOneBlackPointFoundOnLeft) {\n          left--;\n        }\n      }\n      if (left < 0) {\n        sizeExceeded = true;\n        break;\n      }\n      // .___.\n      // .   .\n      // .....\n      var topBorderNotWhite = true;\n      while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\n        topBorderNotWhite = this.containsBlackPoint(left, right, up, true);\n        if (topBorderNotWhite) {\n          up--;\n          aBlackPointFoundOnBorder = true;\n          atLeastOneBlackPointFoundOnTop = true;\n        } else if (!atLeastOneBlackPointFoundOnTop) {\n          up--;\n        }\n      }\n      if (up < 0) {\n        sizeExceeded = true;\n        break;\n      }\n      if (aBlackPointFoundOnBorder) {\n        atLeastOneBlackPointFoundOnBorder = true;\n      }\n    }\n    if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {\n      var maxSize = right - left;\n      var z = null;\n      for (var i = 1; z === null && i < maxSize; i++) {\n        z = this.getBlackPointOnSegment(left, down - i, left + i, down);\n      }\n      if (z == null) {\n        throw new NotFoundException_1.default();\n      }\n      var t = null;\n      // go down right\n      for (var i = 1; t === null && i < maxSize; i++) {\n        t = this.getBlackPointOnSegment(left, up + i, left + i, up);\n      }\n      if (t == null) {\n        throw new NotFoundException_1.default();\n      }\n      var x = null;\n      // go down left\n      for (var i = 1; x === null && i < maxSize; i++) {\n        x = this.getBlackPointOnSegment(right, up + i, right - i, up);\n      }\n      if (x == null) {\n        throw new NotFoundException_1.default();\n      }\n      var y = null;\n      // go up left\n      for (var i = 1; y === null && i < maxSize; i++) {\n        y = this.getBlackPointOnSegment(right, down - i, right - i, down);\n      }\n      if (y == null) {\n        throw new NotFoundException_1.default();\n      }\n      return this.centerEdges(y, z, x, t);\n    } else {\n      throw new NotFoundException_1.default();\n    }\n  };\n  WhiteRectangleDetector.prototype.getBlackPointOnSegment = function (aX /*float*/, aY /*float*/, bX /*float*/, bY /*float*/) {\n    var dist = MathUtils_1.default.round(MathUtils_1.default.distance(aX, aY, bX, bY));\n    var xStep = (bX - aX) / dist;\n    var yStep = (bY - aY) / dist;\n    var image = this.image;\n    for (var i = 0; i < dist; i++) {\n      var x = MathUtils_1.default.round(aX + i * xStep);\n      var y = MathUtils_1.default.round(aY + i * yStep);\n      if (image.get(x, y)) {\n        return new ResultPoint_1.default(x, y);\n      }\n    }\n    return null;\n  };\n  /**\n   * recenters the points of a constant distance towards the center\n   *\n   * @param y bottom most point\n   * @param z left most point\n   * @param x right most point\n   * @param t top most point\n   * @return {@link ResultPoint}[] describing the corners of the rectangular\n   *         region. The first and last points are opposed on the diagonal, as\n   *         are the second and third. The first point will be the topmost\n   *         point and the last, the bottommost. The second point will be\n   *         leftmost and the third, the rightmost\n   */\n  WhiteRectangleDetector.prototype.centerEdges = function (y, z, x, t) {\n    //\n    //       t            t\n    //  z                      x\n    //        x    OR    z\n    //   y                    y\n    //\n    var yi = y.getX();\n    var yj = y.getY();\n    var zi = z.getX();\n    var zj = z.getY();\n    var xi = x.getX();\n    var xj = x.getY();\n    var ti = t.getX();\n    var tj = t.getY();\n    var CORR = WhiteRectangleDetector.CORR;\n    if (yi < this.width / 2.0) {\n      return [new ResultPoint_1.default(ti - CORR, tj + CORR), new ResultPoint_1.default(zi + CORR, zj + CORR), new ResultPoint_1.default(xi - CORR, xj - CORR), new ResultPoint_1.default(yi + CORR, yj - CORR)];\n    } else {\n      return [new ResultPoint_1.default(ti + CORR, tj + CORR), new ResultPoint_1.default(zi + CORR, zj - CORR), new ResultPoint_1.default(xi - CORR, xj + CORR), new ResultPoint_1.default(yi - CORR, yj - CORR)];\n    }\n  };\n  /**\n   * Determines whether a segment contains a black point\n   *\n   * @param a          min value of the scanned coordinate\n   * @param b          max value of the scanned coordinate\n   * @param fixed      value of fixed coordinate\n   * @param horizontal set to true if scan must be horizontal, false if vertical\n   * @return true if a black point has been found, else false.\n   */\n  WhiteRectangleDetector.prototype.containsBlackPoint = function (a /*int*/, b /*int*/, fixed /*int*/, horizontal) {\n    var image = this.image;\n    if (horizontal) {\n      for (var x = a; x <= b; x++) {\n        if (image.get(x, fixed)) {\n          return true;\n        }\n      }\n    } else {\n      for (var y = a; y <= b; y++) {\n        if (image.get(fixed, y)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  WhiteRectangleDetector.INIT_SIZE = 10;\n  WhiteRectangleDetector.CORR = 1;\n  return WhiteRectangleDetector;\n}();\nexports.default = WhiteRectangleDetector;","map":{"version":3,"names":["ResultPoint_1","require","MathUtils_1","NotFoundException_1","WhiteRectangleDetector","image","initSize","x","y","height","getHeight","width","getWidth","undefined","INIT_SIZE","halfsize","leftInit","rightInit","upInit","downInit","default","prototype","detect","left","right","up","down","sizeExceeded","aBlackPointFoundOnBorder","atLeastOneBlackPointFoundOnBorder","atLeastOneBlackPointFoundOnRight","atLeastOneBlackPointFoundOnBottom","atLeastOneBlackPointFoundOnLeft","atLeastOneBlackPointFoundOnTop","rightBorderNotWhite","containsBlackPoint","bottomBorderNotWhite","leftBorderNotWhite","topBorderNotWhite","maxSize","z","i","getBlackPointOnSegment","t","centerEdges","aX","aY","bX","bY","dist","round","distance","xStep","yStep","get","yi","getX","yj","getY","zi","zj","xi","xj","ti","tj","CORR","a","b","fixed","horizontal"],"sources":["../../../../src/core/common/detector/WhiteRectangleDetector.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}