{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar AbstractExpandedDecoder_1 = require(\"./AbstractExpandedDecoder\");\nvar AI01decoder = /** @class */function (_super) {\n  __extends(AI01decoder, _super);\n  function AI01decoder(information) {\n    return _super.call(this, information) || this;\n  }\n  AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n    buf.append(\"(01)\");\n    var initialPosition = buf.length();\n    buf.append('9');\n    this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n  };\n  AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n    for (var i = 0; i < 4; ++i) {\n      var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n      if (currentBlock / 100 == 0) {\n        buf.append('0');\n      }\n      if (currentBlock / 10 == 0) {\n        buf.append('0');\n      }\n      buf.append(currentBlock);\n    }\n    AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n  };\n  AI01decoder.appendCheckDigit = function (buf, currentPos) {\n    var checkDigit = 0;\n    for (var i = 0; i < 13; i++) {\n      //let digit = buf.charAt(i + currentPos) - '0';\n      //To be checked\n      var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n      checkDigit += (i & 0x01) == 0 ? 3 * digit : digit;\n    }\n    checkDigit = 10 - checkDigit % 10;\n    if (checkDigit == 10) {\n      checkDigit = 0;\n    }\n    buf.append(checkDigit);\n  };\n  AI01decoder.GTIN_SIZE = 40;\n  return AI01decoder;\n}(AbstractExpandedDecoder_1.default);\nexports.default = AI01decoder;","map":{"version":3,"sources":["../../../../../../src/core/oned/rss/expanded/decoders/AI01decoder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;AAEA,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkD,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAIhD,SAAA,WAAA,CAAY,WAAqB,EAAA;WAC/B,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAW,CAAC,IAAA,IAAA;EACpB;EACE,WAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,UAAqB,GAAiB,EAAE,UAAiB,EAAA;IACzD,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IAClB,IAAI,eAAe,GAAG,GAAG,CAAC,MAAM,EAAE;IAClC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;IAEf,IAAI,CAAC,6BAA6B,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC;EACtE,CAAC;EAEF,WAAA,CAAA,SAAA,CAAA,6BAA6B,GAA7B,UAA+B,GAAiB,EAAE,UAAiB,EAAE,qBAA4B,EAAA;IAC9F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;MAC1B,IAAI,YAAY,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,+BAA+B,CAAC,UAAU,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;MACpG,IAAI,YAAY,GAAG,GAAG,IAAI,CAAC,EAAE;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;MAChB;MACD,IAAI,YAAY,GAAG,EAAE,IAAI,CAAC,EAAE;QAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;MAChB;MACD,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;IACzB;IAEC,WAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,qBAAqB,CAAC;EAC5D,CAAC;EAEe,WAAA,CAAA,gBAAgB,GAAhC,UAAiC,GAAiB,EAAE,UAAiB,EAAA;IACnE,IAAI,UAAU,GAAG,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;MAC3B;MACA;MACA,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;MACxE,UAAU,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK;IAClD;IAED,UAAU,GAAG,EAAE,GAAI,UAAU,GAAG,EAAG;IACnC,IAAI,UAAU,IAAI,EAAE,EAAE;MACpB,UAAU,GAAG,CAAC;IACf;IAED,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;EACxB,CAAC;EA3CgB,WAAA,CAAA,SAAS,GAAU,EAAE;EA6CxC,OAAA,WAAC;CAAA,CA/CiD,yBAAA,CAAA,OAAuB,CAAA;kBAA3C,WAAW","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AbstractExpandedDecoder_1 = require(\"./AbstractExpandedDecoder\");\nvar AI01decoder = /** @class */ (function (_super) {\n    __extends(AI01decoder, _super);\n    function AI01decoder(information) {\n        return _super.call(this, information) || this;\n    }\n    AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n        buf.append(\"(01)\");\n        var initialPosition = buf.length();\n        buf.append('9');\n        this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n    };\n    AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n        for (var i = 0; i < 4; ++i) {\n            var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n            if (currentBlock / 100 == 0) {\n                buf.append('0');\n            }\n            if (currentBlock / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(currentBlock);\n        }\n        AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n    };\n    AI01decoder.appendCheckDigit = function (buf, currentPos) {\n        var checkDigit = 0;\n        for (var i = 0; i < 13; i++) {\n            //let digit = buf.charAt(i + currentPos) - '0';\n            //To be checked\n            var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n            checkDigit += (i & 0x01) == 0 ? 3 * digit : digit;\n        }\n        checkDigit = 10 - (checkDigit % 10);\n        if (checkDigit == 10) {\n            checkDigit = 0;\n        }\n        buf.append(checkDigit);\n    };\n    AI01decoder.GTIN_SIZE = 40;\n    return AI01decoder;\n}(AbstractExpandedDecoder_1.default));\nexports.default = AI01decoder;\n//# sourceMappingURL=AI01decoder.js.map"]},"metadata":{},"sourceType":"script"}