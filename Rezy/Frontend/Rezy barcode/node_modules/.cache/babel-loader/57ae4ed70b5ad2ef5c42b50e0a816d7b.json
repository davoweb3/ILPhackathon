{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVOTRADE\\\\Desktop\\\\Rezy barcode\\\\scanner\\\\scanner\\\\src\\\\scan\\\\Scan.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Scan() {\n  _s();\n  // Existing code...\n\n  // Create a state variable to store the fetched data\n  const [scannedDataCountMultiplied, setScannedDataCountMultiplied] = useState(null);\n  useEffect(() => {\n    // Fetch data from the API endpoint when the component mounts\n    fetch('http://localhost:3500/scanned-data-count-multiplied').then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        console.error('Error fetching data from the endpoint');\n        return null;\n      }\n    }).then(data => {\n      // Update the state with the fetched data\n      setScannedDataCountMultiplied(data);\n    }).catch(error => {\n      console.error('Network error:', error);\n    });\n  }, []); // The empty dependency array ensures this effect runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"title\",\n        children: \"Step 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), scannedDataCountMultiplied !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Scanned Data Count Multiplied: \", scannedDataCountMultiplied]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(Scan, \"2GqAw23idUWuTRUkbstOWCb7tUU=\");\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Scan","_s","scannedDataCountMultiplied","setScannedDataCountMultiplied","fetch","then","response","status","json","console","error","data","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Scan() {\n  // Existing code...\n\n  // Create a state variable to store the fetched data\n  const [scannedDataCountMultiplied, setScannedDataCountMultiplied] = useState(null);\n\n  useEffect(() => {\n    // Fetch data from the API endpoint when the component mounts\n    fetch('http://localhost:3500/scanned-data-count-multiplied')\n      .then((response) => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          console.error('Error fetching data from the endpoint');\n          return null;\n        }\n      })\n      .then((data) => {\n        // Update the state with the fetched data\n        setScannedDataCountMultiplied(data);\n      })\n      .catch((error) => {\n        console.error('Network error:', error);\n      });\n  }, []); // The empty dependency array ensures this effect runs only once when the component mounts\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <label className=\"title\">Step 1</label>\n        \n        {/* Display the fetched data below the \"Step 1\" header */}\n        {scannedDataCountMultiplied !== null && (\n          <div>\n            <p>Scanned Data Count Multiplied: {scannedDataCountMultiplied}</p>\n          </div>\n        )}\n\n        {/* Rest of your existing code... */}\n      </div>\n      {/* Rest of your existing code... */}\n    </div>\n  );\n}\n\nexport default Scan;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd;;EAEA;EACA,MAAM,CAACC,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAElFC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,qDAAqD,CAAC,CACzDC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOD,QAAQ,CAACE,IAAI,EAAE;MACxB,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;QACtD,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACd;MACAR,6BAA6B,CAACQ,IAAI,CAAC;IACrC,CAAC,CAAC,CACDC,KAAK,CAAEF,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEX,OAAA;IAAKc,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBf,OAAA;MAAKc,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBf,OAAA;QAAOc,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,EAGtChB,0BAA0B,KAAK,IAAI,iBAClCH,OAAA;QAAAe,QAAA,eACEf,OAAA;UAAAe,QAAA,GAAG,iCAA+B,EAACZ,0BAA0B;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAK;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAErE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAGG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEF;AAEV;AAACjB,EAAA,CA3CQD,IAAI;AAAAmB,EAAA,GAAJnB,IAAI;AA6Cb,eAAeA,IAAI;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}