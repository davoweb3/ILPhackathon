{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\n * number of bits read is not often a multiple of 8.</p>\n *\n * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\n * it passed in, in which case all bets are off.</p>\n *\n * @author Sean Owen\n */\nvar BitSource = /** @class */function () {\n  /**\n   * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\n   * Bits are read within a byte from most-significant to least-significant bit.\n   */\n  function BitSource(bytes) {\n    this.bytes = bytes;\n    this.byteOffset = 0;\n    this.bitOffset = 0;\n  }\n  /**\n   * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\n   */\n  BitSource.prototype.getBitOffset = function () {\n    return this.bitOffset;\n  };\n  /**\n   * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\n   */\n  BitSource.prototype.getByteOffset = function () {\n    return this.byteOffset;\n  };\n  /**\n   * @param numBits number of bits to read\n   * @return int representing the bits read. The bits will appear as the least-significant\n   *         bits of the int\n   * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\n   */\n  BitSource.prototype.readBits = function (numBits /*int*/) {\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n      throw new IllegalArgumentException_1.default('' + numBits);\n    }\n    var result = 0;\n    var bitOffset = this.bitOffset;\n    var byteOffset = this.byteOffset;\n    var bytes = this.bytes;\n    // First, read remainder from current byte\n    if (bitOffset > 0) {\n      var bitsLeft = 8 - bitOffset;\n      var toRead = numBits < bitsLeft ? numBits : bitsLeft;\n      var bitsToNotRead = bitsLeft - toRead;\n      var mask = 0xFF >> 8 - toRead << bitsToNotRead;\n      result = (bytes[byteOffset] & mask) >> bitsToNotRead;\n      numBits -= toRead;\n      bitOffset += toRead;\n      if (bitOffset === 8) {\n        bitOffset = 0;\n        byteOffset++;\n      }\n    }\n    // Next read whole bytes\n    if (numBits > 0) {\n      while (numBits >= 8) {\n        result = result << 8 | bytes[byteOffset] & 0xFF;\n        byteOffset++;\n        numBits -= 8;\n      }\n      // Finally read a partial byte\n      if (numBits > 0) {\n        var bitsToNotRead = 8 - numBits;\n        var mask = 0xFF >> bitsToNotRead << bitsToNotRead;\n        result = result << numBits | (bytes[byteOffset] & mask) >> bitsToNotRead;\n        bitOffset += numBits;\n      }\n    }\n    this.bitOffset = bitOffset;\n    this.byteOffset = byteOffset;\n    return result;\n  };\n  /**\n   * @return number of bits that can be read successfully\n   */\n  BitSource.prototype.available = function () {\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n  };\n  return BitSource;\n}();\nexports.default = BitSource;","map":{"version":3,"names":["IllegalArgumentException_1","require","BitSource","bytes","byteOffset","bitOffset","prototype","getBitOffset","getByteOffset","readBits","numBits","available","default","result","bitsLeft","toRead","bitsToNotRead","mask","length"],"sources":["../../../src/core/common/BitSource.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAGA,IAAAA,0BAAA,GAAAC,OAAA;AAEA;;;;;;;;;AASA,IAAAC,SAAA;EAKI;;;;EAIA,SAAAA,UAA2BC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAC5B,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;EAEA;;;EAGOH,SAAA,CAAAI,SAAA,CAAAC,YAAY,GAAnB;IACI,OAAO,IAAI,CAACF,SAAS;EACzB,CAAC;EAED;;;EAGOH,SAAA,CAAAI,SAAA,CAAAE,aAAa,GAApB;IACI,OAAO,IAAI,CAACJ,UAAU;EAC1B,CAAC;EAED;;;;;;EAMOF,SAAA,CAAAI,SAAA,CAAAG,QAAQ,GAAf,UAAgBC,OAAe,CAAC,SAAO;IACnC,IAAIA,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG,EAAE,IAAIA,OAAO,GAAG,IAAI,CAACC,SAAS,EAAE,EAAE;MAC3D,MAAM,IAAIX,0BAAA,CAAAY,OAAwB,CAAC,EAAE,GAAGF,OAAO,CAAC;;IAGpD,IAAIG,MAAM,GAAG,CAAC;IAEd,IAAIR,SAAS,GAAG,IAAI,CAACA,SAAS;IAC9B,IAAID,UAAU,GAAG,IAAI,CAACA,UAAU;IAEhC,IAAMD,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB;IACA,IAAIE,SAAS,GAAG,CAAC,EAAE;MACf,IAAMS,QAAQ,GAAG,CAAC,GAAGT,SAAS;MAC9B,IAAMU,MAAM,GAAGL,OAAO,GAAGI,QAAQ,GAAGJ,OAAO,GAAGI,QAAQ;MACtD,IAAME,aAAa,GAAGF,QAAQ,GAAGC,MAAM;MACvC,IAAME,IAAI,GAAI,IAAI,IAAK,CAAC,GAAGF,MAAO,IAAKC,aAAa;MAEpDH,MAAM,GAAG,CAACV,KAAK,CAACC,UAAU,CAAC,GAAGa,IAAI,KAAKD,aAAa;MACpDN,OAAO,IAAIK,MAAM;MACjBV,SAAS,IAAIU,MAAM;MAEnB,IAAIV,SAAS,KAAK,CAAC,EAAE;QACjBA,SAAS,GAAG,CAAC;QACbD,UAAU,EAAE;;;IAIpB;IACA,IAAIM,OAAO,GAAG,CAAC,EAAE;MAEb,OAAOA,OAAO,IAAI,CAAC,EAAE;QACjBG,MAAM,GAAIA,MAAM,IAAI,CAAC,GAAKV,KAAK,CAACC,UAAU,CAAC,GAAG,IAAK;QACnDA,UAAU,EAAE;QACZM,OAAO,IAAI,CAAC;;MAGhB;MACA,IAAIA,OAAO,GAAG,CAAC,EAAE;QACb,IAAMM,aAAa,GAAG,CAAC,GAAGN,OAAO;QACjC,IAAMO,IAAI,GAAI,IAAI,IAAID,aAAa,IAAKA,aAAa;QAErDH,MAAM,GAAIA,MAAM,IAAIH,OAAO,GAAK,CAACP,KAAK,CAACC,UAAU,CAAC,GAAGa,IAAI,KAAKD,aAAc;QAC5EX,SAAS,IAAIK,OAAO;;;IAI5B,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACD,UAAU,GAAGA,UAAU;IAE5B,OAAOS,MAAM;EACjB,CAAC;EAED;;;EAGOX,SAAA,CAAAI,SAAA,CAAAK,SAAS,GAAhB;IACI,OAAO,CAAC,IAAI,IAAI,CAACR,KAAK,CAACe,MAAM,GAAG,IAAI,CAACd,UAAU,CAAC,GAAG,IAAI,CAACC,SAAS;EACrE,CAAC;EAEL,OAAAH,SAAC;AAAD,CAAC,EA9FD"},"metadata":{},"sourceType":"script"}