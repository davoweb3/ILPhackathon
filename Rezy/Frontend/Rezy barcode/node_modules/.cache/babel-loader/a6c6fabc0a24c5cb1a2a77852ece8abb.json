{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVOTRADE\\\\Desktop\\\\Rezy barcode\\\\scanner\\\\scanner\\\\src\\\\scan\\\\Scan.js\",\n  _s = $RefreshSig$();\nimport \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState, useEffect } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\n\n// Define a key for storing scan data in local storage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = \"scanData\";\nfunction Scan() {\n  _s();\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n  const [open, setOpen] = useState(false);\n\n  // Function to add scan data to local storage\n  const addToLocalStorage = scanData => {\n    // Retrieve existing scan data from local storage\n    const existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n\n    // Add the new scan data to the array\n    existingData.push(scanData);\n\n    // Store the updated scan data in local storage\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(existingData));\n  };\n  const handleClose = () => {\n    postToArduino(\"0\");\n    setOpen(false);\n  };\n  const postToArduino = option => {\n    // Your postToArduino function code remains unchanged\n    // ...\n\n    // After posting to Arduino, add the scan data to local storage\n    const scanData = {\n      date: new Date().toISOString(),\n      result: data // You can customize this to store any relevant data\n    };\n\n    addToLocalStorage(scanData);\n\n    // ...\n  };\n\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n  const handleErrorWebCam = error => {\n    console.log(error);\n  };\n  const handleScanWebCam = result => {\n    if (result) {\n      setData(result);\n      if (!open) {\n        getProduct(result);\n      }\n    }\n  };\n  const getProduct = id => {\n    const foundElement = filteredData.find(item => item.Id === id);\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      console.log('Element not found');\n    }\n  };\n\n  // useEffect to retrieve and display scan data from local storage\n  useEffect(() => {\n    const storedScanData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedScanData && storedScanData.length > 0) {\n      // Display the latest stored scan data\n      setData(storedScanData[storedScanData.length - 1].result);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Scan, \"AwysYQ3g260zcuoeITH9JCEGcB4=\", false, function () {\n  return [useNavigate];\n});\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["ButtonStyle","ModalStyle","React","useState","useEffect","QrReader","Grid","useNavigate","Barcode","BarcodeScannerComponent","products","jsxDEV","_jsxDEV","LOCAL_STORAGE_KEY","Scan","_s","initialData","data","setData","producto","setProducto","filteredData","setFilteredData","navigate","open","setOpen","addToLocalStorage","scanData","existingData","JSON","parse","localStorage","getItem","push","setItem","stringify","handleClose","postToArduino","option","date","Date","toISOString","result","handleAccept","setTimeout","handleErrorWebCam","error","console","log","handleScanWebCam","getProduct","id","foundElement","find","item","Id","storedScanData","length","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState, useEffect } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\n\n// Define a key for storing scan data in local storage\nconst LOCAL_STORAGE_KEY = \"scanData\";\n\nfunction Scan() {\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [filteredData, setFilteredData] = useState(initialData);\n\n  let navigate = useNavigate();\n\n  const [open, setOpen] = useState(false);\n\n  // Function to add scan data to local storage\n  const addToLocalStorage = (scanData) => {\n    // Retrieve existing scan data from local storage\n    const existingData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n\n    // Add the new scan data to the array\n    existingData.push(scanData);\n\n    // Store the updated scan data in local storage\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(existingData));\n  };\n\n  const handleClose = () => {\n    postToArduino(\"0\");\n    setOpen(false);\n  };\n\n  const postToArduino = (option) => {\n    // Your postToArduino function code remains unchanged\n    // ...\n\n    // After posting to Arduino, add the scan data to local storage\n    const scanData = {\n      date: new Date().toISOString(),\n      result: data, // You can customize this to store any relevant data\n    };\n    addToLocalStorage(scanData);\n\n    // ...\n  };\n\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  };\n\n  const handleScanWebCam = (result) => {\n    if (result) {\n      setData(result);\n      if (!open) {\n        getProduct(result);\n      }\n    }\n  };\n\n  const getProduct = (id) => {\n    const foundElement = filteredData.find(item => item.Id === id);\n\n    if (foundElement) {\n      setProducto(foundElement);\n      setOpen(true);\n    } else {\n      console.log('Element not found');\n    }\n  };\n\n  // useEffect to retrieve and display scan data from local storage\n  useEffect(() => {\n    const storedScanData = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedScanData && storedScanData.length > 0) {\n      // Display the latest stored scan data\n      setData(storedScanData[storedScanData.length - 1].result);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* Rest of your component remains unchanged */}\n    </div>\n  );\n}\n\nexport default Scan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}