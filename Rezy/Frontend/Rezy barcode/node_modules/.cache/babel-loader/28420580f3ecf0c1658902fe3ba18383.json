{"ast":null,"code":"\"use strict\";\n\n/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.ChecksumException;\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.NotFoundException;\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n// import com.google.zxing.common.detector.MathUtils;\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\n// import com.google.zxing.pdf417.decoder.ec.ErrorCorrection;\nvar ErrorCorrection_1 = require(\"./ec/ErrorCorrection\");\n// local\nvar BoundingBox_1 = require(\"./BoundingBox\");\nvar DetectionResultRowIndicatorColumn_1 = require(\"./DetectionResultRowIndicatorColumn\");\nvar DetectionResult_1 = require(\"./DetectionResult\");\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\nvar Codeword_1 = require(\"./Codeword\");\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\nvar PDF417CodewordDecoder_1 = require(\"./PDF417CodewordDecoder\");\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\n// utils\nvar Formatter_1 = require(\"../../util/Formatter\");\n// import java.util.ArrayList;\n// import java.util.Collection;\n// import java.util.Formatter;\n// import java.util.List;\n/**\n * @author Guenther Grau\n */\nvar PDF417ScanningDecoder = /** @class */function () {\n  function PDF417ScanningDecoder() {}\n  /**\n   * @TODO don't pass in minCodewordWidth and maxCodewordWidth, pass in barcode columns for start and stop pattern\n   *\n   * columns. That way width can be deducted from the pattern column.\n   * This approach also allows to detect more details about the barcode, e.g. if a bar type (white or black) is wider\n   * than it should be. This can happen if the scanner used a bad blackpoint.\n   *\n   * @param BitMatrix\n   * @param image\n   * @param ResultPoint\n   * @param imageTopLeft\n   * @param ResultPoint\n   * @param imageBottomLeft\n   * @param ResultPoint\n   * @param imageTopRight\n   * @param ResultPoint\n   * @param imageBottomRight\n   * @param int\n   * @param minCodewordWidth\n   * @param int\n   * @param maxCodewordWidth\n   *\n   * @throws NotFoundException\n   * @throws FormatException\n   * @throws ChecksumException\n   */\n  PDF417ScanningDecoder.decode = function (image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight, minCodewordWidth, maxCodewordWidth) {\n    var boundingBox = new BoundingBox_1.default(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight);\n    var leftRowIndicatorColumn = null;\n    var rightRowIndicatorColumn = null;\n    var detectionResult;\n    for (var firstPass /*boolean*/ = true;; firstPass = false) {\n      if (imageTopLeft != null) {\n        leftRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopLeft, true, minCodewordWidth, maxCodewordWidth);\n      }\n      if (imageTopRight != null) {\n        rightRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopRight, false, minCodewordWidth, maxCodewordWidth);\n      }\n      detectionResult = PDF417ScanningDecoder.merge(leftRowIndicatorColumn, rightRowIndicatorColumn);\n      if (detectionResult == null) {\n        throw NotFoundException_1.default.getNotFoundInstance();\n      }\n      var resultBox = detectionResult.getBoundingBox();\n      if (firstPass && resultBox != null && (resultBox.getMinY() < boundingBox.getMinY() || resultBox.getMaxY() > boundingBox.getMaxY())) {\n        boundingBox = resultBox;\n      } else {\n        break;\n      }\n    }\n    detectionResult.setBoundingBox(boundingBox);\n    var maxBarcodeColumn = detectionResult.getBarcodeColumnCount() + 1;\n    detectionResult.setDetectionResultColumn(0, leftRowIndicatorColumn);\n    detectionResult.setDetectionResultColumn(maxBarcodeColumn, rightRowIndicatorColumn);\n    var leftToRight = leftRowIndicatorColumn != null;\n    for (var barcodeColumnCount /*int*/ = 1; barcodeColumnCount <= maxBarcodeColumn; barcodeColumnCount++) {\n      var barcodeColumn = leftToRight ? barcodeColumnCount : maxBarcodeColumn - barcodeColumnCount;\n      if (detectionResult.getDetectionResultColumn(barcodeColumn) !== /* null */undefined) {\n        // This will be the case for the opposite row indicator column, which doesn't need to be decoded again.\n        continue;\n      }\n      var detectionResultColumn = void 0;\n      if (barcodeColumn === 0 || barcodeColumn === maxBarcodeColumn) {\n        detectionResultColumn = new DetectionResultRowIndicatorColumn_1.default(boundingBox, barcodeColumn === 0);\n      } else {\n        detectionResultColumn = new DetectionResultColumn_1.default(boundingBox);\n      }\n      detectionResult.setDetectionResultColumn(barcodeColumn, detectionResultColumn);\n      var startColumn = -1;\n      var previousStartColumn = startColumn;\n      // TODO start at a row for which we know the start position, then detect upwards and downwards from there.\n      for (var imageRow /*int*/ = boundingBox.getMinY(); imageRow <= boundingBox.getMaxY(); imageRow++) {\n        startColumn = PDF417ScanningDecoder.getStartColumn(detectionResult, barcodeColumn, imageRow, leftToRight);\n        if (startColumn < 0 || startColumn > boundingBox.getMaxX()) {\n          if (previousStartColumn === -1) {\n            continue;\n          }\n          startColumn = previousStartColumn;\n        }\n        var codeword = PDF417ScanningDecoder.detectCodeword(image, boundingBox.getMinX(), boundingBox.getMaxX(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n        if (codeword != null) {\n          detectionResultColumn.setCodeword(imageRow, codeword);\n          previousStartColumn = startColumn;\n          minCodewordWidth = Math.min(minCodewordWidth, codeword.getWidth());\n          maxCodewordWidth = Math.max(maxCodewordWidth, codeword.getWidth());\n        }\n      }\n    }\n    return PDF417ScanningDecoder.createDecoderResult(detectionResult);\n  };\n  /**\n   *\n   * @param leftRowIndicatorColumn\n   * @param rightRowIndicatorColumn\n   *\n   * @throws NotFoundException\n   */\n  PDF417ScanningDecoder.merge = function (leftRowIndicatorColumn, rightRowIndicatorColumn) {\n    if (leftRowIndicatorColumn == null && rightRowIndicatorColumn == null) {\n      return null;\n    }\n    var barcodeMetadata = PDF417ScanningDecoder.getBarcodeMetadata(leftRowIndicatorColumn, rightRowIndicatorColumn);\n    if (barcodeMetadata == null) {\n      return null;\n    }\n    var boundingBox = BoundingBox_1.default.merge(PDF417ScanningDecoder.adjustBoundingBox(leftRowIndicatorColumn), PDF417ScanningDecoder.adjustBoundingBox(rightRowIndicatorColumn));\n    return new DetectionResult_1.default(barcodeMetadata, boundingBox);\n  };\n  /**\n   *\n   * @param rowIndicatorColumn\n   *\n   * @throws NotFoundException\n   */\n  PDF417ScanningDecoder.adjustBoundingBox = function (rowIndicatorColumn) {\n    var e_1, _a;\n    if (rowIndicatorColumn == null) {\n      return null;\n    }\n    var rowHeights = rowIndicatorColumn.getRowHeights();\n    if (rowHeights == null) {\n      return null;\n    }\n    var maxRowHeight = PDF417ScanningDecoder.getMax(rowHeights);\n    var missingStartRows = 0;\n    try {\n      for (var rowHeights_1 = __values(rowHeights), rowHeights_1_1 = rowHeights_1.next(); !rowHeights_1_1.done; rowHeights_1_1 = rowHeights_1.next()) {\n        var rowHeight = rowHeights_1_1.value /*int*/;\n        missingStartRows += maxRowHeight - rowHeight;\n        if (rowHeight > 0) {\n          break;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (rowHeights_1_1 && !rowHeights_1_1.done && (_a = rowHeights_1.return)) _a.call(rowHeights_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var codewords = rowIndicatorColumn.getCodewords();\n    for (var row /*int*/ = 0; missingStartRows > 0 && codewords[row] == null; row++) {\n      missingStartRows--;\n    }\n    var missingEndRows = 0;\n    for (var row /*int*/ = rowHeights.length - 1; row >= 0; row--) {\n      missingEndRows += maxRowHeight - rowHeights[row];\n      if (rowHeights[row] > 0) {\n        break;\n      }\n    }\n    for (var row /*int*/ = codewords.length - 1; missingEndRows > 0 && codewords[row] == null; row--) {\n      missingEndRows--;\n    }\n    return rowIndicatorColumn.getBoundingBox().addMissingRows(missingStartRows, missingEndRows, rowIndicatorColumn.isLeft());\n  };\n  PDF417ScanningDecoder.getMax = function (values) {\n    var e_2, _a;\n    var maxValue = -1;\n    try {\n      for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\n        var value = values_1_1.value /*int*/;\n        maxValue = Math.max(maxValue, value);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return maxValue;\n  };\n  PDF417ScanningDecoder.getBarcodeMetadata = function (leftRowIndicatorColumn, rightRowIndicatorColumn) {\n    var leftBarcodeMetadata;\n    if (leftRowIndicatorColumn == null || (leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata()) == null) {\n      return rightRowIndicatorColumn == null ? null : rightRowIndicatorColumn.getBarcodeMetadata();\n    }\n    var rightBarcodeMetadata;\n    if (rightRowIndicatorColumn == null || (rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata()) == null) {\n      return leftBarcodeMetadata;\n    }\n    if (leftBarcodeMetadata.getColumnCount() !== rightBarcodeMetadata.getColumnCount() && leftBarcodeMetadata.getErrorCorrectionLevel() !== rightBarcodeMetadata.getErrorCorrectionLevel() && leftBarcodeMetadata.getRowCount() !== rightBarcodeMetadata.getRowCount()) {\n      return null;\n    }\n    return leftBarcodeMetadata;\n  };\n  PDF417ScanningDecoder.getRowIndicatorColumn = function (image, boundingBox, startPoint, leftToRight, minCodewordWidth, maxCodewordWidth) {\n    var rowIndicatorColumn = new DetectionResultRowIndicatorColumn_1.default(boundingBox, leftToRight);\n    for (var i /*int*/ = 0; i < 2; i++) {\n      var increment = i === 0 ? 1 : -1;\n      var startColumn = Math.trunc(Math.trunc(startPoint.getX()));\n      for (var imageRow /*int*/ = Math.trunc(Math.trunc(startPoint.getY())); imageRow <= boundingBox.getMaxY() && imageRow >= boundingBox.getMinY(); imageRow += increment) {\n        var codeword = PDF417ScanningDecoder.detectCodeword(image, 0, image.getWidth(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n        if (codeword != null) {\n          rowIndicatorColumn.setCodeword(imageRow, codeword);\n          if (leftToRight) {\n            startColumn = codeword.getStartX();\n          } else {\n            startColumn = codeword.getEndX();\n          }\n        }\n      }\n    }\n    return rowIndicatorColumn;\n  };\n  /**\n   *\n   * @param detectionResult\n   * @param BarcodeValue\n   * @param param2\n   * @param param3\n   * @param barcodeMatrix\n   *\n   * @throws NotFoundException\n   */\n  PDF417ScanningDecoder.adjustCodewordCount = function (detectionResult, barcodeMatrix) {\n    var barcodeMatrix01 = barcodeMatrix[0][1];\n    var numberOfCodewords = barcodeMatrix01.getValue();\n    var calculatedNumberOfCodewords = detectionResult.getBarcodeColumnCount() * detectionResult.getBarcodeRowCount() - PDF417ScanningDecoder.getNumberOfECCodeWords(detectionResult.getBarcodeECLevel());\n    if (numberOfCodewords.length === 0) {\n      if (calculatedNumberOfCodewords < 1 || calculatedNumberOfCodewords > PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE) {\n        throw NotFoundException_1.default.getNotFoundInstance();\n      }\n      barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n    } else if (numberOfCodewords[0] !== calculatedNumberOfCodewords) {\n      // The calculated one is more reliable as it is derived from the row indicator columns\n      barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n    }\n  };\n  /**\n   *\n   * @param detectionResult\n   *\n   * @throws FormatException\n   * @throws ChecksumException\n   * @throws NotFoundException\n   */\n  PDF417ScanningDecoder.createDecoderResult = function (detectionResult) {\n    var barcodeMatrix = PDF417ScanningDecoder.createBarcodeMatrix(detectionResult);\n    PDF417ScanningDecoder.adjustCodewordCount(detectionResult, barcodeMatrix);\n    var erasures /*Collection<Integer>*/ = new Array();\n    var codewords = new Int32Array(detectionResult.getBarcodeRowCount() * detectionResult.getBarcodeColumnCount());\n    var ambiguousIndexValuesList = /*List<int[]>*/[];\n    var ambiguousIndexesList = /*Collection<Integer>*/new Array();\n    for (var row /*int*/ = 0; row < detectionResult.getBarcodeRowCount(); row++) {\n      for (var column /*int*/ = 0; column < detectionResult.getBarcodeColumnCount(); column++) {\n        var values = barcodeMatrix[row][column + 1].getValue();\n        var codewordIndex = row * detectionResult.getBarcodeColumnCount() + column;\n        if (values.length === 0) {\n          erasures.push(codewordIndex);\n        } else if (values.length === 1) {\n          codewords[codewordIndex] = values[0];\n        } else {\n          ambiguousIndexesList.push(codewordIndex);\n          ambiguousIndexValuesList.push(values);\n        }\n      }\n    }\n    var ambiguousIndexValues = new Array(ambiguousIndexValuesList.length);\n    for (var i /*int*/ = 0; i < ambiguousIndexValues.length; i++) {\n      ambiguousIndexValues[i] = ambiguousIndexValuesList[i];\n    }\n    return PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues(detectionResult.getBarcodeECLevel(), codewords, PDF417Common_1.default.toIntArray(erasures), PDF417Common_1.default.toIntArray(ambiguousIndexesList), ambiguousIndexValues);\n  };\n  /**\n   * This method deals with the fact, that the decoding process doesn't always yield a single most likely value. The\n   * current error correction implementation doesn't deal with erasures very well, so it's better to provide a value\n   * for these ambiguous codewords instead of treating it as an erasure. The problem is that we don't know which of\n   * the ambiguous values to choose. We try decode using the first value, and if that fails, we use another of the\n   * ambiguous values and try to decode again. This usually only happens on very hard to read and decode barcodes,\n   * so decoding the normal barcodes is not affected by this.\n   *\n   * @param erasureArray contains the indexes of erasures\n   * @param ambiguousIndexes array with the indexes that have more than one most likely value\n   * @param ambiguousIndexValues two dimensional array that contains the ambiguous values. The first dimension must\n   * be the same length as the ambiguousIndexes array\n   *\n   * @throws FormatException\n   * @throws ChecksumException\n   */\n  PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues = function (ecLevel, codewords, erasureArray, ambiguousIndexes, ambiguousIndexValues) {\n    var ambiguousIndexCount = new Int32Array(ambiguousIndexes.length);\n    var tries = 100;\n    while (tries-- > 0) {\n      for (var i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n        codewords[ambiguousIndexes[i]] = ambiguousIndexValues[i][ambiguousIndexCount[i]];\n      }\n      try {\n        return PDF417ScanningDecoder.decodeCodewords(codewords, ecLevel, erasureArray);\n      } catch (err) {\n        var ignored = err instanceof ChecksumException_1.default;\n        if (!ignored) {\n          throw err;\n        }\n      }\n      if (ambiguousIndexCount.length === 0) {\n        throw ChecksumException_1.default.getChecksumInstance();\n      }\n      for (var i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n        if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {\n          ambiguousIndexCount[i]++;\n          break;\n        } else {\n          ambiguousIndexCount[i] = 0;\n          if (i === ambiguousIndexCount.length - 1) {\n            throw ChecksumException_1.default.getChecksumInstance();\n          }\n        }\n      }\n    }\n    throw ChecksumException_1.default.getChecksumInstance();\n  };\n  PDF417ScanningDecoder.createBarcodeMatrix = function (detectionResult) {\n    var e_3, _a, e_4, _b;\n    // let barcodeMatrix: BarcodeValue[][] =\n    // new BarcodeValue[detectionResult.getBarcodeRowCount()][detectionResult.getBarcodeColumnCount() + 2];\n    var barcodeMatrix = Array.from({\n      length: detectionResult.getBarcodeRowCount()\n    }, function () {\n      return new Array(detectionResult.getBarcodeColumnCount() + 2);\n    });\n    for (var row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n      for (var column_1 /*int*/ = 0; column_1 < barcodeMatrix[row].length; column_1++) {\n        barcodeMatrix[row][column_1] = new BarcodeValue_1.default();\n      }\n    }\n    var column = 0;\n    try {\n      for (var _c = __values(detectionResult.getDetectionResultColumns()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var detectionResultColumn = _d.value /*DetectionResultColumn*/;\n        if (detectionResultColumn != null) {\n          try {\n            for (var _e = __values(detectionResultColumn.getCodewords()), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var codeword = _f.value /*Codeword*/;\n              if (codeword != null) {\n                var rowNumber = codeword.getRowNumber();\n                if (rowNumber >= 0) {\n                  if (rowNumber >= barcodeMatrix.length) {\n                    // We have more rows than the barcode metadata allows for, ignore them.\n                    continue;\n                  }\n                  barcodeMatrix[rowNumber][column].setValue(codeword.getValue());\n                }\n              }\n            }\n          } catch (e_4_1) {\n            e_4 = {\n              error: e_4_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            } finally {\n              if (e_4) throw e_4.error;\n            }\n          }\n        }\n        column++;\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return barcodeMatrix;\n  };\n  PDF417ScanningDecoder.isValidBarcodeColumn = function (detectionResult, barcodeColumn) {\n    return barcodeColumn >= 0 && barcodeColumn <= detectionResult.getBarcodeColumnCount() + 1;\n  };\n  PDF417ScanningDecoder.getStartColumn = function (detectionResult, barcodeColumn, imageRow, leftToRight) {\n    var e_5, _a;\n    var offset = leftToRight ? 1 : -1;\n    var codeword = null;\n    if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n      codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodeword(imageRow);\n    }\n    if (codeword != null) {\n      return leftToRight ? codeword.getEndX() : codeword.getStartX();\n    }\n    codeword = detectionResult.getDetectionResultColumn(barcodeColumn).getCodewordNearby(imageRow);\n    if (codeword != null) {\n      return leftToRight ? codeword.getStartX() : codeword.getEndX();\n    }\n    if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n      codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodewordNearby(imageRow);\n    }\n    if (codeword != null) {\n      return leftToRight ? codeword.getEndX() : codeword.getStartX();\n    }\n    var skippedColumns = 0;\n    while (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n      barcodeColumn -= offset;\n      try {\n        for (var _b = __values(detectionResult.getDetectionResultColumn(barcodeColumn).getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var previousRowCodeword = _c.value /*Codeword*/;\n          if (previousRowCodeword != null) {\n            return (leftToRight ? previousRowCodeword.getEndX() : previousRowCodeword.getStartX()) + offset * skippedColumns * (previousRowCodeword.getEndX() - previousRowCodeword.getStartX());\n          }\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      skippedColumns++;\n    }\n    return leftToRight ? detectionResult.getBoundingBox().getMinX() : detectionResult.getBoundingBox().getMaxX();\n  };\n  PDF417ScanningDecoder.detectCodeword = function (image, minColumn, maxColumn, leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth) {\n    startColumn = PDF417ScanningDecoder.adjustCodewordStartColumn(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n    // we usually know fairly exact now how long a codeword is. We should provide minimum and maximum expected length\n    // and try to adjust the read pixels, e.g. remove single pixel errors or try to cut off exceeding pixels.\n    // min and maxCodewordWidth should not be used as they are calculated for the whole barcode an can be inaccurate\n    // for the current position\n    var moduleBitCount = PDF417ScanningDecoder.getModuleBitCount(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n    if (moduleBitCount == null) {\n      return null;\n    }\n    var endColumn;\n    var codewordBitCount = MathUtils_1.default.sum(moduleBitCount);\n    if (leftToRight) {\n      endColumn = startColumn + codewordBitCount;\n    } else {\n      for (var i /*int*/ = 0; i < moduleBitCount.length / 2; i++) {\n        var tmpCount = moduleBitCount[i];\n        moduleBitCount[i] = moduleBitCount[moduleBitCount.length - 1 - i];\n        moduleBitCount[moduleBitCount.length - 1 - i] = tmpCount;\n      }\n      endColumn = startColumn;\n      startColumn = endColumn - codewordBitCount;\n    }\n    // TODO implement check for width and correction of black and white bars\n    // use start (and maybe stop pattern) to determine if black bars are wider than white bars. If so, adjust.\n    // should probably done only for codewords with a lot more than 17 bits.\n    // The following fixes 10-1.png, which has wide black bars and small white bars\n    //    for (let i /*int*/ = 0; i < moduleBitCount.length; i++) {\n    //      if (i % 2 === 0) {\n    //        moduleBitCount[i]--;\n    //      } else {\n    //        moduleBitCount[i]++;\n    //      }\n    //    }\n    // We could also use the width of surrounding codewords for more accurate results, but this seems\n    // sufficient for now\n    if (!PDF417ScanningDecoder.checkCodewordSkew(codewordBitCount, minCodewordWidth, maxCodewordWidth)) {\n      // We could try to use the startX and endX position of the codeword in the same column in the previous row,\n      // create the bit count from it and normalize it to 8. This would help with single pixel errors.\n      return null;\n    }\n    var decodedValue = PDF417CodewordDecoder_1.default.getDecodedValue(moduleBitCount);\n    var codeword = PDF417Common_1.default.getCodeword(decodedValue);\n    if (codeword === -1) {\n      return null;\n    }\n    return new Codeword_1.default(startColumn, endColumn, PDF417ScanningDecoder.getCodewordBucketNumber(decodedValue), codeword);\n  };\n  PDF417ScanningDecoder.getModuleBitCount = function (image, minColumn, maxColumn, leftToRight, startColumn, imageRow) {\n    var imageColumn = startColumn;\n    var moduleBitCount = new Int32Array(8);\n    var moduleNumber = 0;\n    var increment = leftToRight ? 1 : -1;\n    var previousPixelValue = leftToRight;\n    while ((leftToRight ? imageColumn < maxColumn : imageColumn >= minColumn) && moduleNumber < moduleBitCount.length) {\n      if (image.get(imageColumn, imageRow) === previousPixelValue) {\n        moduleBitCount[moduleNumber]++;\n        imageColumn += increment;\n      } else {\n        moduleNumber++;\n        previousPixelValue = !previousPixelValue;\n      }\n    }\n    if (moduleNumber === moduleBitCount.length || imageColumn === (leftToRight ? maxColumn : minColumn) && moduleNumber === moduleBitCount.length - 1) {\n      return moduleBitCount;\n    }\n    return null;\n  };\n  PDF417ScanningDecoder.getNumberOfECCodeWords = function (barcodeECLevel) {\n    return 2 << barcodeECLevel;\n  };\n  PDF417ScanningDecoder.adjustCodewordStartColumn = function (image, minColumn, maxColumn, leftToRight, codewordStartColumn, imageRow) {\n    var correctedStartColumn = codewordStartColumn;\n    var increment = leftToRight ? -1 : 1;\n    // there should be no black pixels before the start column. If there are, then we need to start earlier.\n    for (var i /*int*/ = 0; i < 2; i++) {\n      while ((leftToRight ? correctedStartColumn >= minColumn : correctedStartColumn < maxColumn) && leftToRight === image.get(correctedStartColumn, imageRow)) {\n        if (Math.abs(codewordStartColumn - correctedStartColumn) > PDF417ScanningDecoder.CODEWORD_SKEW_SIZE) {\n          return codewordStartColumn;\n        }\n        correctedStartColumn += increment;\n      }\n      increment = -increment;\n      leftToRight = !leftToRight;\n    }\n    return correctedStartColumn;\n  };\n  PDF417ScanningDecoder.checkCodewordSkew = function (codewordSize, minCodewordWidth, maxCodewordWidth) {\n    return minCodewordWidth - PDF417ScanningDecoder.CODEWORD_SKEW_SIZE <= codewordSize && codewordSize <= maxCodewordWidth + PDF417ScanningDecoder.CODEWORD_SKEW_SIZE;\n  };\n  /**\n   * @throws FormatException,\n   * @throws ChecksumException\n   */\n  PDF417ScanningDecoder.decodeCodewords = function (codewords, ecLevel, erasures) {\n    if (codewords.length === 0) {\n      throw FormatException_1.default.getFormatInstance();\n    }\n    var numECCodewords = 1 << ecLevel + 1;\n    var correctedErrorsCount = PDF417ScanningDecoder.correctErrors(codewords, erasures, numECCodewords);\n    PDF417ScanningDecoder.verifyCodewordCount(codewords, numECCodewords);\n    // Decode the codewords\n    var decoderResult = DecodedBitStreamParser_1.default.decode(codewords, '' + ecLevel);\n    decoderResult.setErrorsCorrected(correctedErrorsCount);\n    decoderResult.setErasures(erasures.length);\n    return decoderResult;\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place.</p>\n   *\n   * @param codewords   data and error correction codewords\n   * @param erasures positions of any known erasures\n   * @param numECCodewords number of error correction codewords that are available in codewords\n   * @throws ChecksumException if error correction fails\n   */\n  PDF417ScanningDecoder.correctErrors = function (codewords, erasures, numECCodewords) {\n    if (erasures != null && erasures.length > numECCodewords / 2 + PDF417ScanningDecoder.MAX_ERRORS || numECCodewords < 0 || numECCodewords > PDF417ScanningDecoder.MAX_EC_CODEWORDS) {\n      // Too many errors or EC Codewords is corrupted\n      throw ChecksumException_1.default.getChecksumInstance();\n    }\n    return PDF417ScanningDecoder.errorCorrection.decode(codewords, numECCodewords, erasures);\n  };\n  /**\n   * Verify that all is OK with the codeword array.\n   * @throws FormatException\n   */\n  PDF417ScanningDecoder.verifyCodewordCount = function (codewords, numECCodewords) {\n    if (codewords.length < 4) {\n      // Codeword array size should be at least 4 allowing for\n      // Count CW, At least one Data CW, Error Correction CW, Error Correction CW\n      throw FormatException_1.default.getFormatInstance();\n    }\n    // The first codeword, the Symbol Length Descriptor, shall always encode the total number of data\n    // codewords in the symbol, including the Symbol Length Descriptor itself, data codewords and pad\n    // codewords, but excluding the number of error correction codewords.\n    var numberOfCodewords = codewords[0];\n    if (numberOfCodewords > codewords.length) {\n      throw FormatException_1.default.getFormatInstance();\n    }\n    if (numberOfCodewords === 0) {\n      // Reset to the length of the array - 8 (Allow for at least level 3 Error Correction (8 Error Codewords)\n      if (numECCodewords < codewords.length) {\n        codewords[0] = codewords.length - numECCodewords;\n      } else {\n        throw FormatException_1.default.getFormatInstance();\n      }\n    }\n  };\n  PDF417ScanningDecoder.getBitCountForCodeword = function (codeword) {\n    var result = new Int32Array(8);\n    var previousValue = 0;\n    var i = result.length - 1;\n    while (true) {\n      if ((codeword & 0x1) !== previousValue) {\n        previousValue = codeword & 0x1;\n        i--;\n        if (i < 0) {\n          break;\n        }\n      }\n      result[i]++;\n      codeword >>= 1;\n    }\n    return result;\n  };\n  PDF417ScanningDecoder.getCodewordBucketNumber = function (codeword) {\n    if (codeword instanceof Int32Array) {\n      return this.getCodewordBucketNumber_Int32Array(codeword);\n    }\n    return this.getCodewordBucketNumber_number(codeword);\n  };\n  PDF417ScanningDecoder.getCodewordBucketNumber_number = function (codeword) {\n    return PDF417ScanningDecoder.getCodewordBucketNumber(PDF417ScanningDecoder.getBitCountForCodeword(codeword));\n  };\n  PDF417ScanningDecoder.getCodewordBucketNumber_Int32Array = function (moduleBitCount) {\n    return (moduleBitCount[0] - moduleBitCount[2] + moduleBitCount[4] - moduleBitCount[6] + 9) % 9;\n  };\n  PDF417ScanningDecoder.toString = function (barcodeMatrix) {\n    var formatter = new Formatter_1.default();\n    // try (let formatter = new Formatter()) {\n    for (var row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n      formatter.format('Row %2d: ', row);\n      for (var column /*int*/ = 0; column < barcodeMatrix[row].length; column++) {\n        var barcodeValue = barcodeMatrix[row][column];\n        if (barcodeValue.getValue().length === 0) {\n          formatter.format('        ', null);\n        } else {\n          formatter.format('%4d(%2d)', barcodeValue.getValue()[0], barcodeValue.getConfidence(barcodeValue.getValue()[0]));\n        }\n      }\n      formatter.format('%n');\n    }\n    return formatter.toString();\n    // }\n  };\n  /*final*/\n  PDF417ScanningDecoder.CODEWORD_SKEW_SIZE = 2;\n  /*final*/\n  PDF417ScanningDecoder.MAX_ERRORS = 3;\n  /*final*/\n  PDF417ScanningDecoder.MAX_EC_CODEWORDS = 512;\n  /*final*/\n  PDF417ScanningDecoder.errorCorrection = new ErrorCorrection_1.default();\n  return PDF417ScanningDecoder;\n}();\nexports.default = PDF417ScanningDecoder;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/PDF417ScanningDecoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.ChecksumException;\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.NotFoundException;\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n// import com.google.zxing.common.detector.MathUtils;\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\n// import com.google.zxing.pdf417.decoder.ec.ErrorCorrection;\nvar ErrorCorrection_1 = require(\"./ec/ErrorCorrection\");\n// local\nvar BoundingBox_1 = require(\"./BoundingBox\");\nvar DetectionResultRowIndicatorColumn_1 = require(\"./DetectionResultRowIndicatorColumn\");\nvar DetectionResult_1 = require(\"./DetectionResult\");\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\nvar Codeword_1 = require(\"./Codeword\");\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\nvar PDF417CodewordDecoder_1 = require(\"./PDF417CodewordDecoder\");\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\n// utils\nvar Formatter_1 = require(\"../../util/Formatter\");\n// import java.util.ArrayList;\n// import java.util.Collection;\n// import java.util.Formatter;\n// import java.util.List;\n/**\n * @author Guenther Grau\n */\nvar PDF417ScanningDecoder = /** @class */ (function () {\n    function PDF417ScanningDecoder() {\n    }\n    /**\n     * @TODO don't pass in minCodewordWidth and maxCodewordWidth, pass in barcode columns for start and stop pattern\n     *\n     * columns. That way width can be deducted from the pattern column.\n     * This approach also allows to detect more details about the barcode, e.g. if a bar type (white or black) is wider\n     * than it should be. This can happen if the scanner used a bad blackpoint.\n     *\n     * @param BitMatrix\n     * @param image\n     * @param ResultPoint\n     * @param imageTopLeft\n     * @param ResultPoint\n     * @param imageBottomLeft\n     * @param ResultPoint\n     * @param imageTopRight\n     * @param ResultPoint\n     * @param imageBottomRight\n     * @param int\n     * @param minCodewordWidth\n     * @param int\n     * @param maxCodewordWidth\n     *\n     * @throws NotFoundException\n     * @throws FormatException\n     * @throws ChecksumException\n     */\n    PDF417ScanningDecoder.decode = function (image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight, minCodewordWidth, maxCodewordWidth) {\n        var boundingBox = new BoundingBox_1.default(image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight);\n        var leftRowIndicatorColumn = null;\n        var rightRowIndicatorColumn = null;\n        var detectionResult;\n        for (var firstPass /*boolean*/ = true;; firstPass = false) {\n            if (imageTopLeft != null) {\n                leftRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopLeft, true, minCodewordWidth, maxCodewordWidth);\n            }\n            if (imageTopRight != null) {\n                rightRowIndicatorColumn = PDF417ScanningDecoder.getRowIndicatorColumn(image, boundingBox, imageTopRight, false, minCodewordWidth, maxCodewordWidth);\n            }\n            detectionResult = PDF417ScanningDecoder.merge(leftRowIndicatorColumn, rightRowIndicatorColumn);\n            if (detectionResult == null) {\n                throw NotFoundException_1.default.getNotFoundInstance();\n            }\n            var resultBox = detectionResult.getBoundingBox();\n            if (firstPass && resultBox != null &&\n                (resultBox.getMinY() < boundingBox.getMinY() || resultBox.getMaxY() > boundingBox.getMaxY())) {\n                boundingBox = resultBox;\n            }\n            else {\n                break;\n            }\n        }\n        detectionResult.setBoundingBox(boundingBox);\n        var maxBarcodeColumn = detectionResult.getBarcodeColumnCount() + 1;\n        detectionResult.setDetectionResultColumn(0, leftRowIndicatorColumn);\n        detectionResult.setDetectionResultColumn(maxBarcodeColumn, rightRowIndicatorColumn);\n        var leftToRight = leftRowIndicatorColumn != null;\n        for (var barcodeColumnCount /*int*/ = 1; barcodeColumnCount <= maxBarcodeColumn; barcodeColumnCount++) {\n            var barcodeColumn = leftToRight ? barcodeColumnCount : maxBarcodeColumn - barcodeColumnCount;\n            if (detectionResult.getDetectionResultColumn(barcodeColumn) !== /* null */ undefined) {\n                // This will be the case for the opposite row indicator column, which doesn't need to be decoded again.\n                continue;\n            }\n            var detectionResultColumn = void 0;\n            if (barcodeColumn === 0 || barcodeColumn === maxBarcodeColumn) {\n                detectionResultColumn = new DetectionResultRowIndicatorColumn_1.default(boundingBox, barcodeColumn === 0);\n            }\n            else {\n                detectionResultColumn = new DetectionResultColumn_1.default(boundingBox);\n            }\n            detectionResult.setDetectionResultColumn(barcodeColumn, detectionResultColumn);\n            var startColumn = -1;\n            var previousStartColumn = startColumn;\n            // TODO start at a row for which we know the start position, then detect upwards and downwards from there.\n            for (var imageRow /*int*/ = boundingBox.getMinY(); imageRow <= boundingBox.getMaxY(); imageRow++) {\n                startColumn = PDF417ScanningDecoder.getStartColumn(detectionResult, barcodeColumn, imageRow, leftToRight);\n                if (startColumn < 0 || startColumn > boundingBox.getMaxX()) {\n                    if (previousStartColumn === -1) {\n                        continue;\n                    }\n                    startColumn = previousStartColumn;\n                }\n                var codeword = PDF417ScanningDecoder.detectCodeword(image, boundingBox.getMinX(), boundingBox.getMaxX(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n                if (codeword != null) {\n                    detectionResultColumn.setCodeword(imageRow, codeword);\n                    previousStartColumn = startColumn;\n                    minCodewordWidth = Math.min(minCodewordWidth, codeword.getWidth());\n                    maxCodewordWidth = Math.max(maxCodewordWidth, codeword.getWidth());\n                }\n            }\n        }\n        return PDF417ScanningDecoder.createDecoderResult(detectionResult);\n    };\n    /**\n     *\n     * @param leftRowIndicatorColumn\n     * @param rightRowIndicatorColumn\n     *\n     * @throws NotFoundException\n     */\n    PDF417ScanningDecoder.merge = function (leftRowIndicatorColumn, rightRowIndicatorColumn) {\n        if (leftRowIndicatorColumn == null && rightRowIndicatorColumn == null) {\n            return null;\n        }\n        var barcodeMetadata = PDF417ScanningDecoder.getBarcodeMetadata(leftRowIndicatorColumn, rightRowIndicatorColumn);\n        if (barcodeMetadata == null) {\n            return null;\n        }\n        var boundingBox = BoundingBox_1.default.merge(PDF417ScanningDecoder.adjustBoundingBox(leftRowIndicatorColumn), PDF417ScanningDecoder.adjustBoundingBox(rightRowIndicatorColumn));\n        return new DetectionResult_1.default(barcodeMetadata, boundingBox);\n    };\n    /**\n     *\n     * @param rowIndicatorColumn\n     *\n     * @throws NotFoundException\n     */\n    PDF417ScanningDecoder.adjustBoundingBox = function (rowIndicatorColumn) {\n        var e_1, _a;\n        if (rowIndicatorColumn == null) {\n            return null;\n        }\n        var rowHeights = rowIndicatorColumn.getRowHeights();\n        if (rowHeights == null) {\n            return null;\n        }\n        var maxRowHeight = PDF417ScanningDecoder.getMax(rowHeights);\n        var missingStartRows = 0;\n        try {\n            for (var rowHeights_1 = __values(rowHeights), rowHeights_1_1 = rowHeights_1.next(); !rowHeights_1_1.done; rowHeights_1_1 = rowHeights_1.next()) {\n                var rowHeight = rowHeights_1_1.value /*int*/;\n                missingStartRows += maxRowHeight - rowHeight;\n                if (rowHeight > 0) {\n                    break;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rowHeights_1_1 && !rowHeights_1_1.done && (_a = rowHeights_1.return)) _a.call(rowHeights_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var codewords = rowIndicatorColumn.getCodewords();\n        for (var row /*int*/ = 0; missingStartRows > 0 && codewords[row] == null; row++) {\n            missingStartRows--;\n        }\n        var missingEndRows = 0;\n        for (var row /*int*/ = rowHeights.length - 1; row >= 0; row--) {\n            missingEndRows += maxRowHeight - rowHeights[row];\n            if (rowHeights[row] > 0) {\n                break;\n            }\n        }\n        for (var row /*int*/ = codewords.length - 1; missingEndRows > 0 && codewords[row] == null; row--) {\n            missingEndRows--;\n        }\n        return rowIndicatorColumn.getBoundingBox().addMissingRows(missingStartRows, missingEndRows, rowIndicatorColumn.isLeft());\n    };\n    PDF417ScanningDecoder.getMax = function (values) {\n        var e_2, _a;\n        var maxValue = -1;\n        try {\n            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\n                var value = values_1_1.value /*int*/;\n                maxValue = Math.max(maxValue, value);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return maxValue;\n    };\n    PDF417ScanningDecoder.getBarcodeMetadata = function (leftRowIndicatorColumn, rightRowIndicatorColumn) {\n        var leftBarcodeMetadata;\n        if (leftRowIndicatorColumn == null ||\n            (leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata()) == null) {\n            return rightRowIndicatorColumn == null ? null : rightRowIndicatorColumn.getBarcodeMetadata();\n        }\n        var rightBarcodeMetadata;\n        if (rightRowIndicatorColumn == null ||\n            (rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata()) == null) {\n            return leftBarcodeMetadata;\n        }\n        if (leftBarcodeMetadata.getColumnCount() !== rightBarcodeMetadata.getColumnCount() &&\n            leftBarcodeMetadata.getErrorCorrectionLevel() !== rightBarcodeMetadata.getErrorCorrectionLevel() &&\n            leftBarcodeMetadata.getRowCount() !== rightBarcodeMetadata.getRowCount()) {\n            return null;\n        }\n        return leftBarcodeMetadata;\n    };\n    PDF417ScanningDecoder.getRowIndicatorColumn = function (image, boundingBox, startPoint, leftToRight, minCodewordWidth, maxCodewordWidth) {\n        var rowIndicatorColumn = new DetectionResultRowIndicatorColumn_1.default(boundingBox, leftToRight);\n        for (var i /*int*/ = 0; i < 2; i++) {\n            var increment = i === 0 ? 1 : -1;\n            var startColumn = Math.trunc(Math.trunc(startPoint.getX()));\n            for (var imageRow /*int*/ = Math.trunc(Math.trunc(startPoint.getY())); imageRow <= boundingBox.getMaxY() &&\n                imageRow >= boundingBox.getMinY(); imageRow += increment) {\n                var codeword = PDF417ScanningDecoder.detectCodeword(image, 0, image.getWidth(), leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth);\n                if (codeword != null) {\n                    rowIndicatorColumn.setCodeword(imageRow, codeword);\n                    if (leftToRight) {\n                        startColumn = codeword.getStartX();\n                    }\n                    else {\n                        startColumn = codeword.getEndX();\n                    }\n                }\n            }\n        }\n        return rowIndicatorColumn;\n    };\n    /**\n     *\n     * @param detectionResult\n     * @param BarcodeValue\n     * @param param2\n     * @param param3\n     * @param barcodeMatrix\n     *\n     * @throws NotFoundException\n     */\n    PDF417ScanningDecoder.adjustCodewordCount = function (detectionResult, barcodeMatrix) {\n        var barcodeMatrix01 = barcodeMatrix[0][1];\n        var numberOfCodewords = barcodeMatrix01.getValue();\n        var calculatedNumberOfCodewords = detectionResult.getBarcodeColumnCount() *\n            detectionResult.getBarcodeRowCount() -\n            PDF417ScanningDecoder.getNumberOfECCodeWords(detectionResult.getBarcodeECLevel());\n        if (numberOfCodewords.length === 0) {\n            if (calculatedNumberOfCodewords < 1 || calculatedNumberOfCodewords > PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE) {\n                throw NotFoundException_1.default.getNotFoundInstance();\n            }\n            barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n        }\n        else if (numberOfCodewords[0] !== calculatedNumberOfCodewords) {\n            // The calculated one is more reliable as it is derived from the row indicator columns\n            barcodeMatrix01.setValue(calculatedNumberOfCodewords);\n        }\n    };\n    /**\n     *\n     * @param detectionResult\n     *\n     * @throws FormatException\n     * @throws ChecksumException\n     * @throws NotFoundException\n     */\n    PDF417ScanningDecoder.createDecoderResult = function (detectionResult) {\n        var barcodeMatrix = PDF417ScanningDecoder.createBarcodeMatrix(detectionResult);\n        PDF417ScanningDecoder.adjustCodewordCount(detectionResult, barcodeMatrix);\n        var erasures /*Collection<Integer>*/ = new Array();\n        var codewords = new Int32Array(detectionResult.getBarcodeRowCount() * detectionResult.getBarcodeColumnCount());\n        var ambiguousIndexValuesList = /*List<int[]>*/ [];\n        var ambiguousIndexesList = /*Collection<Integer>*/ new Array();\n        for (var row /*int*/ = 0; row < detectionResult.getBarcodeRowCount(); row++) {\n            for (var column /*int*/ = 0; column < detectionResult.getBarcodeColumnCount(); column++) {\n                var values = barcodeMatrix[row][column + 1].getValue();\n                var codewordIndex = row * detectionResult.getBarcodeColumnCount() + column;\n                if (values.length === 0) {\n                    erasures.push(codewordIndex);\n                }\n                else if (values.length === 1) {\n                    codewords[codewordIndex] = values[0];\n                }\n                else {\n                    ambiguousIndexesList.push(codewordIndex);\n                    ambiguousIndexValuesList.push(values);\n                }\n            }\n        }\n        var ambiguousIndexValues = new Array(ambiguousIndexValuesList.length);\n        for (var i /*int*/ = 0; i < ambiguousIndexValues.length; i++) {\n            ambiguousIndexValues[i] = ambiguousIndexValuesList[i];\n        }\n        return PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues(detectionResult.getBarcodeECLevel(), codewords, PDF417Common_1.default.toIntArray(erasures), PDF417Common_1.default.toIntArray(ambiguousIndexesList), ambiguousIndexValues);\n    };\n    /**\n     * This method deals with the fact, that the decoding process doesn't always yield a single most likely value. The\n     * current error correction implementation doesn't deal with erasures very well, so it's better to provide a value\n     * for these ambiguous codewords instead of treating it as an erasure. The problem is that we don't know which of\n     * the ambiguous values to choose. We try decode using the first value, and if that fails, we use another of the\n     * ambiguous values and try to decode again. This usually only happens on very hard to read and decode barcodes,\n     * so decoding the normal barcodes is not affected by this.\n     *\n     * @param erasureArray contains the indexes of erasures\n     * @param ambiguousIndexes array with the indexes that have more than one most likely value\n     * @param ambiguousIndexValues two dimensional array that contains the ambiguous values. The first dimension must\n     * be the same length as the ambiguousIndexes array\n     *\n     * @throws FormatException\n     * @throws ChecksumException\n     */\n    PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues = function (ecLevel, codewords, erasureArray, ambiguousIndexes, ambiguousIndexValues) {\n        var ambiguousIndexCount = new Int32Array(ambiguousIndexes.length);\n        var tries = 100;\n        while (tries-- > 0) {\n            for (var i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n                codewords[ambiguousIndexes[i]] = ambiguousIndexValues[i][ambiguousIndexCount[i]];\n            }\n            try {\n                return PDF417ScanningDecoder.decodeCodewords(codewords, ecLevel, erasureArray);\n            }\n            catch (err) {\n                var ignored = err instanceof ChecksumException_1.default;\n                if (!ignored) {\n                    throw err;\n                }\n            }\n            if (ambiguousIndexCount.length === 0) {\n                throw ChecksumException_1.default.getChecksumInstance();\n            }\n            for (var i /*int*/ = 0; i < ambiguousIndexCount.length; i++) {\n                if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {\n                    ambiguousIndexCount[i]++;\n                    break;\n                }\n                else {\n                    ambiguousIndexCount[i] = 0;\n                    if (i === ambiguousIndexCount.length - 1) {\n                        throw ChecksumException_1.default.getChecksumInstance();\n                    }\n                }\n            }\n        }\n        throw ChecksumException_1.default.getChecksumInstance();\n    };\n    PDF417ScanningDecoder.createBarcodeMatrix = function (detectionResult) {\n        var e_3, _a, e_4, _b;\n        // let barcodeMatrix: BarcodeValue[][] =\n        // new BarcodeValue[detectionResult.getBarcodeRowCount()][detectionResult.getBarcodeColumnCount() + 2];\n        var barcodeMatrix = Array.from({ length: detectionResult.getBarcodeRowCount() }, function () { return new Array(detectionResult.getBarcodeColumnCount() + 2); });\n        for (var row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n            for (var column_1 /*int*/ = 0; column_1 < barcodeMatrix[row].length; column_1++) {\n                barcodeMatrix[row][column_1] = new BarcodeValue_1.default();\n            }\n        }\n        var column = 0;\n        try {\n            for (var _c = __values(detectionResult.getDetectionResultColumns()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var detectionResultColumn = _d.value /*DetectionResultColumn*/;\n                if (detectionResultColumn != null) {\n                    try {\n                        for (var _e = __values(detectionResultColumn.getCodewords()), _f = _e.next(); !_f.done; _f = _e.next()) {\n                            var codeword = _f.value /*Codeword*/;\n                            if (codeword != null) {\n                                var rowNumber = codeword.getRowNumber();\n                                if (rowNumber >= 0) {\n                                    if (rowNumber >= barcodeMatrix.length) {\n                                        // We have more rows than the barcode metadata allows for, ignore them.\n                                        continue;\n                                    }\n                                    barcodeMatrix[rowNumber][column].setValue(codeword.getValue());\n                                }\n                            }\n                        }\n                    }\n                    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                        }\n                        finally { if (e_4) throw e_4.error; }\n                    }\n                }\n                column++;\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return barcodeMatrix;\n    };\n    PDF417ScanningDecoder.isValidBarcodeColumn = function (detectionResult, barcodeColumn) {\n        return barcodeColumn >= 0 && barcodeColumn <= detectionResult.getBarcodeColumnCount() + 1;\n    };\n    PDF417ScanningDecoder.getStartColumn = function (detectionResult, barcodeColumn, imageRow, leftToRight) {\n        var e_5, _a;\n        var offset = leftToRight ? 1 : -1;\n        var codeword = null;\n        if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n            codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodeword(imageRow);\n        }\n        if (codeword != null) {\n            return leftToRight ? codeword.getEndX() : codeword.getStartX();\n        }\n        codeword = detectionResult.getDetectionResultColumn(barcodeColumn).getCodewordNearby(imageRow);\n        if (codeword != null) {\n            return leftToRight ? codeword.getStartX() : codeword.getEndX();\n        }\n        if (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n            codeword = detectionResult.getDetectionResultColumn(barcodeColumn - offset).getCodewordNearby(imageRow);\n        }\n        if (codeword != null) {\n            return leftToRight ? codeword.getEndX() : codeword.getStartX();\n        }\n        var skippedColumns = 0;\n        while (PDF417ScanningDecoder.isValidBarcodeColumn(detectionResult, barcodeColumn - offset)) {\n            barcodeColumn -= offset;\n            try {\n                for (var _b = __values(detectionResult.getDetectionResultColumn(barcodeColumn).getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var previousRowCodeword = _c.value /*Codeword*/;\n                    if (previousRowCodeword != null) {\n                        return (leftToRight ? previousRowCodeword.getEndX() : previousRowCodeword.getStartX()) +\n                            offset *\n                                skippedColumns *\n                                (previousRowCodeword.getEndX() - previousRowCodeword.getStartX());\n                    }\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            skippedColumns++;\n        }\n        return leftToRight ? detectionResult.getBoundingBox().getMinX() : detectionResult.getBoundingBox().getMaxX();\n    };\n    PDF417ScanningDecoder.detectCodeword = function (image, minColumn, maxColumn, leftToRight, startColumn, imageRow, minCodewordWidth, maxCodewordWidth) {\n        startColumn = PDF417ScanningDecoder.adjustCodewordStartColumn(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n        // we usually know fairly exact now how long a codeword is. We should provide minimum and maximum expected length\n        // and try to adjust the read pixels, e.g. remove single pixel errors or try to cut off exceeding pixels.\n        // min and maxCodewordWidth should not be used as they are calculated for the whole barcode an can be inaccurate\n        // for the current position\n        var moduleBitCount = PDF417ScanningDecoder.getModuleBitCount(image, minColumn, maxColumn, leftToRight, startColumn, imageRow);\n        if (moduleBitCount == null) {\n            return null;\n        }\n        var endColumn;\n        var codewordBitCount = MathUtils_1.default.sum(moduleBitCount);\n        if (leftToRight) {\n            endColumn = startColumn + codewordBitCount;\n        }\n        else {\n            for (var i /*int*/ = 0; i < moduleBitCount.length / 2; i++) {\n                var tmpCount = moduleBitCount[i];\n                moduleBitCount[i] = moduleBitCount[moduleBitCount.length - 1 - i];\n                moduleBitCount[moduleBitCount.length - 1 - i] = tmpCount;\n            }\n            endColumn = startColumn;\n            startColumn = endColumn - codewordBitCount;\n        }\n        // TODO implement check for width and correction of black and white bars\n        // use start (and maybe stop pattern) to determine if black bars are wider than white bars. If so, adjust.\n        // should probably done only for codewords with a lot more than 17 bits.\n        // The following fixes 10-1.png, which has wide black bars and small white bars\n        //    for (let i /*int*/ = 0; i < moduleBitCount.length; i++) {\n        //      if (i % 2 === 0) {\n        //        moduleBitCount[i]--;\n        //      } else {\n        //        moduleBitCount[i]++;\n        //      }\n        //    }\n        // We could also use the width of surrounding codewords for more accurate results, but this seems\n        // sufficient for now\n        if (!PDF417ScanningDecoder.checkCodewordSkew(codewordBitCount, minCodewordWidth, maxCodewordWidth)) {\n            // We could try to use the startX and endX position of the codeword in the same column in the previous row,\n            // create the bit count from it and normalize it to 8. This would help with single pixel errors.\n            return null;\n        }\n        var decodedValue = PDF417CodewordDecoder_1.default.getDecodedValue(moduleBitCount);\n        var codeword = PDF417Common_1.default.getCodeword(decodedValue);\n        if (codeword === -1) {\n            return null;\n        }\n        return new Codeword_1.default(startColumn, endColumn, PDF417ScanningDecoder.getCodewordBucketNumber(decodedValue), codeword);\n    };\n    PDF417ScanningDecoder.getModuleBitCount = function (image, minColumn, maxColumn, leftToRight, startColumn, imageRow) {\n        var imageColumn = startColumn;\n        var moduleBitCount = new Int32Array(8);\n        var moduleNumber = 0;\n        var increment = leftToRight ? 1 : -1;\n        var previousPixelValue = leftToRight;\n        while ((leftToRight ? imageColumn < maxColumn : imageColumn >= minColumn) &&\n            moduleNumber < moduleBitCount.length) {\n            if (image.get(imageColumn, imageRow) === previousPixelValue) {\n                moduleBitCount[moduleNumber]++;\n                imageColumn += increment;\n            }\n            else {\n                moduleNumber++;\n                previousPixelValue = !previousPixelValue;\n            }\n        }\n        if (moduleNumber === moduleBitCount.length ||\n            ((imageColumn === (leftToRight ? maxColumn : minColumn)) &&\n                moduleNumber === moduleBitCount.length - 1)) {\n            return moduleBitCount;\n        }\n        return null;\n    };\n    PDF417ScanningDecoder.getNumberOfECCodeWords = function (barcodeECLevel) {\n        return 2 << barcodeECLevel;\n    };\n    PDF417ScanningDecoder.adjustCodewordStartColumn = function (image, minColumn, maxColumn, leftToRight, codewordStartColumn, imageRow) {\n        var correctedStartColumn = codewordStartColumn;\n        var increment = leftToRight ? -1 : 1;\n        // there should be no black pixels before the start column. If there are, then we need to start earlier.\n        for (var i /*int*/ = 0; i < 2; i++) {\n            while ((leftToRight ? correctedStartColumn >= minColumn : correctedStartColumn < maxColumn) &&\n                leftToRight === image.get(correctedStartColumn, imageRow)) {\n                if (Math.abs(codewordStartColumn - correctedStartColumn) > PDF417ScanningDecoder.CODEWORD_SKEW_SIZE) {\n                    return codewordStartColumn;\n                }\n                correctedStartColumn += increment;\n            }\n            increment = -increment;\n            leftToRight = !leftToRight;\n        }\n        return correctedStartColumn;\n    };\n    PDF417ScanningDecoder.checkCodewordSkew = function (codewordSize, minCodewordWidth, maxCodewordWidth) {\n        return minCodewordWidth - PDF417ScanningDecoder.CODEWORD_SKEW_SIZE <= codewordSize &&\n            codewordSize <= maxCodewordWidth + PDF417ScanningDecoder.CODEWORD_SKEW_SIZE;\n    };\n    /**\n     * @throws FormatException,\n     * @throws ChecksumException\n     */\n    PDF417ScanningDecoder.decodeCodewords = function (codewords, ecLevel, erasures) {\n        if (codewords.length === 0) {\n            throw FormatException_1.default.getFormatInstance();\n        }\n        var numECCodewords = 1 << (ecLevel + 1);\n        var correctedErrorsCount = PDF417ScanningDecoder.correctErrors(codewords, erasures, numECCodewords);\n        PDF417ScanningDecoder.verifyCodewordCount(codewords, numECCodewords);\n        // Decode the codewords\n        var decoderResult = DecodedBitStreamParser_1.default.decode(codewords, '' + ecLevel);\n        decoderResult.setErrorsCorrected(correctedErrorsCount);\n        decoderResult.setErasures(erasures.length);\n        return decoderResult;\n    };\n    /**\n     * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n     * correct the errors in-place.</p>\n     *\n     * @param codewords   data and error correction codewords\n     * @param erasures positions of any known erasures\n     * @param numECCodewords number of error correction codewords that are available in codewords\n     * @throws ChecksumException if error correction fails\n     */\n    PDF417ScanningDecoder.correctErrors = function (codewords, erasures, numECCodewords) {\n        if (erasures != null &&\n            erasures.length > numECCodewords / 2 + PDF417ScanningDecoder.MAX_ERRORS ||\n            numECCodewords < 0 ||\n            numECCodewords > PDF417ScanningDecoder.MAX_EC_CODEWORDS) {\n            // Too many errors or EC Codewords is corrupted\n            throw ChecksumException_1.default.getChecksumInstance();\n        }\n        return PDF417ScanningDecoder.errorCorrection.decode(codewords, numECCodewords, erasures);\n    };\n    /**\n     * Verify that all is OK with the codeword array.\n     * @throws FormatException\n     */\n    PDF417ScanningDecoder.verifyCodewordCount = function (codewords, numECCodewords) {\n        if (codewords.length < 4) {\n            // Codeword array size should be at least 4 allowing for\n            // Count CW, At least one Data CW, Error Correction CW, Error Correction CW\n            throw FormatException_1.default.getFormatInstance();\n        }\n        // The first codeword, the Symbol Length Descriptor, shall always encode the total number of data\n        // codewords in the symbol, including the Symbol Length Descriptor itself, data codewords and pad\n        // codewords, but excluding the number of error correction codewords.\n        var numberOfCodewords = codewords[0];\n        if (numberOfCodewords > codewords.length) {\n            throw FormatException_1.default.getFormatInstance();\n        }\n        if (numberOfCodewords === 0) {\n            // Reset to the length of the array - 8 (Allow for at least level 3 Error Correction (8 Error Codewords)\n            if (numECCodewords < codewords.length) {\n                codewords[0] = codewords.length - numECCodewords;\n            }\n            else {\n                throw FormatException_1.default.getFormatInstance();\n            }\n        }\n    };\n    PDF417ScanningDecoder.getBitCountForCodeword = function (codeword) {\n        var result = new Int32Array(8);\n        var previousValue = 0;\n        var i = result.length - 1;\n        while (true) {\n            if ((codeword & 0x1) !== previousValue) {\n                previousValue = codeword & 0x1;\n                i--;\n                if (i < 0) {\n                    break;\n                }\n            }\n            result[i]++;\n            codeword >>= 1;\n        }\n        return result;\n    };\n    PDF417ScanningDecoder.getCodewordBucketNumber = function (codeword) {\n        if (codeword instanceof Int32Array) {\n            return this.getCodewordBucketNumber_Int32Array(codeword);\n        }\n        return this.getCodewordBucketNumber_number(codeword);\n    };\n    PDF417ScanningDecoder.getCodewordBucketNumber_number = function (codeword) {\n        return PDF417ScanningDecoder.getCodewordBucketNumber(PDF417ScanningDecoder.getBitCountForCodeword(codeword));\n    };\n    PDF417ScanningDecoder.getCodewordBucketNumber_Int32Array = function (moduleBitCount) {\n        return (moduleBitCount[0] - moduleBitCount[2] + moduleBitCount[4] - moduleBitCount[6] + 9) % 9;\n    };\n    PDF417ScanningDecoder.toString = function (barcodeMatrix) {\n        var formatter = new Formatter_1.default();\n        // try (let formatter = new Formatter()) {\n        for (var row /*int*/ = 0; row < barcodeMatrix.length; row++) {\n            formatter.format('Row %2d: ', row);\n            for (var column /*int*/ = 0; column < barcodeMatrix[row].length; column++) {\n                var barcodeValue = barcodeMatrix[row][column];\n                if (barcodeValue.getValue().length === 0) {\n                    formatter.format('        ', null);\n                }\n                else {\n                    formatter.format('%4d(%2d)', barcodeValue.getValue()[0], barcodeValue.getConfidence(barcodeValue.getValue()[0]));\n                }\n            }\n            formatter.format('%n');\n        }\n        return formatter.toString();\n        // }\n    };\n    /*final*/ PDF417ScanningDecoder.CODEWORD_SKEW_SIZE = 2;\n    /*final*/ PDF417ScanningDecoder.MAX_ERRORS = 3;\n    /*final*/ PDF417ScanningDecoder.MAX_EC_CODEWORDS = 512;\n    /*final*/ PDF417ScanningDecoder.errorCorrection = new ErrorCorrection_1.default();\n    return PDF417ScanningDecoder;\n}());\nexports.default = PDF417ScanningDecoder;\n//# sourceMappingURL=PDF417ScanningDecoder.js.map"]},"metadata":{},"sourceType":"script"}