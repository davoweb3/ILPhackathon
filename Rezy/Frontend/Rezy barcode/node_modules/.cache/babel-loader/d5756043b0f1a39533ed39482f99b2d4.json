{"ast":null,"code":"/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function () {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function (blob) {\n  return blob.trim().split('\\n').map(function (line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function (blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function (part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function (blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function (line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function (line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4],\n    // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default:\n        // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function (candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function (line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function (codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function (headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function (line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function (codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function (param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function (line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function (codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function (fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function (line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\nSDPUtils.parseSsrcGroup = function (line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function (ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function (mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\nSDPUtils.parseFingerprint = function (line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(),\n    // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function (params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function (fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3)\n  };\n};\nSDPUtils.writeCryptoLine = function (parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function (keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\n  };\n};\nSDPUtils.writeCryptoKeyParams = function (keyParams) {\n  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10)\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function (params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function (mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) {\n    // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default:\n          // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function (kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function (codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function (codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function (codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function (extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(function (line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function (part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n  description.codecs.forEach(function (codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {\n          ssrc: secondarySsrc\n        };\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function (params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function (mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (obj) {\n    return obj.attribute === 'cname';\n  })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function (mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function (mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0].substr(10).split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function (media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\n  } else {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function () {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n};\nSDPUtils.writeMediaSection = function (transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(), type === 'offer' ? 'actpass' : 'active');\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' + transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' + transceiver.sendEncodingParameters[0].ssrc + ' ' + transceiver.sendEncodingParameters[0].rtx.ssrc + '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc + ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function (mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n      // FIXME: What should happen here?\n    }\n  }\n\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\nSDPUtils.getKind = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\nSDPUtils.isRejected = function (mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\nSDPUtils.parseMLine = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\nSDPUtils.parseOLine = function (mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function (blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}","map":{"version":3,"names":["SDPUtils","generateIdentifier","Math","random","toString","substr","localCName","splitLines","blob","trim","split","map","line","splitSections","parts","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","substring","candidate","foundation","component","parseInt","protocol","toLowerCase","priority","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","undefined","parseExtmap","id","direction","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","slice","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","parseMsid","spec","stream","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","media","sctp","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","user","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","msid","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports"],"sources":["/home/cedarmat/Rezy/Frontend/Rezy barcode/scanner/scanner/node_modules/sdp/sdp.js"],"sourcesContent":["/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}