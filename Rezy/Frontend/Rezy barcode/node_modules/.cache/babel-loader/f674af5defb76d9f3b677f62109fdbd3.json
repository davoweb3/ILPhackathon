{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ExpandedRow = /** @class */function () {\n  function ExpandedRow(pairs, rowNumber, wasReversed) {\n    this.pairs = pairs;\n    this.rowNumber = rowNumber;\n    this.wasReversed = wasReversed;\n  }\n  ExpandedRow.prototype.getPairs = function () {\n    return this.pairs;\n  };\n  ExpandedRow.prototype.getRowNumber = function () {\n    return this.rowNumber;\n  };\n  ExpandedRow.prototype.isReversed = function () {\n    return this.wasReversed;\n  };\n  // check implementation\n  ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n    return this.checkEqualitity(this, otherPairs);\n  };\n  //@Override\n  ExpandedRow.prototype.toString = function () {\n    return \"{ \" + this.pairs + \" }\";\n  };\n  /**\n   * Two rows are equal if they contain the same pairs in the same order.\n   */\n  //@Override\n  // check implementation\n  ExpandedRow.prototype.equals = function (o1, o2) {\n    if (!(o1 instanceof ExpandedRow)) {\n      return false;\n    }\n    return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n  };\n  ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n    if (!pair1 || !pair2) return;\n    var result;\n    pair1.forEach(function (e1, i) {\n      pair2.forEach(function (e2) {\n        if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n          result = true;\n        }\n      });\n    });\n    return result;\n  };\n  return ExpandedRow;\n}();\nexports.default = ExpandedRow;","map":{"version":3,"sources":["../../../../../src/core/oned/rss/expanded/ExpandedRow.ts"],"names":[],"mappings":";;;;;AAGA,IAAA,WAAA,GAAA,aAAA,YAAA;EAIE,SAAA,WAAA,CAAY,KAA0B,EAAC,SAAgB,EAAC,WAAmB,EAAA;IACzE,IAAI,CAAC,KAAK,GAAG,KAAK;IAClB,IAAI,CAAC,SAAS,GAAG,SAAS;IAC1B,IAAI,CAAC,WAAW,GAAG,WAAW;EAChC;EACA,WAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,KAAK;EACnB,CAAC;EACD,WAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;IACE,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EACD,WAAA,CAAA,SAAA,CAAA,UAAU,GAAV,YAAA;IACE,OAAO,IAAI,CAAC,WAAW;EACzB,CAAC;EACD;EACA,WAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,UAA+B,EAAA;IAC1C,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC;EAC/C,CAAC;EACD;EACO,WAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI;EACjC,CAAC;EAED;;AAEG;EACH;EACE;EACK,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,EAAc,EAAC,EAAc,EAAA;IACzC,IAAI,EAAE,EAAE,YAAY,WAAW,CAAC,EAAE;MAChC,OAAO,KAAK;IACb;IACD,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,EAAC,EAAE,CAAC,IAAI,EAAE,CAAC,WAAW,KAAK,EAAE,CAAC,WAAW;EACzE,CAAC;EACD,WAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,KAAS,EAAE,KAAS,EAAA;IAClC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;IACtB,IAAI,MAAM;IACV,KAAK,CAAC,OAAO,CAAC,UAAC,EAAE,EAAE,CAAC,EAAA;MAClB,KAAK,CAAC,OAAO,CAAC,UAAA,EAAE,EAAA;QACd,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,EAAE;UACvM,MAAM,GAAG,IAAI;QACd;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAO,MAAM;EACf,CAAC;EASH,OAAA,WAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExpandedRow = /** @class */ (function () {\n    function ExpandedRow(pairs, rowNumber, wasReversed) {\n        this.pairs = pairs;\n        this.rowNumber = rowNumber;\n        this.wasReversed = wasReversed;\n    }\n    ExpandedRow.prototype.getPairs = function () {\n        return this.pairs;\n    };\n    ExpandedRow.prototype.getRowNumber = function () {\n        return this.rowNumber;\n    };\n    ExpandedRow.prototype.isReversed = function () {\n        return this.wasReversed;\n    };\n    // check implementation\n    ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n        return this.checkEqualitity(this, otherPairs);\n    };\n    //@Override\n    ExpandedRow.prototype.toString = function () {\n        return \"{ \" + this.pairs + \" }\";\n    };\n    /**\n     * Two rows are equal if they contain the same pairs in the same order.\n     */\n    //@Override\n    // check implementation\n    ExpandedRow.prototype.equals = function (o1, o2) {\n        if (!(o1 instanceof ExpandedRow)) {\n            return false;\n        }\n        return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n    };\n    ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n        if (!pair1 || !pair2)\n            return;\n        var result;\n        pair1.forEach(function (e1, i) {\n            pair2.forEach(function (e2) {\n                if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n                    result = true;\n                }\n            });\n        });\n        return result;\n    };\n    return ExpandedRow;\n}());\nexports.default = ExpandedRow;\n//# sourceMappingURL=ExpandedRow.js.map"]},"metadata":{},"sourceType":"script"}