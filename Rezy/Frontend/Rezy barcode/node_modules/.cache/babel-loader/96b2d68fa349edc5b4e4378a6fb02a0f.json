{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates a finder pattern, which are the three square patterns found in\n * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\n * as a convenience to the finder's bookkeeping.</p>\n *\n * @author Sean Owen\n */\nvar FinderPattern = /** @class */function (_super) {\n  __extends(FinderPattern, _super);\n  // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\n  //   this(posX, posY, estimatedModuleSize, 1)\n  // }\n  function FinderPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/, count /*int*/) {\n    var _this = _super.call(this, posX, posY) || this;\n    _this.estimatedModuleSize = estimatedModuleSize;\n    _this.count = count;\n    if (undefined === count) {\n      _this.count = 1;\n    }\n    return _this;\n  }\n  FinderPattern.prototype.getEstimatedModuleSize = function () {\n    return this.estimatedModuleSize;\n  };\n  FinderPattern.prototype.getCount = function () {\n    return this.count;\n  };\n  /*\n  void incrementCount() {\n    this.count++\n  }\n   */\n  /**\n   * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\n   * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n   */\n  FinderPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n    if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n      return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n    }\n    return false;\n  };\n  /**\n   * Combines this object's current estimate of a finder pattern position and module size\n   * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\n   * based on count.\n   */\n  FinderPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n    var combinedCount = this.count + 1;\n    var combinedX = (this.count * this.getX() + j) / combinedCount;\n    var combinedY = (this.count * this.getY() + i) / combinedCount;\n    var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\n    return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\n  };\n  return FinderPattern;\n}(ResultPoint_1.default);\nexports.default = FinderPattern;","map":{"version":3,"names":["ResultPoint_1","require","FinderPattern","_super","__extends","posX","posY","estimatedModuleSize","count","_this","call","undefined","prototype","getEstimatedModuleSize","getCount","aboutEquals","moduleSize","i","j","Math","abs","getY","getX","moduleSizeDiff","combineEstimate","newModuleSize","combinedCount","combinedX","combinedY","combinedModuleSize","default"],"sources":["../../../../src/core/qrcode/detector/FinderPattern.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA,IAAAA,aAAA,GAAAC,OAAA;AAEA;;;;;;;AAOA,IAAAC,aAAA,0BAAAC,MAAA;EAA2CC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAEvC;EACA;EACA;EAEA,SAAAD,cAAmBG,IAAY,YAAWC,IAAY,YAAmBC,mBAA2B,YAAmBC,KAAc,CAAC,SAAO;IAA7I,IAAAC,KAAA,GACIN,MAAA,CAAAO,IAAA,OAAML,IAAI,EAAEC,IAAI,CAAC;IADoDG,KAAA,CAAAF,mBAAmB,GAAnBA,mBAAmB;IAA2BE,KAAA,CAAAD,KAAK,GAALA,KAAK;IAExH,IAAIG,SAAS,KAAKH,KAAK,EAAE;MACrBC,KAAI,CAACD,KAAK,GAAG,CAAC;;;EAEtB;EAEON,aAAA,CAAAU,SAAA,CAAAC,sBAAsB,GAA7B;IACI,OAAO,IAAI,CAACN,mBAAmB;EACnC,CAAC;EAEML,aAAA,CAAAU,SAAA,CAAAE,QAAQ,GAAf;IACI,OAAO,IAAI,CAACN,KAAK;EACrB,CAAC;EAED;;;;;EAMA;;;;EAION,aAAA,CAAAU,SAAA,CAAAG,WAAW,GAAlB,UAAmBC,UAAkB,YAAWC,CAAS,YAAWC,CAAS,YAAS;IAClF,IAAIC,IAAI,CAACC,GAAG,CAACH,CAAC,GAAG,IAAI,CAACI,IAAI,EAAE,CAAC,IAAIL,UAAU,IAAIG,IAAI,CAACC,GAAG,CAACF,CAAC,GAAG,IAAI,CAACI,IAAI,EAAE,CAAC,IAAIN,UAAU,EAAE;MACpF,IAAMO,cAAc,GAAqBJ,IAAI,CAACC,GAAG,CAACJ,UAAU,GAAG,IAAI,CAACT,mBAAmB,CAAC;MACxF,OAAOgB,cAAc,IAAI,GAAG,IAAIA,cAAc,IAAI,IAAI,CAAChB,mBAAmB;;IAE9E,OAAO,KAAK;EAChB,CAAC;EAED;;;;;EAKOL,aAAA,CAAAU,SAAA,CAAAY,eAAe,GAAtB,UAAuBP,CAAS,YAAWC,CAAS,YAAWO,aAAqB,YAAS;IACzF,IAAMC,aAAa,GAAG,IAAI,CAAClB,KAAK,GAAG,CAAC;IACpC,IAAMmB,SAAS,GAAqB,CAAC,IAAI,CAACnB,KAAK,GAAG,IAAI,CAACc,IAAI,EAAE,GAAGJ,CAAC,IAAIQ,aAAa;IAClF,IAAME,SAAS,GAAqB,CAAC,IAAI,CAACpB,KAAK,GAAG,IAAI,CAACa,IAAI,EAAE,GAAGJ,CAAC,IAAIS,aAAa;IAClF,IAAMG,kBAAkB,GAAqB,CAAC,IAAI,CAACrB,KAAK,GAAG,IAAI,CAACD,mBAAmB,GAAGkB,aAAa,IAAIC,aAAa;IACpH,OAAO,IAAIxB,aAAa,CAACyB,SAAS,EAAEC,SAAS,EAAEC,kBAAkB,EAAEH,aAAa,CAAC;EACrF,CAAC;EAEL,OAAAxB,aAAC;AAAD,CAAC,CApD0CF,aAAA,CAAA8B,OAAW"},"metadata":{},"sourceType":"script"}