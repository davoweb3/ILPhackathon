{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author Satoru Takabayashi\n * @author Daniel Switkin\n * @author Sean Owen\n */\nvar MaskUtil = /** @class */function () {\n  function MaskUtil() {\n    // do nothing\n  }\n  /**\n   * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n   * give penalty to them. Example: 00000 or 11111.\n   */\n  MaskUtil.applyMaskPenaltyRule1 = function (matrix) {\n    return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\n  };\n  /**\n   * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n   * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\n   * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\n   */\n  MaskUtil.applyMaskPenaltyRule2 = function (matrix) {\n    var penalty = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height - 1; y++) {\n      var arrayY = array[y];\n      for (var x = 0; x < width - 1; x++) {\n        var value = arrayY[x];\n        if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\n          penalty++;\n        }\n      }\n    }\n    return MaskUtil.N2 * penalty;\n  };\n  /**\n   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\n   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\n   * find patterns like 000010111010000, we give penalty once.\n   */\n  MaskUtil.applyMaskPenaltyRule3 = function (matrix) {\n    var numPenalties = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var arrayY = array[y]; // We can at least optimize this access\n        if (x + 6 < width && arrayY[x] === 1 && arrayY[x + 1] === 0 && arrayY[x + 2] === 1 && arrayY[x + 3] === 1 && arrayY[x + 4] === 1 && arrayY[x + 5] === 0 && arrayY[x + 6] === 1 && (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\n          numPenalties++;\n        }\n        if (y + 6 < height && array[y][x] === 1 && array[y + 1][x] === 0 && array[y + 2][x] === 1 && array[y + 3][x] === 1 && array[y + 4][x] === 1 && array[y + 5][x] === 0 && array[y + 6][x] === 1 && (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\n          numPenalties++;\n        }\n      }\n    }\n    return numPenalties * MaskUtil.N3;\n  };\n  MaskUtil.isWhiteHorizontal = function (rowArray, from /*int*/, to /*int*/) {\n    from = Math.max(from, 0);\n    to = Math.min(to, rowArray.length);\n    for (var i = from; i < to; i++) {\n      if (rowArray[i] === 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  MaskUtil.isWhiteVertical = function (array, col /*int*/, from /*int*/, to /*int*/) {\n    from = Math.max(from, 0);\n    to = Math.min(to, array.length);\n    for (var i = from; i < to; i++) {\n      if (array[i][col] === 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n   * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\n   */\n  MaskUtil.applyMaskPenaltyRule4 = function (matrix) {\n    var numDarkCells = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n    for (var y = 0; y < height; y++) {\n      var arrayY = array[y];\n      for (var x = 0; x < width; x++) {\n        if (arrayY[x] === 1) {\n          numDarkCells++;\n        }\n      }\n    }\n    var numTotalCells = matrix.getHeight() * matrix.getWidth();\n    var fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\n    return fivePercentVariances * MaskUtil.N4;\n  };\n  /**\n   * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n   * pattern conditions.\n   */\n  MaskUtil.getDataMaskBit = function (maskPattern /*int*/, x /*int*/, y /*int*/) {\n    var intermediate; /*int*/\n    var temp; /*int*/\n    switch (maskPattern) {\n      case 0:\n        intermediate = y + x & 0x1;\n        break;\n      case 1:\n        intermediate = y & 0x1;\n        break;\n      case 2:\n        intermediate = x % 3;\n        break;\n      case 3:\n        intermediate = (y + x) % 3;\n        break;\n      case 4:\n        intermediate = Math.floor(y / 2) + Math.floor(x / 3) & 0x1;\n        break;\n      case 5:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3;\n        break;\n      case 6:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3 & 0x1;\n        break;\n      case 7:\n        temp = y * x;\n        intermediate = temp % 3 + (y + x & 0x1) & 0x1;\n        break;\n      default:\n        throw new IllegalArgumentException_1.default('Invalid mask pattern: ' + maskPattern);\n    }\n    return intermediate === 0;\n  };\n  /**\n   * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n   * vertical and horizontal orders respectively.\n   */\n  MaskUtil.applyMaskPenaltyRule1Internal = function (matrix, isHorizontal) {\n    var penalty = 0;\n    var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n    var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n    var array = matrix.getArray();\n    for (var i = 0; i < iLimit; i++) {\n      var numSameBitCells = 0;\n      var prevBit = -1;\n      for (var j = 0; j < jLimit; j++) {\n        var bit = isHorizontal ? array[i][j] : array[j][i];\n        if (bit === prevBit) {\n          numSameBitCells++;\n        } else {\n          if (numSameBitCells >= 5) {\n            penalty += MaskUtil.N1 + (numSameBitCells - 5);\n          }\n          numSameBitCells = 1; // Include the cell itself.\n          prevBit = bit;\n        }\n      }\n      if (numSameBitCells >= 5) {\n        penalty += MaskUtil.N1 + (numSameBitCells - 5);\n      }\n    }\n    return penalty;\n  };\n  // Penalty weights from section 6.8.2.1\n  MaskUtil.N1 = 3;\n  MaskUtil.N2 = 3;\n  MaskUtil.N3 = 40;\n  MaskUtil.N4 = 10;\n  return MaskUtil;\n}();\nexports.default = MaskUtil;","map":{"version":3,"names":["IllegalArgumentException_1","require","MaskUtil","applyMaskPenaltyRule1","matrix","applyMaskPenaltyRule1Internal","applyMaskPenaltyRule2","penalty","array","getArray","width","getWidth","height","getHeight","y","arrayY","x","value","N2","applyMaskPenaltyRule3","numPenalties","isWhiteHorizontal","isWhiteVertical","N3","rowArray","from","to","Math","max","min","length","i","col","applyMaskPenaltyRule4","numDarkCells","numTotalCells","fivePercentVariances","floor","abs","N4","getDataMaskBit","maskPattern","intermediate","temp","default","isHorizontal","iLimit","jLimit","numSameBitCells","prevBit","j","bit","N1"],"sources":["../../../../src/core/qrcode/encoder/MaskUtil.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}