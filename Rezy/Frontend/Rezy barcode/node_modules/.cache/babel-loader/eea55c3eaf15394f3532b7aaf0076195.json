{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Ponyfill for Java's Integer class.\n */\nvar Integer = /** @class */function () {\n  function Integer() {}\n  Integer.numberOfTrailingZeros = function (i) {\n    var y;\n    if (i === 0) return 32;\n    var n = 31;\n    y = i << 16;\n    if (y !== 0) {\n      n -= 16;\n      i = y;\n    }\n    y = i << 8;\n    if (y !== 0) {\n      n -= 8;\n      i = y;\n    }\n    y = i << 4;\n    if (y !== 0) {\n      n -= 4;\n      i = y;\n    }\n    y = i << 2;\n    if (y !== 0) {\n      n -= 2;\n      i = y;\n    }\n    return n - (i << 1 >>> 31);\n  };\n  Integer.numberOfLeadingZeros = function (i) {\n    // HD, Figure 5-6\n    if (i === 0) {\n      return 32;\n    }\n    var n = 1;\n    if (i >>> 16 === 0) {\n      n += 16;\n      i <<= 16;\n    }\n    if (i >>> 24 === 0) {\n      n += 8;\n      i <<= 8;\n    }\n    if (i >>> 28 === 0) {\n      n += 4;\n      i <<= 4;\n    }\n    if (i >>> 30 === 0) {\n      n += 2;\n      i <<= 2;\n    }\n    n -= i >>> 31;\n    return n;\n  };\n  Integer.toHexString = function (i) {\n    return i.toString(16);\n  };\n  Integer.toBinaryString = function (intNumber) {\n    return String(parseInt(String(intNumber), 2));\n  };\n  // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n  // Returns:\n  // the number of one-bits in the two's complement binary representation of the specified int value.\n  Integer.bitCount = function (i) {\n    // HD, Figure 5-2\n    i = i - (i >>> 1 & 0x55555555);\n    i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n    i = i + (i >>> 4) & 0x0f0f0f0f;\n    i = i + (i >>> 8);\n    i = i + (i >>> 16);\n    return i & 0x3f;\n  };\n  Integer.truncDivision = function (dividend, divisor) {\n    return Math.trunc(dividend / divisor);\n  };\n  /**\n   * Converts A string to an integer.\n   * @param s A string to convert into a number.\n   * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n   */\n  Integer.parseInt = function (num, radix) {\n    if (radix === void 0) {\n      radix = undefined;\n    }\n    return parseInt(num, radix);\n  };\n  Integer.MIN_VALUE_32_BITS = -2147483648;\n  Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n  return Integer;\n}();\nexports.default = Integer;","map":{"version":3,"sources":["../../../src/core/util/Integer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Ponyfill for Java's Integer class.\n */\nvar Integer = /** @class */ (function () {\n    function Integer() {\n    }\n    Integer.numberOfTrailingZeros = function (i) {\n        var y;\n        if (i === 0)\n            return 32;\n        var n = 31;\n        y = i << 16;\n        if (y !== 0) {\n            n -= 16;\n            i = y;\n        }\n        y = i << 8;\n        if (y !== 0) {\n            n -= 8;\n            i = y;\n        }\n        y = i << 4;\n        if (y !== 0) {\n            n -= 4;\n            i = y;\n        }\n        y = i << 2;\n        if (y !== 0) {\n            n -= 2;\n            i = y;\n        }\n        return n - ((i << 1) >>> 31);\n    };\n    Integer.numberOfLeadingZeros = function (i) {\n        // HD, Figure 5-6\n        if (i === 0) {\n            return 32;\n        }\n        var n = 1;\n        if (i >>> 16 === 0) {\n            n += 16;\n            i <<= 16;\n        }\n        if (i >>> 24 === 0) {\n            n += 8;\n            i <<= 8;\n        }\n        if (i >>> 28 === 0) {\n            n += 4;\n            i <<= 4;\n        }\n        if (i >>> 30 === 0) {\n            n += 2;\n            i <<= 2;\n        }\n        n -= i >>> 31;\n        return n;\n    };\n    Integer.toHexString = function (i) {\n        return i.toString(16);\n    };\n    Integer.toBinaryString = function (intNumber) {\n        return String(parseInt(String(intNumber), 2));\n    };\n    // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n    // Returns:\n    // the number of one-bits in the two's complement binary representation of the specified int value.\n    Integer.bitCount = function (i) {\n        // HD, Figure 5-2\n        i = i - ((i >>> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n        i = (i + (i >>> 4)) & 0x0f0f0f0f;\n        i = i + (i >>> 8);\n        i = i + (i >>> 16);\n        return i & 0x3f;\n    };\n    Integer.truncDivision = function (dividend, divisor) {\n        return Math.trunc(dividend / divisor);\n    };\n    /**\n     * Converts A string to an integer.\n     * @param s A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n     */\n    Integer.parseInt = function (num, radix) {\n        if (radix === void 0) { radix = undefined; }\n        return parseInt(num, radix);\n    };\n    Integer.MIN_VALUE_32_BITS = -2147483648;\n    Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n    return Integer;\n}());\nexports.default = Integer;\n//# sourceMappingURL=Integer.js.map"]},"metadata":{},"sourceType":"script"}