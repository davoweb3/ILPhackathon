{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar Result_1 = require(\"../Result\");\nvar ResultMetadataType_1 = require(\"../ResultMetadataType\");\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\nvar Decoder_1 = require(\"./decoder/Decoder\");\nvar QRCodeDecoderMetaData_1 = require(\"./decoder/QRCodeDecoderMetaData\");\nvar Detector_1 = require(\"./detector/Detector\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * This implementation can detect and decode QR Codes in an image.\n *\n * @author Sean Owen\n */\nvar QRCodeReader = /** @class */function () {\n  function QRCodeReader() {\n    this.decoder = new Decoder_1.default();\n  }\n  QRCodeReader.prototype.getDecoder = function () {\n    return this.decoder;\n  };\n  /**\n   * Locates and decodes a QR code in an image.\n   *\n   * @return a representing: string the content encoded by the QR code\n   * @throws NotFoundException if a QR code cannot be found\n   * @throws FormatException if a QR code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n  /*@Override*/\n  // public decode(image: BinaryBitmap): Result /*throws NotFoundException, ChecksumException, FormatException */ {\n  //   return this.decode(image, null)\n  // }\n  /*@Override*/\n  QRCodeReader.prototype.decode = function (image, hints) {\n    var decoderResult;\n    var points;\n    if (hints !== undefined && hints !== null && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE)) {\n      var bits = QRCodeReader.extractPureBits(image.getBlackMatrix());\n      decoderResult = this.decoder.decodeBitMatrix(bits, hints);\n      points = QRCodeReader.NO_POINTS;\n    } else {\n      var detectorResult = new Detector_1.default(image.getBlackMatrix()).detect(hints);\n      decoderResult = this.decoder.decodeBitMatrix(detectorResult.getBits(), hints);\n      points = detectorResult.getPoints();\n    }\n    // If the code was mirrored: swap the bottom-left and the top-right points.\n    if (decoderResult.getOther() instanceof QRCodeDecoderMetaData_1.default) {\n      decoderResult.getOther().applyMirroredCorrection(points);\n    }\n    var result = new Result_1.default(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat_1.default.QR_CODE, undefined);\n    var byteSegments = decoderResult.getByteSegments();\n    if (byteSegments !== null) {\n      result.putMetadata(ResultMetadataType_1.default.BYTE_SEGMENTS, byteSegments);\n    }\n    var ecLevel = decoderResult.getECLevel();\n    if (ecLevel !== null) {\n      result.putMetadata(ResultMetadataType_1.default.ERROR_CORRECTION_LEVEL, ecLevel);\n    }\n    if (decoderResult.hasStructuredAppend()) {\n      result.putMetadata(ResultMetadataType_1.default.STRUCTURED_APPEND_SEQUENCE, decoderResult.getStructuredAppendSequenceNumber());\n      result.putMetadata(ResultMetadataType_1.default.STRUCTURED_APPEND_PARITY, decoderResult.getStructuredAppendParity());\n    }\n    return result;\n  };\n  /*@Override*/\n  QRCodeReader.prototype.reset = function () {\n    // do nothing\n  };\n  /**\n   * This method detects a code in a \"pure\" image -- that is, pure monochrome image\n   * which contains only an unrotated, unskewed, image of a code, with some white border\n   * around it. This is a specialized method that works exceptionally fast in this special\n   * case.\n   *\n   * @see com.google.zxing.datamatrix.DataMatrixReader#extractPureBits(BitMatrix)\n   */\n  QRCodeReader.extractPureBits = function (image) {\n    var leftTopBlack = image.getTopLeftOnBit();\n    var rightBottomBlack = image.getBottomRightOnBit();\n    if (leftTopBlack === null || rightBottomBlack === null) {\n      throw new NotFoundException_1.default();\n    }\n    var moduleSize = this.moduleSize(leftTopBlack, image);\n    var top = leftTopBlack[1];\n    var bottom = rightBottomBlack[1];\n    var left = leftTopBlack[0];\n    var right = rightBottomBlack[0];\n    // Sanity check!\n    if (left >= right || top >= bottom) {\n      throw new NotFoundException_1.default();\n    }\n    if (bottom - top !== right - left) {\n      // Special case, where bottom-right module wasn't black so we found something else in the last row\n      // Assume it's a square, so use height as the width\n      right = left + (bottom - top);\n      if (right >= image.getWidth()) {\n        // Abort if that would not make sense -- off image\n        throw new NotFoundException_1.default();\n      }\n    }\n    var matrixWidth = Math.round((right - left + 1) / moduleSize);\n    var matrixHeight = Math.round((bottom - top + 1) / moduleSize);\n    if (matrixWidth <= 0 || matrixHeight <= 0) {\n      throw new NotFoundException_1.default();\n    }\n    if (matrixHeight !== matrixWidth) {\n      // Only possibly decode square regions\n      throw new NotFoundException_1.default();\n    }\n    // Push in the \"border\" by half the module width so that we start\n    // sampling in the middle of the module. Just in case the image is a\n    // little off, this will help recover.\n    var nudge = /*(int) */Math.floor(moduleSize / 2.0);\n    top += nudge;\n    left += nudge;\n    // But careful that this does not sample off the edge\n    // \"right\" is the farthest-right valid pixel location -- right+1 is not necessarily\n    // This is positive by how much the inner x loop below would be too large\n    var nudgedTooFarRight = left + /*(int) */Math.floor((matrixWidth - 1) * moduleSize) - right;\n    if (nudgedTooFarRight > 0) {\n      if (nudgedTooFarRight > nudge) {\n        // Neither way fits; abort\n        throw new NotFoundException_1.default();\n      }\n      left -= nudgedTooFarRight;\n    }\n    // See logic above\n    var nudgedTooFarDown = top + /*(int) */Math.floor((matrixHeight - 1) * moduleSize) - bottom;\n    if (nudgedTooFarDown > 0) {\n      if (nudgedTooFarDown > nudge) {\n        // Neither way fits; abort\n        throw new NotFoundException_1.default();\n      }\n      top -= nudgedTooFarDown;\n    }\n    // Now just read off the bits\n    var bits = new BitMatrix_1.default(matrixWidth, matrixHeight);\n    for (var y = 0; y < matrixHeight; y++) {\n      var iOffset = top + /*(int) */Math.floor(y * moduleSize);\n      for (var x = 0; x < matrixWidth; x++) {\n        if (image.get(left + /*(int) */Math.floor(x * moduleSize), iOffset)) {\n          bits.set(x, y);\n        }\n      }\n    }\n    return bits;\n  };\n  QRCodeReader.moduleSize = function (leftTopBlack, image) {\n    var height = image.getHeight();\n    var width = image.getWidth();\n    var x = leftTopBlack[0];\n    var y = leftTopBlack[1];\n    var inBlack = true;\n    var transitions = 0;\n    while (x < width && y < height) {\n      if (inBlack !== image.get(x, y)) {\n        if (++transitions === 5) {\n          break;\n        }\n        inBlack = !inBlack;\n      }\n      x++;\n      y++;\n    }\n    if (x === width || y === height) {\n      throw new NotFoundException_1.default();\n    }\n    return (x - leftTopBlack[0]) / 7.0;\n  };\n  QRCodeReader.NO_POINTS = new Array();\n  return QRCodeReader;\n}();\nexports.default = QRCodeReader;","map":{"version":3,"names":["BarcodeFormat_1","require","DecodeHintType_1","Result_1","ResultMetadataType_1","BitMatrix_1","Decoder_1","QRCodeDecoderMetaData_1","Detector_1","NotFoundException_1","QRCodeReader","decoder","default","prototype","getDecoder","decode","image","hints","decoderResult","points","undefined","get","PURE_BARCODE","bits","extractPureBits","getBlackMatrix","decodeBitMatrix","NO_POINTS","detectorResult","detect","getBits","getPoints","getOther","applyMirroredCorrection","result","getText","getRawBytes","QR_CODE","byteSegments","getByteSegments","putMetadata","BYTE_SEGMENTS","ecLevel","getECLevel","ERROR_CORRECTION_LEVEL","hasStructuredAppend","STRUCTURED_APPEND_SEQUENCE","getStructuredAppendSequenceNumber","STRUCTURED_APPEND_PARITY","getStructuredAppendParity","reset","leftTopBlack","getTopLeftOnBit","rightBottomBlack","getBottomRightOnBit","moduleSize","top","bottom","left","right","getWidth","matrixWidth","Math","round","matrixHeight","nudge","floor","nudgedTooFarRight","nudgedTooFarDown","y","iOffset","x","set","height","getHeight","width","inBlack","transitions","Array"],"sources":["../../../src/core/qrcode/QRCodeReader.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA,IAAAA,eAAA,GAAAC,OAAA;AAEA,IAAAC,gBAAA,GAAAD,OAAA;AAEA,IAAAE,QAAA,GAAAF,OAAA;AACA,IAAAG,oBAAA,GAAAH,OAAA;AAEA,IAAAI,WAAA,GAAAJ,OAAA;AAGA,IAAAK,SAAA,GAAAL,OAAA;AACA,IAAAM,uBAAA,GAAAN,OAAA;AACA,IAAAO,UAAA,GAAAP,OAAA;AAEA,IAAAQ,mBAAA,GAAAR,OAAA;AAEA;AACA;AAEA;;;;;AAKA,IAAAS,YAAA;EAAA,SAAAA,aAAA;IAIY,KAAAC,OAAO,GAAG,IAAIL,SAAA,CAAAM,OAAO,EAAE;EA6KnC;EA3KcF,YAAA,CAAAG,SAAA,CAAAC,UAAU,GAApB;IACI,OAAO,IAAI,CAACH,OAAO;EACvB,CAAC;EAED;;;;;;;;EAQA;EACA;EACA;EACA;EAEA;EACOD,YAAA,CAAAG,SAAA,CAAAE,MAAM,GAAb,UAAcC,KAAmB,EAAEC,KAAgC;IAC/D,IAAIC,aAA4B;IAChC,IAAIC,MAA0B;IAC9B,IAAIF,KAAK,KAAKG,SAAS,IAAIH,KAAK,KAAK,IAAI,IAAIG,SAAS,KAAKH,KAAK,CAACI,GAAG,CAACnB,gBAAA,CAAAU,OAAc,CAACU,YAAY,CAAC,EAAE;MAC/F,IAAMC,IAAI,GAAGb,YAAY,CAACc,eAAe,CAACR,KAAK,CAACS,cAAc,EAAE,CAAC;MACjEP,aAAa,GAAG,IAAI,CAACP,OAAO,CAACe,eAAe,CAACH,IAAI,EAAEN,KAAK,CAAC;MACzDE,MAAM,GAAGT,YAAY,CAACiB,SAAS;KAClC,MAAM;MACH,IAAMC,cAAc,GAAG,IAAIpB,UAAA,CAAAI,OAAQ,CAACI,KAAK,CAACS,cAAc,EAAE,CAAC,CAACI,MAAM,CAACZ,KAAK,CAAC;MACzEC,aAAa,GAAG,IAAI,CAACP,OAAO,CAACe,eAAe,CAACE,cAAc,CAACE,OAAO,EAAE,EAAEb,KAAK,CAAC;MAC7EE,MAAM,GAAGS,cAAc,CAACG,SAAS,EAAE;;IAGvC;IACA,IAAIb,aAAa,CAACc,QAAQ,EAAE,YAAYzB,uBAAA,CAAAK,OAAqB,EAAE;MACnCM,aAAa,CAACc,QAAQ,EAAG,CAACC,uBAAuB,CAACd,MAAM,CAAC;;IAGrF,IAAMe,MAAM,GAAG,IAAI/B,QAAA,CAAAS,OAAM,CAACM,aAAa,CAACiB,OAAO,EAAE,EAAEjB,aAAa,CAACkB,WAAW,EAAE,EAAEhB,SAAS,EAAED,MAAM,EAAEnB,eAAA,CAAAY,OAAa,CAACyB,OAAO,EAAEjB,SAAS,CAAC;IACpI,IAAMkB,YAAY,GAAsBpB,aAAa,CAACqB,eAAe,EAAE;IACvE,IAAID,YAAY,KAAK,IAAI,EAAE;MACvBJ,MAAM,CAACM,WAAW,CAACpC,oBAAA,CAAAQ,OAAkB,CAAC6B,aAAa,EAAEH,YAAY,CAAC;;IAEtE,IAAMI,OAAO,GAAWxB,aAAa,CAACyB,UAAU,EAAE;IAClD,IAAID,OAAO,KAAK,IAAI,EAAE;MAClBR,MAAM,CAACM,WAAW,CAACpC,oBAAA,CAAAQ,OAAkB,CAACgC,sBAAsB,EAAEF,OAAO,CAAC;;IAE1E,IAAIxB,aAAa,CAAC2B,mBAAmB,EAAE,EAAE;MACrCX,MAAM,CAACM,WAAW,CAACpC,oBAAA,CAAAQ,OAAkB,CAACkC,0BAA0B,EAC5D5B,aAAa,CAAC6B,iCAAiC,EAAE,CAAC;MACtDb,MAAM,CAACM,WAAW,CAACpC,oBAAA,CAAAQ,OAAkB,CAACoC,wBAAwB,EAC1D9B,aAAa,CAAC+B,yBAAyB,EAAE,CAAC;;IAElD,OAAOf,MAAM;EACjB,CAAC;EAED;EACOxB,YAAA,CAAAG,SAAA,CAAAqC,KAAK,GAAZ;IACI;EAAA,CACH;EAED;;;;;;;;EAQexC,YAAA,CAAAc,eAAe,GAA9B,UAA+BR,KAAgB;IAE3C,IAAMmC,YAAY,GAAenC,KAAK,CAACoC,eAAe,EAAE;IACxD,IAAMC,gBAAgB,GAAerC,KAAK,CAACsC,mBAAmB,EAAE;IAChE,IAAIH,YAAY,KAAK,IAAI,IAAIE,gBAAgB,KAAK,IAAI,EAAE;MACpD,MAAM,IAAI5C,mBAAA,CAAAG,OAAiB,EAAE;;IAGjC,IAAM2C,UAAU,GAAqB,IAAI,CAACA,UAAU,CAACJ,YAAY,EAAEnC,KAAK,CAAC;IAEzE,IAAIwC,GAAG,GAAGL,YAAY,CAAC,CAAC,CAAC;IACzB,IAAIM,MAAM,GAAGJ,gBAAgB,CAAC,CAAC,CAAC;IAChC,IAAIK,IAAI,GAAGP,YAAY,CAAC,CAAC,CAAC;IAC1B,IAAIQ,KAAK,GAAGN,gBAAgB,CAAC,CAAC,CAAC;IAE/B;IACA,IAAIK,IAAI,IAAIC,KAAK,IAAIH,GAAG,IAAIC,MAAM,EAAE;MAChC,MAAM,IAAIhD,mBAAA,CAAAG,OAAiB,EAAE;;IAGjC,IAAI6C,MAAM,GAAGD,GAAG,KAAKG,KAAK,GAAGD,IAAI,EAAE;MAC/B;MACA;MACAC,KAAK,GAAGD,IAAI,IAAID,MAAM,GAAGD,GAAG,CAAC;MAC7B,IAAIG,KAAK,IAAI3C,KAAK,CAAC4C,QAAQ,EAAE,EAAE;QAC3B;QACA,MAAM,IAAInD,mBAAA,CAAAG,OAAiB,EAAE;;;IAIrC,IAAMiD,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,KAAK,GAAGD,IAAI,GAAG,CAAC,IAAIH,UAAU,CAAC;IAC/D,IAAMS,YAAY,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACN,MAAM,GAAGD,GAAG,GAAG,CAAC,IAAID,UAAU,CAAC;IAChE,IAAIM,WAAW,IAAI,CAAC,IAAIG,YAAY,IAAI,CAAC,EAAE;MACvC,MAAM,IAAIvD,mBAAA,CAAAG,OAAiB,EAAE;;IAEjC,IAAIoD,YAAY,KAAKH,WAAW,EAAE;MAC9B;MACA,MAAM,IAAIpD,mBAAA,CAAAG,OAAiB,EAAE;;IAGjC;IACA;IACA;IACA,IAAMqD,KAAK,GAAG,UAAUH,IAAI,CAACI,KAAK,CAACX,UAAU,GAAG,GAAG,CAAC;IACpDC,GAAG,IAAIS,KAAK;IACZP,IAAI,IAAIO,KAAK;IAEb;IACA;IACA;IACA,IAAME,iBAAiB,GAAGT,IAAI,GAAG,UAAUI,IAAI,CAACI,KAAK,CAAC,CAACL,WAAW,GAAG,CAAC,IAAIN,UAAU,CAAC,GAAGI,KAAK;IAC7F,IAAIQ,iBAAiB,GAAG,CAAC,EAAE;MACvB,IAAIA,iBAAiB,GAAGF,KAAK,EAAE;QAC3B;QACA,MAAM,IAAIxD,mBAAA,CAAAG,OAAiB,EAAE;;MAEjC8C,IAAI,IAAIS,iBAAiB;;IAE7B;IACA,IAAMC,gBAAgB,GAAGZ,GAAG,GAAG,UAAUM,IAAI,CAACI,KAAK,CAAC,CAACF,YAAY,GAAG,CAAC,IAAIT,UAAU,CAAC,GAAGE,MAAM;IAC7F,IAAIW,gBAAgB,GAAG,CAAC,EAAE;MACtB,IAAIA,gBAAgB,GAAGH,KAAK,EAAE;QAC1B;QACA,MAAM,IAAIxD,mBAAA,CAAAG,OAAiB,EAAE;;MAEjC4C,GAAG,IAAIY,gBAAgB;;IAG3B;IACA,IAAM7C,IAAI,GAAG,IAAIlB,WAAA,CAAAO,OAAS,CAACiD,WAAW,EAAEG,YAAY,CAAC;IACrD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,EAAEK,CAAC,EAAE,EAAE;MACnC,IAAMC,OAAO,GAAGd,GAAG,GAAG,UAAUM,IAAI,CAACI,KAAK,CAACG,CAAC,GAAGd,UAAU,CAAC;MAC1D,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,WAAW,EAAEU,CAAC,EAAE,EAAE;QAClC,IAAIvD,KAAK,CAACK,GAAG,CAACqC,IAAI,GAAG,UAAUI,IAAI,CAACI,KAAK,CAACK,CAAC,GAAGhB,UAAU,CAAC,EAAEe,OAAO,CAAC,EAAE;UACjE/C,IAAI,CAACiD,GAAG,CAACD,CAAC,EAAEF,CAAC,CAAC;;;;IAI1B,OAAO9C,IAAI;EACf,CAAC;EAEcb,YAAA,CAAA6C,UAAU,GAAzB,UAA0BJ,YAAwB,EAAEnC,KAAgB;IAChE,IAAMyD,MAAM,GAAmBzD,KAAK,CAAC0D,SAAS,EAAE;IAChD,IAAMC,KAAK,GAAmB3D,KAAK,CAAC4C,QAAQ,EAAE;IAC9C,IAAIW,CAAC,GAAGpB,YAAY,CAAC,CAAC,CAAC;IACvB,IAAIkB,CAAC,GAAGlB,YAAY,CAAC,CAAC,CAAC;IACvB,IAAIyB,OAAO,GAAY,IAAI;IAC3B,IAAIC,WAAW,GAAG,CAAC;IACnB,OAAON,CAAC,GAAGI,KAAK,IAAIN,CAAC,GAAGI,MAAM,EAAE;MAC5B,IAAIG,OAAO,KAAK5D,KAAK,CAACK,GAAG,CAACkD,CAAC,EAAEF,CAAC,CAAC,EAAE;QAC7B,IAAI,EAAEQ,WAAW,KAAK,CAAC,EAAE;UACrB;;QAEJD,OAAO,GAAG,CAACA,OAAO;;MAEtBL,CAAC,EAAE;MACHF,CAAC,EAAE;;IAEP,IAAIE,CAAC,KAAKI,KAAK,IAAIN,CAAC,KAAKI,MAAM,EAAE;MAC7B,MAAM,IAAIhE,mBAAA,CAAAG,OAAiB,EAAE;;IAEjC,OAAO,CAAC2D,CAAC,GAAGpB,YAAY,CAAC,CAAC,CAAC,IAAI,GAAG;EACtC,CAAC;EA7KczC,YAAA,CAAAiB,SAAS,GAAG,IAAImD,KAAK,EAAe;EA+KvD,OAAApE,YAAC;CAAA,EAjLD;kBAAqBA,YAAY"},"metadata":{},"sourceType":"script"}