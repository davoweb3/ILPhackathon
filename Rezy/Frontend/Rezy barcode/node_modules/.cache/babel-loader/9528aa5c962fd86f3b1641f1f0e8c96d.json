{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar FinderPattern_1 = require(\"./FinderPattern\");\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collections;*/\n/*import java.util.Comparator;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\nvar FinderPatternFinder = /** @class */function () {\n  /**\n   * <p>Creates a finder that will search the image for three finder patterns.</p>\n   *\n   * @param image image to search\n   */\n  // public constructor(image: BitMatrix) {\n  //   this(image, null)\n  // }\n  function FinderPatternFinder(image, resultPointCallback) {\n    this.image = image;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = [];\n    this.crossCheckStateCount = new Int32Array(5);\n    this.resultPointCallback = resultPointCallback;\n  }\n  FinderPatternFinder.prototype.getImage = function () {\n    return this.image;\n  };\n  FinderPatternFinder.prototype.getPossibleCenters = function () {\n    return this.possibleCenters;\n  };\n  FinderPatternFinder.prototype.find = function (hints) {\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    var pureBarcode = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n    var image = this.image;\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // We are looking for black/white/black/white/black modules in\n    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n    // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n    // image, and then account for the center being 3 modules in size. This gives the smallest\n    // number of pixels the center could be, so skip this often. When trying harder, look for all\n    // QR versions regardless of how dense they are.\n    var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder.MAX_MODULES));\n    if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n      iSkip = FinderPatternFinder.MIN_SKIP;\n    }\n    var done = false;\n    var stateCount = new Int32Array(5);\n    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n      // Get a row of black/white values\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      stateCount[3] = 0;\n      stateCount[4] = 0;\n      var currentState = 0;\n      for (var j = 0; j < maxJ; j++) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if ((currentState & 1) === 1) {\n            // Counting white pixels\n            currentState++;\n          }\n          stateCount[currentState]++;\n        } else {\n          // White pixel\n          if ((currentState & 1) === 0) {\n            // Counting black pixels\n            if (currentState === 4) {\n              // A winner?\n              if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                if (confirmed === true) {\n                  // Start examining every other line. Checking each line turned out to be too\n                  // expensive and didn't improve performance.\n                  iSkip = 2;\n                  if (this.hasSkipped === true) {\n                    done = this.haveMultiplyConfirmedCenters();\n                  } else {\n                    var rowSkip = this.findRowSkip();\n                    if (rowSkip > stateCount[2]) {\n                      // Skip rows between row of lower confirmed center\n                      // and top of presumed third confirmed center\n                      // but back up a bit to get a full chance of detecting\n                      // it, entire width of center of finder pattern\n                      // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                      // of pattern we saw) to be conservative, and also back off by iSkip which\n                      // is about to be re-added\n                      i += rowSkip - stateCount[2] - iSkip;\n                      j = maxJ - 1;\n                    }\n                  }\n                } else {\n                  stateCount[0] = stateCount[2];\n                  stateCount[1] = stateCount[3];\n                  stateCount[2] = stateCount[4];\n                  stateCount[3] = 1;\n                  stateCount[4] = 0;\n                  currentState = 3;\n                  continue;\n                }\n                // Clear state to start looking again\n                currentState = 0;\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n              } else {\n                // No, shift counts back by two\n                stateCount[0] = stateCount[2];\n                stateCount[1] = stateCount[3];\n                stateCount[2] = stateCount[4];\n                stateCount[3] = 1;\n                stateCount[4] = 0;\n                currentState = 3;\n              }\n            } else {\n              stateCount[++currentState]++;\n            }\n          } else {\n            // Counting white pixels\n            stateCount[currentState]++;\n          }\n        }\n      }\n      if (FinderPatternFinder.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n        if (confirmed === true) {\n          iSkip = stateCount[0];\n          if (this.hasSkipped) {\n            // Found a third one\n            done = this.haveMultiplyConfirmedCenters();\n          }\n        }\n      }\n    }\n    var patternInfo = this.selectBestPatterns();\n    ResultPoint_1.default.orderBestPatterns(patternInfo);\n    return new FinderPatternInfo_1.default(patternInfo);\n  };\n  /**\n   * Given a count of black/white/black/white/black pixels just seen and an end position,\n   * figures the location of the center of this run.\n   */\n  FinderPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n    return end - stateCount[4] - stateCount[3] - stateCount[2] / 2.0;\n  };\n  /**\n   * @param stateCount count of black/white/black/white/black pixels just read\n   * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n   *         used by finder patterns to be considered a match\n   */\n  FinderPatternFinder.foundPatternCross = function (stateCount) {\n    var totalModuleSize = 0;\n    for (var i = 0; i < 5; i++) {\n      var count = stateCount[i];\n      if (count === 0) {\n        return false;\n      }\n      totalModuleSize += count;\n    }\n    if (totalModuleSize < 7) {\n      return false;\n    }\n    var moduleSize = totalModuleSize / 7.0;\n    var maxVariance = moduleSize / 2.0;\n    // Allow less than 50% variance from 1-1-3-1-1 proportions\n    return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;\n  };\n  FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n    var crossCheckStateCount = this.crossCheckStateCount;\n    crossCheckStateCount[0] = 0;\n    crossCheckStateCount[1] = 0;\n    crossCheckStateCount[2] = 0;\n    crossCheckStateCount[3] = 0;\n    crossCheckStateCount[4] = 0;\n    return crossCheckStateCount;\n  };\n  /**\n   * After a vertical and horizontal scan finds a potential finder pattern, this method\n   * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n   * finder pattern to see if the same proportion is detected.\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   *  observed in any reading state, based on the results of the horizontal scan\n   * @param originalStateCountTotal The original state count total.\n   * @return true if proportions are withing expected limits\n   */\n  FinderPatternFinder.prototype.crossCheckDiagonal = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up, left from center finding black center mass\n    var i = 0;\n    var image = this.image;\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (startI < i || centerJ < i) {\n      return false;\n    }\n    // Continue up, left finding white space\n    while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n      return false;\n    }\n    // Continue up, left finding black border\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i++;\n    }\n    if (stateCount[0] > maxCount) {\n      return false;\n    }\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth();\n    // Now also count down, right from center\n    i = 1;\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n      stateCount[2]++;\n      i++;\n    }\n    // Ran off the edge?\n    if (startI + i >= maxI || centerJ + i >= maxJ) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n      return false;\n    }\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return false;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 100% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder.foundPatternCross(stateCount);\n  };\n  /**\n   * <p>After a horizontal scan finds a potential finder pattern, this method\n   * \"cross-checks\" by scanning down vertically through the center of the possible\n   * finder pattern to see if the same proportion is detected.</p>\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   * observed in any reading state, based on the results of the horizontal scan\n   * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n   */\n  FinderPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.getCrossCheckStateCount();\n    // Start counting up from center\n    var i = startI;\n    while (i >= 0 && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i--;\n    }\n    if (i < 0) {\n      return NaN;\n    }\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    }\n    // If already too many modules in this state or ran off the edge:\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    // Now also count down from center\n    i = startI + 1;\n    while (i < maxI && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i++;\n    }\n    if (i === maxI) {\n      return NaN;\n    }\n    while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n    if (i === maxI || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is more than 40% different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\n   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n   * except it reads horizontally instead of vertically. This is used to cross-cross\n   * check a vertical cross check and locate the real center of the alignment pattern.</p>\n   */\n  FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n    var image = this.image;\n    var maxJ = image.getWidth();\n    var stateCount = this.getCrossCheckStateCount();\n    var j = startJ;\n    while (j >= 0 && image.get(j, centerI)) {\n      stateCount[2]++;\n      j--;\n    }\n    if (j < 0) {\n      return NaN;\n    }\n    while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      j--;\n    }\n    if (j < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n    while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      j--;\n    }\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n    j = startJ + 1;\n    while (j < maxJ && image.get(j, centerI)) {\n      stateCount[2]++;\n      j++;\n    }\n    if (j === maxJ) {\n      return NaN;\n    }\n    while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      j++;\n    }\n    if (j === maxJ || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n    while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      j++;\n    }\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    }\n    // If we found a finder-pattern-like section, but its size is significantly different than\n    // the original, assume it's a false positive\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n      return NaN;\n    }\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n  };\n  /**\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n   * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n   * with another horizontal scan. This is needed primarily to locate the real horizontal\n   * center of the pattern in cases of extreme skew.\n   * And then we cross-cross-cross check with another diagonal scan.</p>\n   *\n   * <p>If that succeeds the finder pattern location is added to a list that tracks\n   * the number of times each location has been nearly-matched as a finder pattern.\n   * Each additional find is more evidence that the location is in fact a finder\n   * pattern center\n   *\n   * @param stateCount reading state module counts from horizontal scan\n   * @param i row where finder pattern may be found\n   * @param j end of possible finder pattern in row\n   * @param pureBarcode true if in \"pure barcode\" mode\n   * @return true if a finder pattern candidate was found this time\n   */\n  FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/, pureBarcode) {\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i, /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal);\n    if (!isNaN(centerI)) {\n      // Re-cross check\n      centerJ = this.crossCheckHorizontal( /*(int) */Math.floor(centerJ), /*(int) */Math.floor(centerI), stateCount[2], stateCountTotal);\n      if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal( /*(int) */Math.floor(centerI), /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n        var estimatedModuleSize = stateCountTotal / 7.0;\n        var found = false;\n        var possibleCenters = this.possibleCenters;\n        for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n          var center = possibleCenters[index];\n          // Look for about the same center and module size:\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n          possibleCenters.push(point);\n          if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n            this.resultPointCallback.foundPossibleResultPoint(point);\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @return number of rows we could safely skip during scanning, based on the first\n   *         two finder patterns that have been located. In some cases their position will\n   *         allow us to infer that the third pattern must lie below a certain point farther\n   *         down in the image.\n   */\n  FinderPatternFinder.prototype.findRowSkip = function () {\n    var e_1, _a;\n    var max = this.possibleCenters.length;\n    if (max <= 1) {\n      return 0;\n    }\n    var firstConfirmedCenter = null;\n    try {\n      for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var center = _c.value;\n        if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          if (firstConfirmedCenter == null) {\n            firstConfirmedCenter = center;\n          } else {\n            // We have two confirmed centers\n            // How far down can we skip before resuming looking for the next\n            // pattern? In the worst case, only the difference between the\n            // difference in the x / y coordinates of the two centers.\n            // This is the case where you find top left last.\n            this.hasSkipped = true;\n            return (/*(int) */Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)\n            );\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return 0;\n  };\n  /**\n   * @return true iff we have found at least 3 finder patterns that have been detected\n   *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n   *         candidates is \"pretty similar\"\n   */\n  FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n    var e_2, _a, e_3, _b;\n    var confirmedCount = 0;\n    var totalModuleSize = 0.0;\n    var max = this.possibleCenters.length;\n    try {\n      for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pattern = _d.value;\n        if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          confirmedCount++;\n          totalModuleSize += pattern.getEstimatedModuleSize();\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    if (confirmedCount < 3) {\n      return false;\n    }\n    // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n    // and that we need to keep looking. We detect this by asking if the estimated module sizes\n    // vary too much. We arbitrarily say that when the total deviation from average exceeds\n    // 5% of the total module size estimates, it's too much.\n    var average = totalModuleSize / max;\n    var totalDeviation = 0.0;\n    try {\n      for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var pattern = _f.value;\n        totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return totalDeviation <= 0.05 * totalModuleSize;\n  };\n  /**\n   * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n   *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n   *         size differs from the average among those patterns the least\n   * @throws NotFoundException if 3 such finder patterns do not exist\n   */\n  FinderPatternFinder.prototype.selectBestPatterns = function () {\n    var e_4, _a, e_5, _b;\n    var startSize = this.possibleCenters.length;\n    if (startSize < 3) {\n      // Couldn't find enough finder patterns\n      throw new NotFoundException_1.default();\n    }\n    var possibleCenters = this.possibleCenters;\n    var average;\n    // Filter outlier possibilities whose module size is too different\n    if (startSize > 3) {\n      // But we can only afford to do so if we have at least 4 possibilities to choose from\n      var totalModuleSize = 0.0;\n      var square = 0.0;\n      try {\n        for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var center = _d.value;\n          var size = center.getEstimatedModuleSize();\n          totalModuleSize += size;\n          square += size * size;\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n      average = totalModuleSize / startSize;\n      var stdDev = Math.sqrt(square / startSize - average * average);\n      possibleCenters.sort(\n      /**\n       * <p>Orders by furthest from average</p>\n       */\n      // FurthestFromAverageComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n        var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n        return dA < dB ? -1 : dA > dB ? 1 : 0;\n      });\n      var limit = Math.max(0.2 * average, stdDev);\n      for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n        var pattern = possibleCenters[i];\n        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n          possibleCenters.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    if (possibleCenters.length > 3) {\n      // Throw away all but those first size candidate points we found.\n      var totalModuleSize = 0.0;\n      try {\n        for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n          var possibleCenter = possibleCenters_1_1.value;\n          totalModuleSize += possibleCenter.getEstimatedModuleSize();\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      average = totalModuleSize / possibleCenters.length;\n      possibleCenters.sort(\n      /**\n       * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n       */\n      // CenterComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        if (center2.getCount() === center1.getCount()) {\n          var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n          var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n          return dA < dB ? 1 : dA > dB ? -1 : 0;\n        } else {\n          return center2.getCount() - center1.getCount();\n        }\n      });\n      possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n    }\n\n    return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\n  };\n  FinderPatternFinder.CENTER_QUORUM = 2;\n  FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n  FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n  return FinderPatternFinder;\n}();\nexports.default = FinderPatternFinder;","map":{"version":3,"names":["DecodeHintType_1","require","ResultPoint_1","FinderPattern_1","FinderPatternInfo_1","NotFoundException_1","FinderPatternFinder","image","resultPointCallback","possibleCenters","crossCheckStateCount","Int32Array","prototype","getImage","getPossibleCenters","find","hints","tryHarder","undefined","get","default","TRY_HARDER","pureBarcode","PURE_BARCODE","maxI","getHeight","maxJ","getWidth","iSkip","Math","floor","MAX_MODULES","MIN_SKIP","done","stateCount","i","currentState","j","foundPatternCross","confirmed","handlePossibleCenter","hasSkipped","haveMultiplyConfirmedCenters","rowSkip","findRowSkip","patternInfo","selectBestPatterns","orderBestPatterns","centerFromEnd","end","totalModuleSize","count","moduleSize","maxVariance","abs","getCrossCheckStateCount","crossCheckDiagonal","startI","centerJ","maxCount","originalStateCountTotal","stateCountTotal","crossCheckVertical","NaN","crossCheckHorizontal","startJ","centerI","isNaN","estimatedModuleSize","found","index","length_1","length","center","aboutEquals","combineEstimate","point","push","foundPossibleResultPoint","max","firstConfirmedCenter","_b","__values","_c","next","value","getCount","CENTER_QUORUM","getX","getY","confirmedCount","_d","pattern","getEstimatedModuleSize","average","totalDeviation","_e","_f","startSize","square","size","stdDev","sqrt","sort","center1","center2","dA","dB","limit","splice","possibleCenters_1","possibleCenters_1_1","possibleCenter"],"sources":["../../../../src/core/qrcode/detector/FinderPatternFinder.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}