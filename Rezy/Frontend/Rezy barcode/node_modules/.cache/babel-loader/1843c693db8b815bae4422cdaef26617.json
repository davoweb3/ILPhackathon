{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\nvar System_1 = require(\"./util/System\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\n * with the option to crop to a rectangle within the full data. This can be used to exclude\n * superfluous pixels around the perimeter and speed up decoding.\n *\n * It works for any pixel format where the Y channel is planar and appears first, including\n * YCbCr_420_SP and YCbCr_422_SP.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar PlanarYUVLuminanceSource = /** @class */function (_super) {\n  __extends(PlanarYUVLuminanceSource, _super);\n  function PlanarYUVLuminanceSource(yuvData, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/, width /*int*/, height /*int*/, reverseHorizontal) {\n    var _this = _super.call(this, width, height) || this;\n    _this.yuvData = yuvData;\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n    if (left + width > dataWidth || top + height > dataHeight) {\n      throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n    }\n    if (reverseHorizontal) {\n      _this.reverseHorizontal(width, height);\n    }\n    return _this;\n  }\n  /*@Override*/\n  PlanarYUVLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n    var width = this.getWidth();\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System_1.default.arraycopy(this.yuvData, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n  PlanarYUVLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.yuvData;\n    }\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left;\n    // If the width matches the full width of the underlying data, perform a single copy.\n    if (width === this.dataWidth) {\n      System_1.default.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\n      return matrix;\n    }\n    // Otherwise copy one cropped row at a time.\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System_1.default.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n    return matrix;\n  };\n  /*@Override*/\n  PlanarYUVLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n  PlanarYUVLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    return new PlanarYUVLuminanceSource(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);\n  };\n  PlanarYUVLuminanceSource.prototype.renderThumbnail = function () {\n    var width = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    var height = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    var pixels = new Int32Array(width * height);\n    var yuv = this.yuvData;\n    var inputOffset = this.top * this.dataWidth + this.left;\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      for (var x = 0; x < width; x++) {\n        var grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\n        pixels[outputOffset + x] = 0xFF000000 | grey * 0x00010101;\n      }\n      inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    }\n    return pixels;\n  };\n  /**\n   * @return width of image from {@link #renderThumbnail()}\n   */\n  PlanarYUVLuminanceSource.prototype.getThumbnailWidth = function () {\n    return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n  };\n  /**\n   * @return height of image from {@link #renderThumbnail()}\n   */\n  PlanarYUVLuminanceSource.prototype.getThumbnailHeight = function () {\n    return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n  };\n  PlanarYUVLuminanceSource.prototype.reverseHorizontal = function (width /*int*/, height /*int*/) {\n    var yuvData = this.yuvData;\n    for (var y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {\n      var middle = rowStart + width / 2;\n      for (var x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {\n        var temp = yuvData[x1];\n        yuvData[x1] = yuvData[x2];\n        yuvData[x2] = temp;\n      }\n    }\n  };\n  PlanarYUVLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n  PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR = 2;\n  return PlanarYUVLuminanceSource;\n}(LuminanceSource_1.default);\nexports.default = PlanarYUVLuminanceSource;","map":{"version":3,"sources":["../../src/core/PlanarYUVLuminanceSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing {*/\nvar System_1 = require(\"./util/System\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\n * with the option to crop to a rectangle within the full data. This can be used to exclude\n * superfluous pixels around the perimeter and speed up decoding.\n *\n * It works for any pixel format where the Y channel is planar and appears first, including\n * YCbCr_420_SP and YCbCr_422_SP.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar PlanarYUVLuminanceSource = /** @class */ (function (_super) {\n    __extends(PlanarYUVLuminanceSource, _super);\n    function PlanarYUVLuminanceSource(yuvData, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/, width /*int*/, height /*int*/, reverseHorizontal) {\n        var _this = _super.call(this, width, height) || this;\n        _this.yuvData = yuvData;\n        _this.dataWidth = dataWidth;\n        _this.dataHeight = dataHeight;\n        _this.left = left;\n        _this.top = top;\n        if (left + width > dataWidth || top + height > dataHeight) {\n            throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n        }\n        if (reverseHorizontal) {\n            _this.reverseHorizontal(width, height);\n        }\n        return _this;\n    }\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        if (row === null || row === undefined || row.length < width) {\n            row = new Uint8ClampedArray(width);\n        }\n        var offset = (y + this.top) * this.dataWidth + this.left;\n        System_1.default.arraycopy(this.yuvData, offset, row, 0, width);\n        return row;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.getMatrix = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        // If the caller asks for the entire underlying image, save the copy and give them the\n        // original data. The docs specifically warn that result.length must be ignored.\n        if (width === this.dataWidth && height === this.dataHeight) {\n            return this.yuvData;\n        }\n        var area = width * height;\n        var matrix = new Uint8ClampedArray(area);\n        var inputOffset = this.top * this.dataWidth + this.left;\n        // If the width matches the full width of the underlying data, perform a single copy.\n        if (width === this.dataWidth) {\n            System_1.default.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\n            return matrix;\n        }\n        // Otherwise copy one cropped row at a time.\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            System_1.default.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\n            inputOffset += this.dataWidth;\n        }\n        return matrix;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new PlanarYUVLuminanceSource(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);\n    };\n    PlanarYUVLuminanceSource.prototype.renderThumbnail = function () {\n        var width = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        var height = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        var pixels = new Int32Array(width * height);\n        var yuv = this.yuvData;\n        var inputOffset = this.top * this.dataWidth + this.left;\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            for (var x = 0; x < width; x++) {\n                var grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\n                pixels[outputOffset + x] = 0xFF000000 | (grey * 0x00010101);\n            }\n            inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        }\n        return pixels;\n    };\n    /**\n     * @return width of image from {@link #renderThumbnail()}\n     */\n    PlanarYUVLuminanceSource.prototype.getThumbnailWidth = function () {\n        return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    };\n    /**\n     * @return height of image from {@link #renderThumbnail()}\n     */\n    PlanarYUVLuminanceSource.prototype.getThumbnailHeight = function () {\n        return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    };\n    PlanarYUVLuminanceSource.prototype.reverseHorizontal = function (width /*int*/, height /*int*/) {\n        var yuvData = this.yuvData;\n        for (var y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {\n            var middle = rowStart + width / 2;\n            for (var x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {\n                var temp = yuvData[x1];\n                yuvData[x1] = yuvData[x2];\n                yuvData[x2] = temp;\n            }\n        }\n    };\n    PlanarYUVLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource_1.default(this);\n    };\n    PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR = 2;\n    return PlanarYUVLuminanceSource;\n}(LuminanceSource_1.default));\nexports.default = PlanarYUVLuminanceSource;\n//# sourceMappingURL=PlanarYUVLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}