{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar DetectorResult_1 = require(\"../../common/DetectorResult\");\nvar GridSamplerInstance_1 = require(\"../../common/GridSamplerInstance\");\nvar PerspectiveTransform_1 = require(\"../../common/PerspectiveTransform\");\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\nvar Version_1 = require(\"../decoder/Version\");\nvar FinderPatternFinder_1 = require(\"./FinderPatternFinder\");\nvar AlignmentPatternFinder_1 = require(\"./AlignmentPatternFinder\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.Map;*/\n/**\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\nvar Detector = /** @class */function () {\n  function Detector(image) {\n    this.image = image;\n  }\n  Detector.prototype.getImage = function () {\n    return this.image;\n  };\n  Detector.prototype.getResultPointCallback = function () {\n    return this.resultPointCallback;\n  };\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n  // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n  //   return detect(null)\n  // }\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @param hints optional hints to detector\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n  Detector.prototype.detect = function (hints) {\n    this.resultPointCallback = hints === null || hints === undefined ? null : /*(ResultPointCallback) */hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n    var finder = new FinderPatternFinder_1.default(this.image, this.resultPointCallback);\n    var info = finder.find(hints);\n    return this.processFinderPatternInfo(info);\n  };\n  Detector.prototype.processFinderPatternInfo = function (info) {\n    var topLeft = info.getTopLeft();\n    var topRight = info.getTopRight();\n    var bottomLeft = info.getBottomLeft();\n    var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n    if (moduleSize < 1.0) {\n      throw new NotFoundException_1.default('No pattern found in proccess finder.');\n    }\n    var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n    var provisionalVersion = Version_1.default.getProvisionalVersionForDimension(dimension);\n    var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n    var alignmentPattern = null;\n    // Anything above version 1 has an alignment pattern\n    if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n      // Guess where a \"bottom right\" finder pattern would have been\n      var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      // Estimate that alignment pattern is closer by 3 modules\n      // from \"bottom right\" to known top left location\n      var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n      var estAlignmentX = /*(int) */Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n      var estAlignmentY = /*(int) */Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\n      // Kind of arbitrary -- expand search radius before giving up\n      for (var i = 4; i <= 16; i <<= 1) {\n        try {\n          alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n          break;\n        } catch (re /*NotFoundException*/) {\n          if (!(re instanceof NotFoundException_1.default)) {\n            throw re;\n          }\n          // try next round\n        }\n      }\n      // If we didn't find alignment pattern... well try anyway without it\n    }\n\n    var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n    var bits = Detector.sampleGrid(this.image, transform, dimension);\n    var points;\n    if (alignmentPattern === null) {\n      points = [bottomLeft, topLeft, topRight];\n    } else {\n      points = [bottomLeft, topLeft, topRight, alignmentPattern];\n    }\n    return new DetectorResult_1.default(bits, points);\n  };\n  Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension /*int*/) {\n    var dimMinusThree = dimension - 3.5;\n    var bottomRightX; /*float*/\n    var bottomRightY; /*float*/\n    var sourceBottomRightX; /*float*/\n    var sourceBottomRightY; /*float*/\n    if (alignmentPattern !== null) {\n      bottomRightX = alignmentPattern.getX();\n      bottomRightY = alignmentPattern.getY();\n      sourceBottomRightX = dimMinusThree - 3.0;\n      sourceBottomRightY = sourceBottomRightX;\n    } else {\n      // Don't have an alignment pattern, just make up the bottom-right point\n      bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      sourceBottomRightX = dimMinusThree;\n      sourceBottomRightY = dimMinusThree;\n    }\n    return PerspectiveTransform_1.default.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n  };\n  Detector.sampleGrid = function (image, transform, dimension /*int*/) {\n    var sampler = GridSamplerInstance_1.default.getInstance();\n    return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n  };\n  /**\n   * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n   * of the finder patterns and estimated module size.</p>\n   */\n  Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize /*float*/) {\n    var tltrCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, topRight) / moduleSize);\n    var tlblCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, bottomLeft) / moduleSize);\n    var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n    switch (dimension & 0x03) {\n      // mod 4\n      case 0:\n        dimension++;\n        break;\n      // 1? do nothing\n      case 2:\n        dimension--;\n        break;\n      case 3:\n        throw new NotFoundException_1.default('Dimensions could be not found.');\n    }\n    return dimension;\n  };\n  /**\n   * <p>Computes an average estimated module size based on estimated derived from the positions\n   * of the three finder patterns.</p>\n   *\n   * @param topLeft detected top-left finder pattern center\n   * @param topRight detected top-right finder pattern center\n   * @param bottomLeft detected bottom-left finder pattern center\n   * @return estimated module size\n   */\n  Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n    // Take the average\n    return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n  };\n  /**\n   * <p>Estimates module size based on two finder patterns -- it uses\n   * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n   * width of each, measuring along the axis between their centers.</p>\n   */\n  Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n    var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays( /*(int) */Math.floor(pattern.getX()), /*(int) */Math.floor(pattern.getY()), /*(int) */Math.floor(otherPattern.getX()), /*(int) */Math.floor(otherPattern.getY()));\n    var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays( /*(int) */Math.floor(otherPattern.getX()), /*(int) */Math.floor(otherPattern.getY()), /*(int) */Math.floor(pattern.getX()), /*(int) */Math.floor(pattern.getY()));\n    if (isNaN(moduleSizeEst1)) {\n      return moduleSizeEst2 / 7.0;\n    }\n    if (isNaN(moduleSizeEst2)) {\n      return moduleSizeEst1 / 7.0;\n    }\n    // Average them, and divide by 7 since we've counted the width of 3 black modules,\n    // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n    return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n  };\n  /**\n   * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n   * a finder pattern by looking for a black-white-black run from the center in the direction\n   * of another point (another finder pattern center), and in the opposite direction too.\n   */\n  Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n    var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\n    // Now count other way -- don't run off image though of course\n    var scale = 1.0;\n    var otherToX = fromX - (toX - fromX);\n    if (otherToX < 0) {\n      scale = fromX / ( /*(float) */fromX - otherToX);\n      otherToX = 0;\n    } else if (otherToX >= this.image.getWidth()) {\n      scale = (this.image.getWidth() - 1 - fromX) / ( /*(float) */otherToX - fromX);\n      otherToX = this.image.getWidth() - 1;\n    }\n    var otherToY = /*(int) */Math.floor(fromY - (toY - fromY) * scale);\n    scale = 1.0;\n    if (otherToY < 0) {\n      scale = fromY / ( /*(float) */fromY - otherToY);\n      otherToY = 0;\n    } else if (otherToY >= this.image.getHeight()) {\n      scale = (this.image.getHeight() - 1 - fromY) / ( /*(float) */otherToY - fromY);\n      otherToY = this.image.getHeight() - 1;\n    }\n    otherToX = /*(int) */Math.floor(fromX + (otherToX - fromX) * scale);\n    result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\n    // Middle pixel is double-counted this way; subtract 1\n    return result - 1.0;\n  };\n  /**\n   * <p>This method traces a line from a point in the image, in the direction towards another point.\n   * It begins in a black region, and keeps going until it finds white, then black, then white again.\n   * It reports the distance from the start to this point.</p>\n   *\n   * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n   * may be skewed or rotated.</p>\n   */\n  Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n    // Mild variant of Bresenham's algorithm\n    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n    if (steep) {\n      var temp = fromX;\n      fromX = fromY;\n      fromY = temp;\n      temp = toX;\n      toX = toY;\n      toY = temp;\n    }\n    var dx = Math.abs(toX - fromX);\n    var dy = Math.abs(toY - fromY);\n    var error = -dx / 2;\n    var xstep = fromX < toX ? 1 : -1;\n    var ystep = fromY < toY ? 1 : -1;\n    // In black pixels, looking for white, first or second time.\n    var state = 0;\n    // Loop up until x == toX, but not beyond\n    var xLimit = toX + xstep;\n    for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n      var realX = steep ? y : x;\n      var realY = steep ? x : y;\n      // Does current pixel mean we have moved white to black or vice versa?\n      // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n      // color, advance to next state or end if we are in state 2 already\n      if (state === 1 === this.image.get(realX, realY)) {\n        if (state === 2) {\n          return MathUtils_1.default.distance(x, y, fromX, fromY);\n        }\n        state++;\n      }\n      error += dy;\n      if (error > 0) {\n        if (y === toY) {\n          break;\n        }\n        y += ystep;\n        error -= dx;\n      }\n    }\n    // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n    // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n    // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n    if (state === 2) {\n      return MathUtils_1.default.distance(toX + xstep, toY, fromX, fromY);\n    }\n    // else we didn't find even black-white-black; no estimate is really possible\n    return NaN;\n  };\n  /**\n   * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n   * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n   *\n   * @param overallEstModuleSize estimated module size so far\n   * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n   * @param estAlignmentY y coordinate of above\n   * @param allowanceFactor number of pixels in all directions to search from the center\n   * @return {@link AlignmentPattern} if found, or null otherwise\n   * @throws NotFoundException if an unexpected error occurs during detection\n   */\n  Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize /*float*/, estAlignmentX /*int*/, estAlignmentY /*int*/, allowanceFactor /*float*/) {\n    // Look for an alignment pattern (3 modules in size) around where it\n    // should be\n    var allowance = /*(int) */Math.floor(allowanceFactor * overallEstModuleSize);\n    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n    var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n    if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n      throw new NotFoundException_1.default('Alignment top exceeds estimated module size.');\n    }\n    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n    var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n    if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n      throw new NotFoundException_1.default('Alignment bottom exceeds estimated module size.');\n    }\n    var alignmentFinder = new AlignmentPatternFinder_1.default(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n    return alignmentFinder.find();\n  };\n  return Detector;\n}();\nexports.default = Detector;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/Detector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar DetectorResult_1 = require(\"../../common/DetectorResult\");\nvar GridSamplerInstance_1 = require(\"../../common/GridSamplerInstance\");\nvar PerspectiveTransform_1 = require(\"../../common/PerspectiveTransform\");\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\nvar Version_1 = require(\"../decoder/Version\");\nvar FinderPatternFinder_1 = require(\"./FinderPatternFinder\");\nvar AlignmentPatternFinder_1 = require(\"./AlignmentPatternFinder\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.Map;*/\n/**\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\nvar Detector = /** @class */ (function () {\n    function Detector(image) {\n        this.image = image;\n    }\n    Detector.prototype.getImage = function () {\n        return this.image;\n    };\n    Detector.prototype.getResultPointCallback = function () {\n        return this.resultPointCallback;\n    };\n    /**\n     * <p>Detects a QR Code in an image.</p>\n     *\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n     * @throws NotFoundException if QR Code cannot be found\n     * @throws FormatException if a QR Code cannot be decoded\n     */\n    // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n    //   return detect(null)\n    // }\n    /**\n     * <p>Detects a QR Code in an image.</p>\n     *\n     * @param hints optional hints to detector\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n     * @throws NotFoundException if QR Code cannot be found\n     * @throws FormatException if a QR Code cannot be decoded\n     */\n    Detector.prototype.detect = function (hints) {\n        this.resultPointCallback = (hints === null || hints === undefined) ? null :\n            /*(ResultPointCallback) */ hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n        var finder = new FinderPatternFinder_1.default(this.image, this.resultPointCallback);\n        var info = finder.find(hints);\n        return this.processFinderPatternInfo(info);\n    };\n    Detector.prototype.processFinderPatternInfo = function (info) {\n        var topLeft = info.getTopLeft();\n        var topRight = info.getTopRight();\n        var bottomLeft = info.getBottomLeft();\n        var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n        if (moduleSize < 1.0) {\n            throw new NotFoundException_1.default('No pattern found in proccess finder.');\n        }\n        var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n        var provisionalVersion = Version_1.default.getProvisionalVersionForDimension(dimension);\n        var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n        var alignmentPattern = null;\n        // Anything above version 1 has an alignment pattern\n        if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n            // Guess where a \"bottom right\" finder pattern would have been\n            var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n            var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n            // Estimate that alignment pattern is closer by 3 modules\n            // from \"bottom right\" to known top left location\n            var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n            var estAlignmentX = /*(int) */ Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n            var estAlignmentY = /*(int) */ Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\n            // Kind of arbitrary -- expand search radius before giving up\n            for (var i = 4; i <= 16; i <<= 1) {\n                try {\n                    alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n                    break;\n                }\n                catch (re /*NotFoundException*/) {\n                    if (!(re instanceof NotFoundException_1.default)) {\n                        throw re;\n                    }\n                    // try next round\n                }\n            }\n            // If we didn't find alignment pattern... well try anyway without it\n        }\n        var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n        var bits = Detector.sampleGrid(this.image, transform, dimension);\n        var points;\n        if (alignmentPattern === null) {\n            points = [bottomLeft, topLeft, topRight];\n        }\n        else {\n            points = [bottomLeft, topLeft, topRight, alignmentPattern];\n        }\n        return new DetectorResult_1.default(bits, points);\n    };\n    Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension /*int*/) {\n        var dimMinusThree = dimension - 3.5;\n        var bottomRightX; /*float*/\n        var bottomRightY; /*float*/\n        var sourceBottomRightX; /*float*/\n        var sourceBottomRightY; /*float*/\n        if (alignmentPattern !== null) {\n            bottomRightX = alignmentPattern.getX();\n            bottomRightY = alignmentPattern.getY();\n            sourceBottomRightX = dimMinusThree - 3.0;\n            sourceBottomRightY = sourceBottomRightX;\n        }\n        else {\n            // Don't have an alignment pattern, just make up the bottom-right point\n            bottomRightX = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();\n            bottomRightY = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();\n            sourceBottomRightX = dimMinusThree;\n            sourceBottomRightY = dimMinusThree;\n        }\n        return PerspectiveTransform_1.default.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n    };\n    Detector.sampleGrid = function (image, transform, dimension /*int*/) {\n        var sampler = GridSamplerInstance_1.default.getInstance();\n        return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n    };\n    /**\n     * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n     * of the finder patterns and estimated module size.</p>\n     */\n    Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize /*float*/) {\n        var tltrCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, topRight) / moduleSize);\n        var tlblCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, bottomLeft) / moduleSize);\n        var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n        switch (dimension & 0x03) { // mod 4\n            case 0:\n                dimension++;\n                break;\n            // 1? do nothing\n            case 2:\n                dimension--;\n                break;\n            case 3:\n                throw new NotFoundException_1.default('Dimensions could be not found.');\n        }\n        return dimension;\n    };\n    /**\n     * <p>Computes an average estimated module size based on estimated derived from the positions\n     * of the three finder patterns.</p>\n     *\n     * @param topLeft detected top-left finder pattern center\n     * @param topRight detected top-right finder pattern center\n     * @param bottomLeft detected bottom-left finder pattern center\n     * @return estimated module size\n     */\n    Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n        // Take the average\n        return (this.calculateModuleSizeOneWay(topLeft, topRight) +\n            this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n    };\n    /**\n     * <p>Estimates module size based on two finder patterns -- it uses\n     * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n     * width of each, measuring along the axis between their centers.</p>\n     */\n    Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n        var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(pattern.getX()), \n        /*(int) */ Math.floor(pattern.getY()), \n        /*(int) */ Math.floor(otherPattern.getX()), \n        /*(int) */ Math.floor(otherPattern.getY()));\n        var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(otherPattern.getX()), \n        /*(int) */ Math.floor(otherPattern.getY()), \n        /*(int) */ Math.floor(pattern.getX()), \n        /*(int) */ Math.floor(pattern.getY()));\n        if (isNaN(moduleSizeEst1)) {\n            return moduleSizeEst2 / 7.0;\n        }\n        if (isNaN(moduleSizeEst2)) {\n            return moduleSizeEst1 / 7.0;\n        }\n        // Average them, and divide by 7 since we've counted the width of 3 black modules,\n        // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n        return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n    };\n    /**\n     * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n     * a finder pattern by looking for a black-white-black run from the center in the direction\n     * of another point (another finder pattern center), and in the opposite direction too.\n     */\n    Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n        var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\n        // Now count other way -- don't run off image though of course\n        var scale = 1.0;\n        var otherToX = fromX - (toX - fromX);\n        if (otherToX < 0) {\n            scale = fromX / /*(float) */ (fromX - otherToX);\n            otherToX = 0;\n        }\n        else if (otherToX >= this.image.getWidth()) {\n            scale = (this.image.getWidth() - 1 - fromX) / /*(float) */ (otherToX - fromX);\n            otherToX = this.image.getWidth() - 1;\n        }\n        var otherToY = /*(int) */ Math.floor(fromY - (toY - fromY) * scale);\n        scale = 1.0;\n        if (otherToY < 0) {\n            scale = fromY / /*(float) */ (fromY - otherToY);\n            otherToY = 0;\n        }\n        else if (otherToY >= this.image.getHeight()) {\n            scale = (this.image.getHeight() - 1 - fromY) / /*(float) */ (otherToY - fromY);\n            otherToY = this.image.getHeight() - 1;\n        }\n        otherToX = /*(int) */ Math.floor(fromX + (otherToX - fromX) * scale);\n        result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\n        // Middle pixel is double-counted this way; subtract 1\n        return result - 1.0;\n    };\n    /**\n     * <p>This method traces a line from a point in the image, in the direction towards another point.\n     * It begins in a black region, and keeps going until it finds white, then black, then white again.\n     * It reports the distance from the start to this point.</p>\n     *\n     * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n     * may be skewed or rotated.</p>\n     */\n    Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n        // Mild variant of Bresenham's algorithm\n        // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n        var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n        if (steep) {\n            var temp = fromX;\n            fromX = fromY;\n            fromY = temp;\n            temp = toX;\n            toX = toY;\n            toY = temp;\n        }\n        var dx = Math.abs(toX - fromX);\n        var dy = Math.abs(toY - fromY);\n        var error = -dx / 2;\n        var xstep = fromX < toX ? 1 : -1;\n        var ystep = fromY < toY ? 1 : -1;\n        // In black pixels, looking for white, first or second time.\n        var state = 0;\n        // Loop up until x == toX, but not beyond\n        var xLimit = toX + xstep;\n        for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n            var realX = steep ? y : x;\n            var realY = steep ? x : y;\n            // Does current pixel mean we have moved white to black or vice versa?\n            // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n            // color, advance to next state or end if we are in state 2 already\n            if ((state === 1) === this.image.get(realX, realY)) {\n                if (state === 2) {\n                    return MathUtils_1.default.distance(x, y, fromX, fromY);\n                }\n                state++;\n            }\n            error += dy;\n            if (error > 0) {\n                if (y === toY) {\n                    break;\n                }\n                y += ystep;\n                error -= dx;\n            }\n        }\n        // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n        // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n        // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n        if (state === 2) {\n            return MathUtils_1.default.distance(toX + xstep, toY, fromX, fromY);\n        }\n        // else we didn't find even black-white-black; no estimate is really possible\n        return NaN;\n    };\n    /**\n     * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n     * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n     *\n     * @param overallEstModuleSize estimated module size so far\n     * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n     * @param estAlignmentY y coordinate of above\n     * @param allowanceFactor number of pixels in all directions to search from the center\n     * @return {@link AlignmentPattern} if found, or null otherwise\n     * @throws NotFoundException if an unexpected error occurs during detection\n     */\n    Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize /*float*/, estAlignmentX /*int*/, estAlignmentY /*int*/, allowanceFactor /*float*/) {\n        // Look for an alignment pattern (3 modules in size) around where it\n        // should be\n        var allowance = /*(int) */ Math.floor(allowanceFactor * overallEstModuleSize);\n        var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n        var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n        if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n            throw new NotFoundException_1.default('Alignment top exceeds estimated module size.');\n        }\n        var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n        var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n        if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n            throw new NotFoundException_1.default('Alignment bottom exceeds estimated module size.');\n        }\n        var alignmentFinder = new AlignmentPatternFinder_1.default(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n        return alignmentFinder.find();\n    };\n    return Detector;\n}());\nexports.default = Detector;\n//# sourceMappingURL=Detector.js.map"]},"metadata":{},"sourceType":"script"}