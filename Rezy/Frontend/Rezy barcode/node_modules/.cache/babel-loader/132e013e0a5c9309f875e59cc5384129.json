{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates a finder pattern, which are the three square patterns found in\n * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\n * as a convenience to the finder's bookkeeping.</p>\n *\n * @author Sean Owen\n */\nvar FinderPattern = /** @class */function (_super) {\n  __extends(FinderPattern, _super);\n  // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\n  //   this(posX, posY, estimatedModuleSize, 1)\n  // }\n  function FinderPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/, count /*int*/) {\n    var _this = _super.call(this, posX, posY) || this;\n    _this.estimatedModuleSize = estimatedModuleSize;\n    _this.count = count;\n    if (undefined === count) {\n      _this.count = 1;\n    }\n    return _this;\n  }\n  FinderPattern.prototype.getEstimatedModuleSize = function () {\n    return this.estimatedModuleSize;\n  };\n  FinderPattern.prototype.getCount = function () {\n    return this.count;\n  };\n  /*\n  void incrementCount() {\n    this.count++\n  }\n   */\n  /**\n   * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\n   * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n   */\n  FinderPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n    if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n      return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n    }\n    return false;\n  };\n  /**\n   * Combines this object's current estimate of a finder pattern position and module size\n   * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\n   * based on count.\n   */\n  FinderPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n    var combinedCount = this.count + 1;\n    var combinedX = (this.count * this.getX() + j) / combinedCount;\n    var combinedY = (this.count * this.getY() + i) / combinedCount;\n    var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\n    return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\n  };\n  return FinderPattern;\n}(ResultPoint_1.default);\nexports.default = FinderPattern;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/FinderPattern.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;AAEH;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;;;;;AAMG;AACH,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2C,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAEvC;EACA;EACA;EAEA,SAAA,aAAA,CAAmB,IAAY,CAAA,WAAW,IAAY,CAAA,WAAmB,mBAA2B,CAAA,WAAmB,KAAc,CAAC,SAAO;IAA7I,IAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAI,EAAE,IAAI,CAAC,IAAA,IAAA;IADoD,KAAA,CAAA,mBAAmB,GAAnB,mBAAmB;IAA2B,KAAA,CAAA,KAAK,GAAL,KAAK;IAExH,IAAI,SAAS,KAAK,KAAK,EAAE;MACrB,KAAI,CAAC,KAAK,GAAG,CAAC;IACjB;;EACL;EAEO,aAAA,CAAA,SAAA,CAAA,sBAAsB,GAA7B,YAAA;IACI,OAAO,IAAI,CAAC,mBAAmB;EACnC,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACI,OAAO,IAAI,CAAC,KAAK;EACrB,CAAC;EAED;;;;AAIG;EAEH;;;AAGG;EACI,aAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,UAAkB,CAAA,WAAW,CAAS,CAAA,WAAW,CAAS,CAAA,WAAS;IAClF,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE;MACpF,IAAM,cAAc,GAAqB,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;MACxF,OAAO,cAAc,IAAI,GAAG,IAAI,cAAc,IAAI,IAAI,CAAC,mBAAmB;IAC7E;IACD,OAAO,KAAK;EAChB,CAAC;EAED;;;;AAIG;EACI,aAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,CAAS,CAAA,WAAW,CAAS,CAAA,WAAW,aAAqB,CAAA,WAAS;IACzF,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;IACpC,IAAM,SAAS,GAAqB,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,aAAa;IAClF,IAAM,SAAS,GAAqB,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,aAAa;IAClF,IAAM,kBAAkB,GAAqB,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,mBAAmB,GAAG,aAAa,IAAI,aAAa;IACpH,OAAO,IAAI,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,EAAE,aAAa,CAAC;EACrF,CAAC;EAEL,OAAA,aAAC;AAAD,CAAC,CApD0C,aAAA,CAAA,OAAW,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates a finder pattern, which are the three square patterns found in\n * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\n * as a convenience to the finder's bookkeeping.</p>\n *\n * @author Sean Owen\n */\nvar FinderPattern = /** @class */ (function (_super) {\n    __extends(FinderPattern, _super);\n    // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\n    //   this(posX, posY, estimatedModuleSize, 1)\n    // }\n    function FinderPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/, count /*int*/) {\n        var _this = _super.call(this, posX, posY) || this;\n        _this.estimatedModuleSize = estimatedModuleSize;\n        _this.count = count;\n        if (undefined === count) {\n            _this.count = 1;\n        }\n        return _this;\n    }\n    FinderPattern.prototype.getEstimatedModuleSize = function () {\n        return this.estimatedModuleSize;\n    };\n    FinderPattern.prototype.getCount = function () {\n        return this.count;\n    };\n    /*\n    void incrementCount() {\n      this.count++\n    }\n     */\n    /**\n     * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\n     * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n     */\n    FinderPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n        if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n            var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n        }\n        return false;\n    };\n    /**\n     * Combines this object's current estimate of a finder pattern position and module size\n     * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\n     * based on count.\n     */\n    FinderPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n        var combinedCount = this.count + 1;\n        var combinedX = (this.count * this.getX() + j) / combinedCount;\n        var combinedY = (this.count * this.getY() + i) / combinedCount;\n        var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\n        return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\n    };\n    return FinderPattern;\n}(ResultPoint_1.default));\nexports.default = FinderPattern;\n//# sourceMappingURL=FinderPattern.js.map"]},"metadata":{},"sourceType":"script"}