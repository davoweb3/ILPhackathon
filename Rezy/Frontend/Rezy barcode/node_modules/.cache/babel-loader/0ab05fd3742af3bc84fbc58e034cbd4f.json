{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\nvar FormatInformation = /** @class */function () {\n  function FormatInformation(formatInfo /*int*/) {\n    // Bits 3,4\n    this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits(formatInfo >> 3 & 0x03);\n    // Bottom 3 bits\n    this.dataMask = /*(byte) */formatInfo & 0x07;\n  }\n  FormatInformation.numBitsDiffering = function (a /*int*/, b /*int*/) {\n    return Integer_1.default.bitCount(a ^ b);\n  };\n  /**\n   * @param maskedFormatInfo1 format info indicator, with mask still applied\n   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n   *  to establish best match\n   * @return information about the format it specifies, or {@code null}\n   *  if doesn't seem to match any known pattern\n   */\n  FormatInformation.decodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n    var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n    if (formatInfo !== null) {\n      return formatInfo;\n    }\n    // Should return null, but, some QR codes apparently\n    // do not mask this info. Try again by actually masking the pattern\n    // first\n    return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n  };\n  FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n    var e_1, _a;\n    // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestFormatInfo = 0;\n    try {\n      for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var decodeInfo = _c.value;\n        var targetInfo = decodeInfo[0];\n        if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n          // Found an exact match\n          return new FormatInformation(decodeInfo[1]);\n        }\n        var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n        if (bitsDifference < bestDifference) {\n          bestFormatInfo = decodeInfo[1];\n          bestDifference = bitsDifference;\n        }\n        if (maskedFormatInfo1 !== maskedFormatInfo2) {\n          // also try the other option\n          bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n          if (bitsDifference < bestDifference) {\n            bestFormatInfo = decodeInfo[1];\n            bestDifference = bitsDifference;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n    // differing means we found a match\n    if (bestDifference <= 3) {\n      return new FormatInformation(bestFormatInfo);\n    }\n    return null;\n  };\n  FormatInformation.prototype.getErrorCorrectionLevel = function () {\n    return this.errorCorrectionLevel;\n  };\n  FormatInformation.prototype.getDataMask = function () {\n    return this.dataMask;\n  };\n  /*@Override*/\n  FormatInformation.prototype.hashCode = function () {\n    return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;\n  };\n  /*@Override*/\n  FormatInformation.prototype.equals = function (o) {\n    if (!(o instanceof FormatInformation)) {\n      return false;\n    }\n    var other = o;\n    return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;\n  };\n  FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n  /**\n   * See ISO 18004:2006, Annex C, Table C.1\n   */\n  FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [Int32Array.from([0x5412, 0x00]), Int32Array.from([0x5125, 0x01]), Int32Array.from([0x5E7C, 0x02]), Int32Array.from([0x5B4B, 0x03]), Int32Array.from([0x45F9, 0x04]), Int32Array.from([0x40CE, 0x05]), Int32Array.from([0x4F97, 0x06]), Int32Array.from([0x4AA0, 0x07]), Int32Array.from([0x77C4, 0x08]), Int32Array.from([0x72F3, 0x09]), Int32Array.from([0x7DAA, 0x0A]), Int32Array.from([0x789D, 0x0B]), Int32Array.from([0x662F, 0x0C]), Int32Array.from([0x6318, 0x0D]), Int32Array.from([0x6C41, 0x0E]), Int32Array.from([0x6976, 0x0F]), Int32Array.from([0x1689, 0x10]), Int32Array.from([0x13BE, 0x11]), Int32Array.from([0x1CE7, 0x12]), Int32Array.from([0x19D0, 0x13]), Int32Array.from([0x0762, 0x14]), Int32Array.from([0x0255, 0x15]), Int32Array.from([0x0D0C, 0x16]), Int32Array.from([0x083B, 0x17]), Int32Array.from([0x355F, 0x18]), Int32Array.from([0x3068, 0x19]), Int32Array.from([0x3F31, 0x1A]), Int32Array.from([0x3A06, 0x1B]), Int32Array.from([0x24B4, 0x1C]), Int32Array.from([0x2183, 0x1D]), Int32Array.from([0x2EDA, 0x1E]), Int32Array.from([0x2BED, 0x1F])];\n  return FormatInformation;\n}();\nexports.default = FormatInformation;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/FormatInformation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\nvar FormatInformation = /** @class */ (function () {\n    function FormatInformation(formatInfo /*int*/) {\n        // Bits 3,4\n        this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits((formatInfo >> 3) & 0x03);\n        // Bottom 3 bits\n        this.dataMask = /*(byte) */ (formatInfo & 0x07);\n    }\n    FormatInformation.numBitsDiffering = function (a /*int*/, b /*int*/) {\n        return Integer_1.default.bitCount(a ^ b);\n    };\n    /**\n     * @param maskedFormatInfo1 format info indicator, with mask still applied\n     * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n     *  to establish best match\n     * @return information about the format it specifies, or {@code null}\n     *  if doesn't seem to match any known pattern\n     */\n    FormatInformation.decodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n        var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n        if (formatInfo !== null) {\n            return formatInfo;\n        }\n        // Should return null, but, some QR codes apparently\n        // do not mask this info. Try again by actually masking the pattern\n        // first\n        return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n    };\n    FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n        var e_1, _a;\n        // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n        var bestDifference = Number.MAX_SAFE_INTEGER;\n        var bestFormatInfo = 0;\n        try {\n            for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var decodeInfo = _c.value;\n                var targetInfo = decodeInfo[0];\n                if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n                    // Found an exact match\n                    return new FormatInformation(decodeInfo[1]);\n                }\n                var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n                if (bitsDifference < bestDifference) {\n                    bestFormatInfo = decodeInfo[1];\n                    bestDifference = bitsDifference;\n                }\n                if (maskedFormatInfo1 !== maskedFormatInfo2) {\n                    // also try the other option\n                    bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n                    if (bitsDifference < bestDifference) {\n                        bestFormatInfo = decodeInfo[1];\n                        bestDifference = bitsDifference;\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n        // differing means we found a match\n        if (bestDifference <= 3) {\n            return new FormatInformation(bestFormatInfo);\n        }\n        return null;\n    };\n    FormatInformation.prototype.getErrorCorrectionLevel = function () {\n        return this.errorCorrectionLevel;\n    };\n    FormatInformation.prototype.getDataMask = function () {\n        return this.dataMask;\n    };\n    /*@Override*/\n    FormatInformation.prototype.hashCode = function () {\n        return (this.errorCorrectionLevel.getBits() << 3) | this.dataMask;\n    };\n    /*@Override*/\n    FormatInformation.prototype.equals = function (o) {\n        if (!(o instanceof FormatInformation)) {\n            return false;\n        }\n        var other = o;\n        return this.errorCorrectionLevel === other.errorCorrectionLevel &&\n            this.dataMask === other.dataMask;\n    };\n    FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n    /**\n     * See ISO 18004:2006, Annex C, Table C.1\n     */\n    FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [\n        Int32Array.from([0x5412, 0x00]),\n        Int32Array.from([0x5125, 0x01]),\n        Int32Array.from([0x5E7C, 0x02]),\n        Int32Array.from([0x5B4B, 0x03]),\n        Int32Array.from([0x45F9, 0x04]),\n        Int32Array.from([0x40CE, 0x05]),\n        Int32Array.from([0x4F97, 0x06]),\n        Int32Array.from([0x4AA0, 0x07]),\n        Int32Array.from([0x77C4, 0x08]),\n        Int32Array.from([0x72F3, 0x09]),\n        Int32Array.from([0x7DAA, 0x0A]),\n        Int32Array.from([0x789D, 0x0B]),\n        Int32Array.from([0x662F, 0x0C]),\n        Int32Array.from([0x6318, 0x0D]),\n        Int32Array.from([0x6C41, 0x0E]),\n        Int32Array.from([0x6976, 0x0F]),\n        Int32Array.from([0x1689, 0x10]),\n        Int32Array.from([0x13BE, 0x11]),\n        Int32Array.from([0x1CE7, 0x12]),\n        Int32Array.from([0x19D0, 0x13]),\n        Int32Array.from([0x0762, 0x14]),\n        Int32Array.from([0x0255, 0x15]),\n        Int32Array.from([0x0D0C, 0x16]),\n        Int32Array.from([0x083B, 0x17]),\n        Int32Array.from([0x355F, 0x18]),\n        Int32Array.from([0x3068, 0x19]),\n        Int32Array.from([0x3F31, 0x1A]),\n        Int32Array.from([0x3A06, 0x1B]),\n        Int32Array.from([0x24B4, 0x1C]),\n        Int32Array.from([0x2183, 0x1D]),\n        Int32Array.from([0x2EDA, 0x1E]),\n        Int32Array.from([0x2BED, 0x1F]),\n    ];\n    return FormatInformation;\n}());\nexports.default = FormatInformation;\n//# sourceMappingURL=FormatInformation.js.map"]},"metadata":{},"sourceType":"script"}