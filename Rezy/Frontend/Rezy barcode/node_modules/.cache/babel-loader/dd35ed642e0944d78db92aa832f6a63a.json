{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ArgumentException_1 = require(\"../../ArgumentException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ErrorCorrectionLevelValues;\n(function (ErrorCorrectionLevelValues) {\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar ErrorCorrectionLevel = /** @class */function () {\n  function ErrorCorrectionLevel(value, stringValue, bits /*int*/) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.bits = bits;\n    ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n    ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n  }\n  ErrorCorrectionLevel.prototype.getValue = function () {\n    return this.value;\n  };\n  ErrorCorrectionLevel.prototype.getBits = function () {\n    return this.bits;\n  };\n  ErrorCorrectionLevel.fromString = function (s) {\n    switch (s) {\n      case 'L':\n        return ErrorCorrectionLevel.L;\n      case 'M':\n        return ErrorCorrectionLevel.M;\n      case 'Q':\n        return ErrorCorrectionLevel.Q;\n      case 'H':\n        return ErrorCorrectionLevel.H;\n      default:\n        throw new ArgumentException_1.default(s + 'not available');\n    }\n  };\n  ErrorCorrectionLevel.prototype.toString = function () {\n    return this.stringValue;\n  };\n  ErrorCorrectionLevel.prototype.equals = function (o) {\n    if (!(o instanceof ErrorCorrectionLevel)) {\n      return false;\n    }\n    var other = o;\n    return this.value === other.value;\n  };\n  /**\n   * @param bits int containing the two bits encoding a QR Code's error correction level\n   * @return ErrorCorrectionLevel representing the encoded error correction level\n   */\n  ErrorCorrectionLevel.forBits = function (bits /*int*/) {\n    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n      throw new IllegalArgumentException_1.default();\n    }\n    return ErrorCorrectionLevel.FOR_BITS.get(bits);\n  };\n  ErrorCorrectionLevel.FOR_BITS = new Map();\n  ErrorCorrectionLevel.FOR_VALUE = new Map();\n  /** L = ~7% correction */\n  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n  /** M = ~15% correction */\n  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n  /** Q = ~25% correction */\n  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n  /** H = ~30% correction */\n  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n  return ErrorCorrectionLevel;\n}();\nexports.default = ErrorCorrectionLevel;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/ErrorCorrectionLevel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ArgumentException_1 = require(\"../../ArgumentException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ErrorCorrectionLevelValues;\n(function (ErrorCorrectionLevelValues) {\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar ErrorCorrectionLevel = /** @class */ (function () {\n    function ErrorCorrectionLevel(value, stringValue, bits /*int*/) {\n        this.value = value;\n        this.stringValue = stringValue;\n        this.bits = bits;\n        ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n        ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n    }\n    ErrorCorrectionLevel.prototype.getValue = function () {\n        return this.value;\n    };\n    ErrorCorrectionLevel.prototype.getBits = function () {\n        return this.bits;\n    };\n    ErrorCorrectionLevel.fromString = function (s) {\n        switch (s) {\n            case 'L': return ErrorCorrectionLevel.L;\n            case 'M': return ErrorCorrectionLevel.M;\n            case 'Q': return ErrorCorrectionLevel.Q;\n            case 'H': return ErrorCorrectionLevel.H;\n            default: throw new ArgumentException_1.default(s + 'not available');\n        }\n    };\n    ErrorCorrectionLevel.prototype.toString = function () {\n        return this.stringValue;\n    };\n    ErrorCorrectionLevel.prototype.equals = function (o) {\n        if (!(o instanceof ErrorCorrectionLevel)) {\n            return false;\n        }\n        var other = o;\n        return this.value === other.value;\n    };\n    /**\n     * @param bits int containing the two bits encoding a QR Code's error correction level\n     * @return ErrorCorrectionLevel representing the encoded error correction level\n     */\n    ErrorCorrectionLevel.forBits = function (bits /*int*/) {\n        if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return ErrorCorrectionLevel.FOR_BITS.get(bits);\n    };\n    ErrorCorrectionLevel.FOR_BITS = new Map();\n    ErrorCorrectionLevel.FOR_VALUE = new Map();\n    /** L = ~7% correction */\n    ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n    /** M = ~15% correction */\n    ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n    /** Q = ~25% correction */\n    ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n    /** H = ~30% correction */\n    ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n    return ErrorCorrectionLevel;\n}());\nexports.default = ErrorCorrectionLevel;\n//# sourceMappingURL=ErrorCorrectionLevel.js.map"]},"metadata":{},"sourceType":"script"}