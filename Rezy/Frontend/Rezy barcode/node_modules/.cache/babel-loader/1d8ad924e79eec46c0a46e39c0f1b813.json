{"ast":null,"code":"\"use strict\";\n\n/*\n* Copyright 2009 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.ResultPoint;\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar System_1 = require(\"../../util/System\");\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar PDF417DetectorResult_1 = require(\"./PDF417DetectorResult\");\n// import java.util.ArrayList;\n// import java.util.Arrays;\n// import java.util.List;\n// import java.util.Map;\n/**\n * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the\n * PDF417 Code is rotated or skewed, or partially obscured.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Guenther Grau\n */\nvar Detector = /** @class */function () {\n  function Detector() {}\n  /**\n   * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>\n   *\n   * @param image barcode image to decode\n   * @param hints optional hints to detector\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @return {@link PDF417DetectorResult} encapsulating results of detecting a PDF417 code\n   * @throws NotFoundException if no PDF417 Code can be found\n   */\n  Detector.detectMultiple = function (image, hints, multiple) {\n    // TODO detection improvement, tryHarder could try several different luminance thresholds/blackpoints or even\n    // different binarizers\n    // boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n    var bitMatrix = image.getBlackMatrix();\n    var barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n    if (!barcodeCoordinates.length) {\n      bitMatrix = bitMatrix.clone();\n      bitMatrix.rotate180();\n      barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n    }\n    return new PDF417DetectorResult_1.default(bitMatrix, barcodeCoordinates);\n  };\n  /**\n   * Detects PDF417 codes in an image. Only checks 0 degree rotation\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @param bitMatrix bit matrix to detect barcodes in\n   * @return List of ResultPoint arrays containing the coordinates of found barcodes\n   */\n  Detector.detect = function (multiple, bitMatrix) {\n    var e_1, _a;\n    var barcodeCoordinates = new Array();\n    var row = 0;\n    var column = 0;\n    var foundBarcodeInRow = false;\n    while (row < bitMatrix.getHeight()) {\n      var vertices = Detector.findVertices(bitMatrix, row, column);\n      if (vertices[0] == null && vertices[3] == null) {\n        if (!foundBarcodeInRow) {\n          // we didn't find any barcode so that's the end of searching\n          break;\n        }\n        // we didn't find a barcode starting at the given column and row. Try again from the first column and slightly\n        // below the lowest barcode we found so far.\n        foundBarcodeInRow = false;\n        column = 0;\n        try {\n          for (var barcodeCoordinates_1 = __values(barcodeCoordinates), barcodeCoordinates_1_1 = barcodeCoordinates_1.next(); !barcodeCoordinates_1_1.done; barcodeCoordinates_1_1 = barcodeCoordinates_1.next()) {\n            var barcodeCoordinate = barcodeCoordinates_1_1.value;\n            if (barcodeCoordinate[1] != null) {\n              row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));\n            }\n            if (barcodeCoordinate[3] != null) {\n              row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (barcodeCoordinates_1_1 && !barcodeCoordinates_1_1.done && (_a = barcodeCoordinates_1.return)) _a.call(barcodeCoordinates_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        row += Detector.ROW_STEP;\n        continue;\n      }\n      foundBarcodeInRow = true;\n      barcodeCoordinates.push(vertices);\n      if (!multiple) {\n        break;\n      }\n      // if we didn't find a right row indicator column, then continue the search for the next barcode after the\n      // start pattern of the barcode just found.\n      if (vertices[2] != null) {\n        column = Math.trunc(vertices[2].getX());\n        row = Math.trunc(vertices[2].getY());\n      } else {\n        column = Math.trunc(vertices[4].getX());\n        row = Math.trunc(vertices[4].getY());\n      }\n    }\n    return barcodeCoordinates;\n  };\n  /**\n   * Locate the vertices and the codewords area of a black blob using the Start\n   * and Stop patterns as locators.\n   *\n   * @param matrix the scanned barcode image.\n   * @return an array containing the vertices:\n   *           vertices[0] x, y top left barcode\n   *           vertices[1] x, y bottom left barcode\n   *           vertices[2] x, y top right barcode\n   *           vertices[3] x, y bottom right barcode\n   *           vertices[4] x, y top left codeword area\n   *           vertices[5] x, y bottom left codeword area\n   *           vertices[6] x, y top right codeword area\n   *           vertices[7] x, y bottom right codeword area\n   */\n  Detector.findVertices = function (matrix, startRow, startColumn) {\n    var height = matrix.getHeight();\n    var width = matrix.getWidth();\n    // const result = new ResultPoint[8];\n    var result = new Array(8);\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.START_PATTERN), Detector.INDEXES_START_PATTERN);\n    if (result[4] != null) {\n      startColumn = Math.trunc(result[4].getX());\n      startRow = Math.trunc(result[4].getY());\n    }\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.STOP_PATTERN), Detector.INDEXES_STOP_PATTERN);\n    return result;\n  };\n  Detector.copyToResult = function (result, tmpResult, destinationIndexes) {\n    for (var i = 0; i < destinationIndexes.length; i++) {\n      result[destinationIndexes[i]] = tmpResult[i];\n    }\n  };\n  Detector.findRowsWithPattern = function (matrix, height, width, startRow, startColumn, pattern) {\n    // const result = new ResultPoint[4];\n    var result = new Array(4);\n    var found = false;\n    var counters = new Int32Array(pattern.length);\n    for (; startRow < height; startRow += Detector.ROW_STEP) {\n      var loc = Detector.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);\n      if (loc != null) {\n        while (startRow > 0) {\n          var previousRowLoc = Detector.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);\n          if (previousRowLoc != null) {\n            loc = previousRowLoc;\n          } else {\n            startRow++;\n            break;\n          }\n        }\n        result[0] = new ResultPoint_1.default(loc[0], startRow);\n        result[1] = new ResultPoint_1.default(loc[1], startRow);\n        found = true;\n        break;\n      }\n    }\n    var stopRow = startRow + 1;\n    // Last row of the current symbol that contains pattern\n    if (found) {\n      var skippedRowCount = 0;\n      var previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);\n      for (; stopRow < height; stopRow++) {\n        var loc = Detector.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters);\n        // a found pattern is only considered to belong to the same barcode if the start and end positions\n        // don't differ too much. Pattern drift should be not bigger than two for consecutive rows. With\n        // a higher number of skipped rows drift could be larger. To keep it simple for now, we allow a slightly\n        // larger drift and don't check for skipped rows.\n        if (loc != null && Math.abs(previousRowLoc[0] - loc[0]) < Detector.MAX_PATTERN_DRIFT && Math.abs(previousRowLoc[1] - loc[1]) < Detector.MAX_PATTERN_DRIFT) {\n          previousRowLoc = loc;\n          skippedRowCount = 0;\n        } else {\n          if (skippedRowCount > Detector.SKIPPED_ROW_COUNT_MAX) {\n            break;\n          } else {\n            skippedRowCount++;\n          }\n        }\n      }\n      stopRow -= skippedRowCount + 1;\n      result[2] = new ResultPoint_1.default(previousRowLoc[0], stopRow);\n      result[3] = new ResultPoint_1.default(previousRowLoc[1], stopRow);\n    }\n    if (stopRow - startRow < Detector.BARCODE_MIN_HEIGHT) {\n      Arrays_1.default.fill(result, null);\n    }\n    return result;\n  };\n  /**\n   * @param matrix row of black/white values to search\n   * @param column x position to start search\n   * @param row y position to start search\n   * @param width the number of pixels to search on this row\n   * @param pattern pattern of counts of number of black and white pixels that are\n   *                 being searched for as a pattern\n   * @param counters array of counters, as long as pattern, to re-use\n   * @return start/end horizontal offset of guard pattern, as an array of two ints.\n   */\n  Detector.findGuardPattern = function (matrix, column, row, width, whiteFirst, pattern, counters) {\n    Arrays_1.default.fillWithin(counters, 0, counters.length, 0);\n    var patternStart = column;\n    var pixelDrift = 0;\n    // if there are black pixels left of the current pixel shift to the left, but only for MAX_PIXEL_DRIFT pixels\n    while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector.MAX_PIXEL_DRIFT) {\n      patternStart--;\n    }\n    var x = patternStart;\n    var counterPosition = 0;\n    var patternLength = pattern.length;\n    for (var isWhite = whiteFirst; x < width; x++) {\n      var pixel = matrix.get(x, row);\n      if (pixel !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          if (Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n            return new Int32Array([patternStart, x]);\n          }\n          patternStart += counters[0] + counters[1];\n          System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    if (counterPosition === patternLength - 1 && Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n      return new Int32Array([patternStart, x - 1]);\n    }\n    return null;\n  };\n  /**\n   * Determines how closely a set of observed counts of runs of black/white\n   * values matches a given target pattern. This is reported as the ratio of\n   * the total variance from the expected pattern proportions across all\n   * pattern elements, to the length of the pattern.\n   *\n   * @param counters observed counters\n   * @param pattern expected pattern\n   * @param maxIndividualVariance The most any counter can differ before we give up\n   * @return ratio of total variance between counters and pattern compared to total pattern size\n   */\n  Detector.patternMatchVariance = function (counters, pattern, maxIndividualVariance) {\n    var numCounters = counters.length;\n    var total = 0;\n    var patternLength = 0;\n    for (var i = 0; i < numCounters; i++) {\n      total += counters[i];\n      patternLength += pattern[i];\n    }\n    if (total < patternLength) {\n      // If we don't even have one pixel per unit of bar width, assume this\n      // is too small to reliably match, so fail:\n      return (/*Float.POSITIVE_INFINITY*/Infinity\n      );\n    }\n    // We're going to fake floating-point math in integers. We just need to use more bits.\n    // Scale up patternLength so that intermediate values below like scaledCounter will have\n    // more \"significant digits\".\n    var unitBarWidth = total / patternLength;\n    maxIndividualVariance *= unitBarWidth;\n    var totalVariance = 0.0;\n    for (var x = 0; x < numCounters; x++) {\n      var counter = counters[x];\n      var scaledPattern = pattern[x] * unitBarWidth;\n      var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n      if (variance > maxIndividualVariance) {\n        return (/*Float.POSITIVE_INFINITY*/Infinity\n        );\n      }\n      totalVariance += variance;\n    }\n    return totalVariance / total;\n  };\n  Detector.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);\n  Detector.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);\n  Detector.MAX_AVG_VARIANCE = 0.42;\n  Detector.MAX_INDIVIDUAL_VARIANCE = 0.8;\n  // B S B S B S B S Bar/Space pattern\n  // 11111111 0 1 0 1 0 1 000\n  Detector.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);\n  // 1111111 0 1 000 1 0 1 00 1\n  Detector.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);\n  Detector.MAX_PIXEL_DRIFT = 3;\n  Detector.MAX_PATTERN_DRIFT = 5;\n  // if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.\n  // if we set the value too high, then we might detect the start pattern from a neighbor barcode.\n  Detector.SKIPPED_ROW_COUNT_MAX = 25;\n  // A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least\n  // 9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.\n  Detector.ROW_STEP = 5;\n  Detector.BARCODE_MIN_HEIGHT = 10;\n  return Detector;\n}();\nexports.default = Detector;","map":{"version":3,"sources":["../../../../src/core/pdf417/detector/Detector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n* Copyright 2009 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.ResultPoint;\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar System_1 = require(\"../../util/System\");\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar PDF417DetectorResult_1 = require(\"./PDF417DetectorResult\");\n// import java.util.ArrayList;\n// import java.util.Arrays;\n// import java.util.List;\n// import java.util.Map;\n/**\n * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the\n * PDF417 Code is rotated or skewed, or partially obscured.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Guenther Grau\n */\nvar Detector = /** @class */ (function () {\n    function Detector() {\n    }\n    /**\n     * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>\n     *\n     * @param image barcode image to decode\n     * @param hints optional hints to detector\n     * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n     * be found and returned\n     * @return {@link PDF417DetectorResult} encapsulating results of detecting a PDF417 code\n     * @throws NotFoundException if no PDF417 Code can be found\n     */\n    Detector.detectMultiple = function (image, hints, multiple) {\n        // TODO detection improvement, tryHarder could try several different luminance thresholds/blackpoints or even\n        // different binarizers\n        // boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n        var bitMatrix = image.getBlackMatrix();\n        var barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n        if (!barcodeCoordinates.length) {\n            bitMatrix = bitMatrix.clone();\n            bitMatrix.rotate180();\n            barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n        }\n        return new PDF417DetectorResult_1.default(bitMatrix, barcodeCoordinates);\n    };\n    /**\n     * Detects PDF417 codes in an image. Only checks 0 degree rotation\n     * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n     * be found and returned\n     * @param bitMatrix bit matrix to detect barcodes in\n     * @return List of ResultPoint arrays containing the coordinates of found barcodes\n     */\n    Detector.detect = function (multiple, bitMatrix) {\n        var e_1, _a;\n        var barcodeCoordinates = new Array();\n        var row = 0;\n        var column = 0;\n        var foundBarcodeInRow = false;\n        while (row < bitMatrix.getHeight()) {\n            var vertices = Detector.findVertices(bitMatrix, row, column);\n            if (vertices[0] == null && vertices[3] == null) {\n                if (!foundBarcodeInRow) {\n                    // we didn't find any barcode so that's the end of searching\n                    break;\n                }\n                // we didn't find a barcode starting at the given column and row. Try again from the first column and slightly\n                // below the lowest barcode we found so far.\n                foundBarcodeInRow = false;\n                column = 0;\n                try {\n                    for (var barcodeCoordinates_1 = __values(barcodeCoordinates), barcodeCoordinates_1_1 = barcodeCoordinates_1.next(); !barcodeCoordinates_1_1.done; barcodeCoordinates_1_1 = barcodeCoordinates_1.next()) {\n                        var barcodeCoordinate = barcodeCoordinates_1_1.value;\n                        if (barcodeCoordinate[1] != null) {\n                            row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));\n                        }\n                        if (barcodeCoordinate[3] != null) {\n                            row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (barcodeCoordinates_1_1 && !barcodeCoordinates_1_1.done && (_a = barcodeCoordinates_1.return)) _a.call(barcodeCoordinates_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                row += Detector.ROW_STEP;\n                continue;\n            }\n            foundBarcodeInRow = true;\n            barcodeCoordinates.push(vertices);\n            if (!multiple) {\n                break;\n            }\n            // if we didn't find a right row indicator column, then continue the search for the next barcode after the\n            // start pattern of the barcode just found.\n            if (vertices[2] != null) {\n                column = Math.trunc(vertices[2].getX());\n                row = Math.trunc(vertices[2].getY());\n            }\n            else {\n                column = Math.trunc(vertices[4].getX());\n                row = Math.trunc(vertices[4].getY());\n            }\n        }\n        return barcodeCoordinates;\n    };\n    /**\n     * Locate the vertices and the codewords area of a black blob using the Start\n     * and Stop patterns as locators.\n     *\n     * @param matrix the scanned barcode image.\n     * @return an array containing the vertices:\n     *           vertices[0] x, y top left barcode\n     *           vertices[1] x, y bottom left barcode\n     *           vertices[2] x, y top right barcode\n     *           vertices[3] x, y bottom right barcode\n     *           vertices[4] x, y top left codeword area\n     *           vertices[5] x, y bottom left codeword area\n     *           vertices[6] x, y top right codeword area\n     *           vertices[7] x, y bottom right codeword area\n     */\n    Detector.findVertices = function (matrix, startRow, startColumn) {\n        var height = matrix.getHeight();\n        var width = matrix.getWidth();\n        // const result = new ResultPoint[8];\n        var result = new Array(8);\n        Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.START_PATTERN), Detector.INDEXES_START_PATTERN);\n        if (result[4] != null) {\n            startColumn = Math.trunc(result[4].getX());\n            startRow = Math.trunc(result[4].getY());\n        }\n        Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.STOP_PATTERN), Detector.INDEXES_STOP_PATTERN);\n        return result;\n    };\n    Detector.copyToResult = function (result, tmpResult, destinationIndexes) {\n        for (var i = 0; i < destinationIndexes.length; i++) {\n            result[destinationIndexes[i]] = tmpResult[i];\n        }\n    };\n    Detector.findRowsWithPattern = function (matrix, height, width, startRow, startColumn, pattern) {\n        // const result = new ResultPoint[4];\n        var result = new Array(4);\n        var found = false;\n        var counters = new Int32Array(pattern.length);\n        for (; startRow < height; startRow += Detector.ROW_STEP) {\n            var loc = Detector.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);\n            if (loc != null) {\n                while (startRow > 0) {\n                    var previousRowLoc = Detector.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);\n                    if (previousRowLoc != null) {\n                        loc = previousRowLoc;\n                    }\n                    else {\n                        startRow++;\n                        break;\n                    }\n                }\n                result[0] = new ResultPoint_1.default(loc[0], startRow);\n                result[1] = new ResultPoint_1.default(loc[1], startRow);\n                found = true;\n                break;\n            }\n        }\n        var stopRow = startRow + 1;\n        // Last row of the current symbol that contains pattern\n        if (found) {\n            var skippedRowCount = 0;\n            var previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);\n            for (; stopRow < height; stopRow++) {\n                var loc = Detector.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters);\n                // a found pattern is only considered to belong to the same barcode if the start and end positions\n                // don't differ too much. Pattern drift should be not bigger than two for consecutive rows. With\n                // a higher number of skipped rows drift could be larger. To keep it simple for now, we allow a slightly\n                // larger drift and don't check for skipped rows.\n                if (loc != null &&\n                    Math.abs(previousRowLoc[0] - loc[0]) < Detector.MAX_PATTERN_DRIFT &&\n                    Math.abs(previousRowLoc[1] - loc[1]) < Detector.MAX_PATTERN_DRIFT) {\n                    previousRowLoc = loc;\n                    skippedRowCount = 0;\n                }\n                else {\n                    if (skippedRowCount > Detector.SKIPPED_ROW_COUNT_MAX) {\n                        break;\n                    }\n                    else {\n                        skippedRowCount++;\n                    }\n                }\n            }\n            stopRow -= skippedRowCount + 1;\n            result[2] = new ResultPoint_1.default(previousRowLoc[0], stopRow);\n            result[3] = new ResultPoint_1.default(previousRowLoc[1], stopRow);\n        }\n        if (stopRow - startRow < Detector.BARCODE_MIN_HEIGHT) {\n            Arrays_1.default.fill(result, null);\n        }\n        return result;\n    };\n    /**\n     * @param matrix row of black/white values to search\n     * @param column x position to start search\n     * @param row y position to start search\n     * @param width the number of pixels to search on this row\n     * @param pattern pattern of counts of number of black and white pixels that are\n     *                 being searched for as a pattern\n     * @param counters array of counters, as long as pattern, to re-use\n     * @return start/end horizontal offset of guard pattern, as an array of two ints.\n     */\n    Detector.findGuardPattern = function (matrix, column, row, width, whiteFirst, pattern, counters) {\n        Arrays_1.default.fillWithin(counters, 0, counters.length, 0);\n        var patternStart = column;\n        var pixelDrift = 0;\n        // if there are black pixels left of the current pixel shift to the left, but only for MAX_PIXEL_DRIFT pixels\n        while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector.MAX_PIXEL_DRIFT) {\n            patternStart--;\n        }\n        var x = patternStart;\n        var counterPosition = 0;\n        var patternLength = pattern.length;\n        for (var isWhite = whiteFirst; x < width; x++) {\n            var pixel = matrix.get(x, row);\n            if (pixel !== isWhite) {\n                counters[counterPosition]++;\n            }\n            else {\n                if (counterPosition === patternLength - 1) {\n                    if (Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n                        return new Int32Array([patternStart, x]);\n                    }\n                    patternStart += counters[0] + counters[1];\n                    System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n                    counters[counterPosition - 1] = 0;\n                    counters[counterPosition] = 0;\n                    counterPosition--;\n                }\n                else {\n                    counterPosition++;\n                }\n                counters[counterPosition] = 1;\n                isWhite = !isWhite;\n            }\n        }\n        if (counterPosition === patternLength - 1 &&\n            Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n            return new Int32Array([patternStart, x - 1]);\n        }\n        return null;\n    };\n    /**\n     * Determines how closely a set of observed counts of runs of black/white\n     * values matches a given target pattern. This is reported as the ratio of\n     * the total variance from the expected pattern proportions across all\n     * pattern elements, to the length of the pattern.\n     *\n     * @param counters observed counters\n     * @param pattern expected pattern\n     * @param maxIndividualVariance The most any counter can differ before we give up\n     * @return ratio of total variance between counters and pattern compared to total pattern size\n     */\n    Detector.patternMatchVariance = function (counters, pattern, maxIndividualVariance) {\n        var numCounters = counters.length;\n        var total = 0;\n        var patternLength = 0;\n        for (var i = 0; i < numCounters; i++) {\n            total += counters[i];\n            patternLength += pattern[i];\n        }\n        if (total < patternLength) {\n            // If we don't even have one pixel per unit of bar width, assume this\n            // is too small to reliably match, so fail:\n            return /*Float.POSITIVE_INFINITY*/ Infinity;\n        }\n        // We're going to fake floating-point math in integers. We just need to use more bits.\n        // Scale up patternLength so that intermediate values below like scaledCounter will have\n        // more \"significant digits\".\n        var unitBarWidth = total / patternLength;\n        maxIndividualVariance *= unitBarWidth;\n        var totalVariance = 0.0;\n        for (var x = 0; x < numCounters; x++) {\n            var counter = counters[x];\n            var scaledPattern = pattern[x] * unitBarWidth;\n            var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n            if (variance > maxIndividualVariance) {\n                return /*Float.POSITIVE_INFINITY*/ Infinity;\n            }\n            totalVariance += variance;\n        }\n        return totalVariance / total;\n    };\n    Detector.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);\n    Detector.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);\n    Detector.MAX_AVG_VARIANCE = 0.42;\n    Detector.MAX_INDIVIDUAL_VARIANCE = 0.8;\n    // B S B S B S B S Bar/Space pattern\n    // 11111111 0 1 0 1 0 1 000\n    Detector.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);\n    // 1111111 0 1 000 1 0 1 00 1\n    Detector.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);\n    Detector.MAX_PIXEL_DRIFT = 3;\n    Detector.MAX_PATTERN_DRIFT = 5;\n    // if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.\n    // if we set the value too high, then we might detect the start pattern from a neighbor barcode.\n    Detector.SKIPPED_ROW_COUNT_MAX = 25;\n    // A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least\n    // 9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.\n    Detector.ROW_STEP = 5;\n    Detector.BARCODE_MIN_HEIGHT = 10;\n    return Detector;\n}());\nexports.default = Detector;\n//# sourceMappingURL=Detector.js.map"]},"metadata":{},"sourceType":"script"}