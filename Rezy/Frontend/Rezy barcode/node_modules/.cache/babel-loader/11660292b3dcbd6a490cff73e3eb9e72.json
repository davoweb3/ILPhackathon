{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BitArray_1 = require(\"../../../common/BitArray\");\nvar BitArrayBuilder = /** @class */function () {\n  function BitArrayBuilder() {}\n  BitArrayBuilder.buildBitArray = function (pairs) {\n    var charNumber = pairs.length * 2 - 1;\n    if (pairs[pairs.length - 1].getRightChar() == null) {\n      charNumber -= 1;\n    }\n    var size = 12 * charNumber;\n    var binary = new BitArray_1.default(size);\n    var accPos = 0;\n    var firstPair = pairs[0];\n    var firstValue = firstPair.getRightChar().getValue();\n    for (var i = 11; i >= 0; --i) {\n      if ((firstValue & 1 << i) != 0) {\n        binary.set(accPos);\n      }\n      accPos++;\n    }\n    for (var i = 1; i < pairs.length; ++i) {\n      var currentPair = pairs[i];\n      var leftValue = currentPair.getLeftChar().getValue();\n      for (var j = 11; j >= 0; --j) {\n        if ((leftValue & 1 << j) != 0) {\n          binary.set(accPos);\n        }\n        accPos++;\n      }\n      if (currentPair.getRightChar() != null) {\n        var rightValue = currentPair.getRightChar().getValue();\n        for (var j = 11; j >= 0; --j) {\n          if ((rightValue & 1 << j) != 0) {\n            binary.set(accPos);\n          }\n          accPos++;\n        }\n      }\n    }\n    return binary;\n  };\n  return BitArrayBuilder;\n}();\nexports.default = BitArrayBuilder;","map":{"version":3,"sources":["../../../../../src/core/oned/rss/expanded/BitArrayBuilder.ts"],"names":[],"mappings":";;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,IAAA,eAAA,GAAA,aAAA,YAAA;EACE,SAAA,eAAA,CAAA,EAAA,CACA;EACQ,eAAA,CAAA,aAAa,GAArB,UAAsB,KAAyB,EAAA;IAC7C,IAAI,UAAU,GAAW,KAAK,CAAC,MAAM,GAAG,CAAC,GAAI,CAAC;IAC9C,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,IAAI,EAAE;MAClD,UAAU,IAAI,CAAC;IAChB;IAED,IAAI,IAAI,GAAU,EAAE,GAAG,UAAU;IAEjC,IAAI,MAAM,GAAG,IAAI,UAAA,CAAA,OAAQ,CAAC,IAAI,CAAC;IAC/B,IAAI,MAAM,GAAG,CAAC;IAEd,IAAK,SAAS,GAAgB,KAAK,CAAC,CAAC,CAAC;IACtC,IAAK,UAAU,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE;IACrD,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;MAC5B,IAAI,CAAC,UAAU,GAAI,CAAC,IAAI,CAAE,KAAK,CAAC,EAAE;QAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;MACnB;MACD,MAAM,EAAE;IACT;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;MACrC,IAAI,WAAW,GAAgB,KAAK,CAAC,CAAC,CAAC;MAEvC,IAAI,SAAS,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE;MACpD,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;QAC5B,IAAI,CAAC,SAAS,GAAI,CAAC,IAAI,CAAE,KAAK,CAAC,EAAE;UAC/B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;QACnB;QACD,MAAM,EAAE;MACT;MAED,IAAI,WAAW,CAAC,YAAY,EAAE,IAAI,IAAI,EAAE;QACtC,IAAI,UAAU,GAAG,WAAW,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE;QACtD,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;UAC5B,IAAI,CAAC,UAAU,GAAI,CAAC,IAAI,CAAE,KAAK,CAAC,EAAE;YAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;UACnB;UACD,MAAM,EAAE;QACT;MACF;IACF;IACD,OAAO,MAAM;EACf,CAAC;EAEH,OAAA,eAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BitArray_1 = require(\"../../../common/BitArray\");\nvar BitArrayBuilder = /** @class */ (function () {\n    function BitArrayBuilder() {\n    }\n    BitArrayBuilder.buildBitArray = function (pairs) {\n        var charNumber = (pairs.length * 2) - 1;\n        if (pairs[pairs.length - 1].getRightChar() == null) {\n            charNumber -= 1;\n        }\n        var size = 12 * charNumber;\n        var binary = new BitArray_1.default(size);\n        var accPos = 0;\n        var firstPair = pairs[0];\n        var firstValue = firstPair.getRightChar().getValue();\n        for (var i = 11; i >= 0; --i) {\n            if ((firstValue & (1 << i)) != 0) {\n                binary.set(accPos);\n            }\n            accPos++;\n        }\n        for (var i = 1; i < pairs.length; ++i) {\n            var currentPair = pairs[i];\n            var leftValue = currentPair.getLeftChar().getValue();\n            for (var j = 11; j >= 0; --j) {\n                if ((leftValue & (1 << j)) != 0) {\n                    binary.set(accPos);\n                }\n                accPos++;\n            }\n            if (currentPair.getRightChar() != null) {\n                var rightValue = currentPair.getRightChar().getValue();\n                for (var j = 11; j >= 0; --j) {\n                    if ((rightValue & (1 << j)) != 0) {\n                        binary.set(accPos);\n                    }\n                    accPos++;\n                }\n            }\n        }\n        return binary;\n    };\n    return BitArrayBuilder;\n}());\nexports.default = BitArrayBuilder;\n//# sourceMappingURL=BitArrayBuilder.js.map"]},"metadata":{},"sourceType":"script"}