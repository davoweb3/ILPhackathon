{"ast":null,"code":"var _s = $RefreshSig$();\nimport \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\nimport fs from 'fs'; // Import the fs module\n\n// const URL = \"https://backend-products-scan.onrender.com:3500\";\nconst URL = 'http://localhost:3500';\nfunction Scan() {\n  _s();\n  const initialData = products;\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [filteredData, setFilteredData] = useState(initialData);\n  let navigate = useNavigate();\n\n  /* const [open, setOpen] = useState(false);\n  const handleClose = () => {\n    postToArduino(\"1\");\n    setOpen(false);\n  }; */\n\n  // Define a function to save scanned barcode data to a JSON file\n  const saveScannedBarcode = barcodeData => {\n    const jsonData = {\n      barcode: barcodeData,\n      timestamp: new Date().toISOString()\n    };\n    fs.readFile('scanned_barcodes.json', 'utf8', (err, fileData) => {\n      if (!err) {\n        const existingData = JSON.parse(fileData);\n        existingData.push(jsonData);\n        fs.writeFile('scanned_barcodes.json', JSON.stringify(existingData, null, 2), err => {\n          if (err) {\n            console.error('Error writing to JSON file:', err);\n          }\n        });\n      }\n    });\n  };\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n  const handleErrorWebCam = error => {\n    console.log(error);\n  };\n  const handleScanWebCam = result => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n      saveScannedBarcode(resultText); // Save the scanned barcode data\n      parseAndSendToEndpoint(resultText);\n    }\n  };\n\n  // Rest of your code...\n\n  /*   return (\n      // JSX for your component...\n    ); */\n}\n_s(Scan, \"PEUUr5LbTKQAkccNbz/pXblmBNQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["ButtonStyle","ModalStyle","React","useState","QrReader","Grid","useNavigate","Barcode","BarcodeScannerComponent","products","fs","URL","Scan","_s","initialData","data","setData","producto","setProducto","filteredData","setFilteredData","navigate","saveScannedBarcode","barcodeData","jsonData","barcode","timestamp","Date","toISOString","readFile","err","fileData","existingData","JSON","parse","push","writeFile","stringify","console","error","handleAccept","postToArduino","setTimeout","setOpen","handleErrorWebCam","log","handleScanWebCam","result","resultText","toString","open","getProduct","parseAndSendToEndpoint","_c","$RefreshReg$"],"sources":["C:/Users/DAVOTRADE/Desktop/Rezy barcode/scanner/scanner/src/scan/Scan.js"],"sourcesContent":["import \"./Scan.css\";\nimport ButtonStyle from \"../components/button\";\nimport ModalStyle from \"../components/Modal\";\nimport React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { Grid } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport Barcode from \"react-barcode\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport products from '../products.json';\nimport fs from 'fs'; // Import the fs module\n\n// const URL = \"https://backend-products-scan.onrender.com:3500\";\nconst URL = 'http://localhost:3500';\n\nfunction Scan() {\n  const initialData = products\n  const [data, setData] = useState(\"No result\");\n  const [producto, setProducto] = useState({});\n  const [filteredData, setFilteredData] = useState(initialData);\n\n  let navigate = useNavigate();\n\n  /* const [open, setOpen] = useState(false);\n  const handleClose = () => {\n    postToArduino(\"1\");\n    setOpen(false);\n  }; */\n\n  // Define a function to save scanned barcode data to a JSON file\n  const saveScannedBarcode = (barcodeData) => {\n    const jsonData = {\n      barcode: barcodeData,\n      timestamp: new Date().toISOString(),\n    };\n    fs.readFile('scanned_barcodes.json', 'utf8', (err, fileData) => {\n      if (!err) {\n        const existingData = JSON.parse(fileData);\n        existingData.push(jsonData);\n        fs.writeFile('scanned_barcodes.json', JSON.stringify(existingData, null, 2), (err) => {\n          if (err) {\n            console.error('Error writing to JSON file:', err);\n          }\n        });\n      }\n    });\n  };\n\n  const handleAccept = () => {\n    postToArduino(\"1\");\n    setTimeout(function () {\n      postToArduino(\"0\");\n      setOpen(false);\n      navigate(\"/step3\");\n    }, 2000);\n  };\n\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  };\n\n  const handleScanWebCam = (result) => {\n    if (result) {\n      const resultText = result.toString();\n      setData(resultText);\n      if (!open) {\n        getProduct(resultText);\n      }\n      saveScannedBarcode(resultText); // Save the scanned barcode data\n      parseAndSendToEndpoint(resultText);\n    }\n  };\n\n  // Rest of your code...\n\n/*   return (\n    // JSX for your component...\n  ); */\n}\n\nexport default Scan;\n"],"mappings":";AAAA,OAAO,YAAY;AACnB,OAAOA,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,uBAAuB,MAAM,0BAA0B;AAC9D,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,EAAE,MAAM,IAAI,CAAC,CAAC;;AAErB;AACA,MAAMC,GAAG,GAAG,uBAAuB;AAEnC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,WAAW,GAAGL,QAAQ;EAC5B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,WAAW,CAAC;EAC7C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAACW,WAAW,CAAC;EAE7D,IAAIO,QAAQ,GAAGf,WAAW,EAAE;;EAE5B;AACF;AACA;AACA;AACA;;EAEE;EACA,MAAMgB,kBAAkB,GAAIC,WAAW,IAAK;IAC1C,MAAMC,QAAQ,GAAG;MACfC,OAAO,EAAEF,WAAW;MACpBG,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;IACnC,CAAC;IACDlB,EAAE,CAACmB,QAAQ,CAAC,uBAAuB,EAAE,MAAM,EAAE,CAACC,GAAG,EAAEC,QAAQ,KAAK;MAC9D,IAAI,CAACD,GAAG,EAAE;QACR,MAAME,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;QACzCC,YAAY,CAACG,IAAI,CAACX,QAAQ,CAAC;QAC3Bd,EAAE,CAAC0B,SAAS,CAAC,uBAAuB,EAAEH,IAAI,CAACI,SAAS,CAACL,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,EAAGF,GAAG,IAAK;UACpF,IAAIA,GAAG,EAAE;YACPQ,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAET,GAAG,CAAC;UACnD;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzBC,aAAa,CAAC,GAAG,CAAC;IAClBC,UAAU,CAAC,YAAY;MACrBD,aAAa,CAAC,GAAG,CAAC;MAClBE,OAAO,CAAC,KAAK,CAAC;MACdtB,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMuB,iBAAiB,GAAIL,KAAK,IAAK;IACnCD,OAAO,CAACO,GAAG,CAACN,KAAK,CAAC;EACpB,CAAC;EAED,MAAMO,gBAAgB,GAAIC,MAAM,IAAK;IACnC,IAAIA,MAAM,EAAE;MACV,MAAMC,UAAU,GAAGD,MAAM,CAACE,QAAQ,EAAE;MACpCjC,OAAO,CAACgC,UAAU,CAAC;MACnB,IAAI,CAACE,IAAI,EAAE;QACTC,UAAU,CAACH,UAAU,CAAC;MACxB;MACA1B,kBAAkB,CAAC0B,UAAU,CAAC,CAAC,CAAC;MAChCI,sBAAsB,CAACJ,UAAU,CAAC;IACpC;EACF,CAAC;;EAED;;EAEF;AACA;AACA;AACA;AAACnC,EAAA,CA/DQD,IAAI;EAAA,QAMIN,WAAW;AAAA;AAAA+C,EAAA,GANnBzC,IAAI;AAiEb,eAAeA,IAAI;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}