{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar InvertedLuminanceSource_1 = require(\"../core/InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"../core/LuminanceSource\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar HTMLCanvasElementLuminanceSource = /** @class */function (_super) {\n  __extends(HTMLCanvasElementLuminanceSource, _super);\n  function HTMLCanvasElementLuminanceSource(canvas) {\n    var _this = _super.call(this, canvas.width, canvas.height) || this;\n    _this.canvas = canvas;\n    _this.tempCanvasElement = null;\n    _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n    return _this;\n  }\n  HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\n    var imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n    return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n  };\n  HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\n    var grayscaleBuffer = new Uint8ClampedArray(width * height);\n    for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\n      var gray = void 0;\n      var alpha = imageBuffer[i + 3];\n      // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n      // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n      // barcode image. Force any such pixel to be white:\n      if (alpha === 0) {\n        gray = 0xFF;\n      } else {\n        var pixelR = imageBuffer[i];\n        var pixelG = imageBuffer[i + 1];\n        var pixelB = imageBuffer[i + 2];\n        // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n        // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n        // 0x200 >> 10 is 0.5, it implements rounding.\n        gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200 >> 10;\n      }\n      grayscaleBuffer[j] = gray;\n    }\n    return grayscaleBuffer;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n    var width = this.getWidth();\n    var start = y * width;\n    if (row === null) {\n      row = this.buffer.slice(start, start + width);\n    } else {\n      if (row.length < width) {\n        row = new Uint8ClampedArray(width);\n      }\n      // The underlying raster of image consists of bytes with the luminance values\n      // TODO: can avoid set/slice?\n      row.set(this.buffer.slice(start, start + width));\n    }\n    return row;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\n    return this.buffer;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    _super.prototype.crop.call(this, left, top, width, height);\n    return this;\n  };\n  /**\n   * This is always true, since the image is a gray-scale image.\n   *\n   * @return true\n   */\n  HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\n    return true;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\n    this.rotate(-90);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    this.rotate(-45);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\n    if (null === this.tempCanvasElement) {\n      var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n      tempCanvasElement.width = this.canvas.width;\n      tempCanvasElement.height = this.canvas.height;\n      this.tempCanvasElement = tempCanvasElement;\n    }\n    return this.tempCanvasElement;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\n    var tempCanvasElement = this.getTempCanvasElement();\n    var tempContext = tempCanvasElement.getContext('2d');\n    var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\n    // Calculate and set new dimensions for temp canvas\n    var width = this.canvas.width;\n    var height = this.canvas.height;\n    var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n    var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n    tempCanvasElement.width = newWidth;\n    tempCanvasElement.height = newHeight;\n    // Draw at center of temp canvas to prevent clipping of image data\n    tempContext.translate(newWidth / 2, newHeight / 2);\n    tempContext.rotate(angleRadians);\n    tempContext.drawImage(this.canvas, width / -2, height / -2);\n    this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n    return this;\n  };\n  HTMLCanvasElementLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n  HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n  return HTMLCanvasElementLuminanceSource;\n}(LuminanceSource_1.default);\nexports.HTMLCanvasElementLuminanceSource = HTMLCanvasElementLuminanceSource;","map":{"version":3,"sources":["../../src/browser/HTMLCanvasElementLuminanceSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InvertedLuminanceSource_1 = require(\"../core/InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"../core/LuminanceSource\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar HTMLCanvasElementLuminanceSource = /** @class */ (function (_super) {\n    __extends(HTMLCanvasElementLuminanceSource, _super);\n    function HTMLCanvasElementLuminanceSource(canvas) {\n        var _this = _super.call(this, canvas.width, canvas.height) || this;\n        _this.canvas = canvas;\n        _this.tempCanvasElement = null;\n        _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n        return _this;\n    }\n    HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\n        var imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n        return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n    };\n    HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\n        var grayscaleBuffer = new Uint8ClampedArray(width * height);\n        for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\n            var gray = void 0;\n            var alpha = imageBuffer[i + 3];\n            // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n            // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n            // barcode image. Force any such pixel to be white:\n            if (alpha === 0) {\n                gray = 0xFF;\n            }\n            else {\n                var pixelR = imageBuffer[i];\n                var pixelG = imageBuffer[i + 1];\n                var pixelB = imageBuffer[i + 2];\n                // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n                // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n                // 0x200 >> 10 is 0.5, it implements rounding.\n                gray = (306 * pixelR +\n                    601 * pixelG +\n                    117 * pixelB +\n                    0x200) >> 10;\n            }\n            grayscaleBuffer[j] = gray;\n        }\n        return grayscaleBuffer;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        var start = y * width;\n        if (row === null) {\n            row = this.buffer.slice(start, start + width);\n        }\n        else {\n            if (row.length < width) {\n                row = new Uint8ClampedArray(width);\n            }\n            // The underlying raster of image consists of bytes with the luminance values\n            // TODO: can avoid set/slice?\n            row.set(this.buffer.slice(start, start + width));\n        }\n        return row;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\n        return this.buffer;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        _super.prototype.crop.call(this, left, top, width, height);\n        return this;\n    };\n    /**\n     * This is always true, since the image is a gray-scale image.\n     *\n     * @return true\n     */\n    HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\n        return true;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\n        this.rotate(-90);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        this.rotate(-45);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\n        if (null === this.tempCanvasElement) {\n            var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n            tempCanvasElement.width = this.canvas.width;\n            tempCanvasElement.height = this.canvas.height;\n            this.tempCanvasElement = tempCanvasElement;\n        }\n        return this.tempCanvasElement;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\n        var tempCanvasElement = this.getTempCanvasElement();\n        var tempContext = tempCanvasElement.getContext('2d');\n        var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\n        // Calculate and set new dimensions for temp canvas\n        var width = this.canvas.width;\n        var height = this.canvas.height;\n        var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n        var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n        tempCanvasElement.width = newWidth;\n        tempCanvasElement.height = newHeight;\n        // Draw at center of temp canvas to prevent clipping of image data\n        tempContext.translate(newWidth / 2, newHeight / 2);\n        tempContext.rotate(angleRadians);\n        tempContext.drawImage(this.canvas, width / -2, height / -2);\n        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource_1.default(this);\n    };\n    HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n    return HTMLCanvasElementLuminanceSource;\n}(LuminanceSource_1.default));\nexports.HTMLCanvasElementLuminanceSource = HTMLCanvasElementLuminanceSource;\n//# sourceMappingURL=HTMLCanvasElementLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}