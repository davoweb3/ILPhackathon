{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DecodeHintType_1 = require(\"./DecodeHintType\");\nvar BarcodeFormat_1 = require(\"./BarcodeFormat\");\nvar QRCodeReader_1 = require(\"./qrcode/QRCodeReader\");\nvar AztecReader_1 = require(\"./aztec/AztecReader\");\nvar MultiFormatOneDReader_1 = require(\"./oned/MultiFormatOneDReader\");\nvar DataMatrixReader_1 = require(\"./datamatrix/DataMatrixReader\");\nvar NotFoundException_1 = require(\"./NotFoundException\");\nvar PDF417Reader_1 = require(\"./pdf417/PDF417Reader\");\nvar ReaderException_1 = require(\"./ReaderException\");\n/*namespace com.google.zxing {*/\n/**\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\n * can provide a hints object to request different behavior, for example only decoding QR codes.\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar MultiFormatReader = /** @class */function () {\n  function MultiFormatReader() {}\n  /**\n   * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\n   * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\n   * Use setHints() followed by decodeWithState() for continuous scan applications.\n   *\n   * @param image The pixel data to decode\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n  /*@Override*/\n  // public decode(image: BinaryBitmap): Result {\n  //   setHints(null)\n  //   return decodeInternal(image)\n  // }\n  /**\n   * Decode an image using the hints provided. Does not honor existing state.\n   *\n   * @param image The pixel data to decode\n   * @param hints The hints to use, clearing the previous state.\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n  /*@Override*/\n  MultiFormatReader.prototype.decode = function (image, hints) {\n    this.setHints(hints);\n    return this.decodeInternal(image);\n  };\n  /**\n   * Decode an image using the state set up by calling setHints() previously. Continuous scan\n   * clients will get a <b>large</b> speed increase by using this instead of decode().\n   *\n   * @param image The pixel data to decode\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n  MultiFormatReader.prototype.decodeWithState = function (image) {\n    // Make sure to set up the default state so we don't crash\n    if (this.readers === null || this.readers === undefined) {\n      this.setHints(null);\n    }\n    return this.decodeInternal(image);\n  };\n  /**\n   * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\n   * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\n   * is important for performance in continuous scan clients.\n   *\n   * @param hints The set of hints to use for subsequent calls to decode(image)\n   */\n  MultiFormatReader.prototype.setHints = function (hints) {\n    this.hints = hints;\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    /*@SuppressWarnings(\"unchecked\")*/\n    var formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\n    var readers = new Array();\n    if (formats !== null && formats !== undefined) {\n      var addOneDReader = formats.some(function (f) {\n        return f === BarcodeFormat_1.default.UPC_A || f === BarcodeFormat_1.default.UPC_E || f === BarcodeFormat_1.default.EAN_13 || f === BarcodeFormat_1.default.EAN_8 || f === BarcodeFormat_1.default.CODABAR || f === BarcodeFormat_1.default.CODE_39 || f === BarcodeFormat_1.default.CODE_93 || f === BarcodeFormat_1.default.CODE_128 || f === BarcodeFormat_1.default.ITF || f === BarcodeFormat_1.default.RSS_14 || f === BarcodeFormat_1.default.RSS_EXPANDED;\n      });\n      // Put 1D readers upfront in \"normal\" mode\n      // TYPESCRIPTPORT: TODO: uncomment below as they are ported\n      if (addOneDReader && !tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n      if (formats.includes(BarcodeFormat_1.default.QR_CODE)) {\n        readers.push(new QRCodeReader_1.default());\n      }\n      if (formats.includes(BarcodeFormat_1.default.DATA_MATRIX)) {\n        readers.push(new DataMatrixReader_1.default());\n      }\n      if (formats.includes(BarcodeFormat_1.default.AZTEC)) {\n        readers.push(new AztecReader_1.default());\n      }\n      if (formats.includes(BarcodeFormat_1.default.PDF_417)) {\n        readers.push(new PDF417Reader_1.default());\n      }\n      // if (formats.includes(BarcodeFormat.MAXICODE)) {\n      //    readers.push(new MaxiCodeReader())\n      // }\n      // At end in \"try harder\" mode\n      if (addOneDReader && tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n    if (readers.length === 0) {\n      if (!tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n      readers.push(new QRCodeReader_1.default());\n      readers.push(new DataMatrixReader_1.default());\n      readers.push(new AztecReader_1.default());\n      readers.push(new PDF417Reader_1.default());\n      // readers.push(new MaxiCodeReader())\n      if (tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n    this.readers = readers; // .toArray(new Reader[readers.size()])\n  };\n  /*@Override*/\n  MultiFormatReader.prototype.reset = function () {\n    var e_1, _a;\n    if (this.readers !== null) {\n      try {\n        for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var reader = _c.value;\n          reader.reset();\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * @throws NotFoundException\n   */\n  MultiFormatReader.prototype.decodeInternal = function (image) {\n    var e_2, _a;\n    if (this.readers === null) {\n      throw new ReaderException_1.default('No readers where selected, nothing can be read.');\n    }\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n        // Trying to decode with ${reader} reader.\n        try {\n          return reader.decode(image, this.hints);\n        } catch (ex) {\n          if (ex instanceof ReaderException_1.default) {\n            continue;\n          }\n          // Bad Exception.\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    throw new NotFoundException_1.default('No MultiFormat Readers were able to detect the code.');\n  };\n  return MultiFormatReader;\n}();\nexports.default = MultiFormatReader;","map":{"version":3,"sources":["../../src/core/MultiFormatReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DecodeHintType_1 = require(\"./DecodeHintType\");\nvar BarcodeFormat_1 = require(\"./BarcodeFormat\");\nvar QRCodeReader_1 = require(\"./qrcode/QRCodeReader\");\nvar AztecReader_1 = require(\"./aztec/AztecReader\");\nvar MultiFormatOneDReader_1 = require(\"./oned/MultiFormatOneDReader\");\nvar DataMatrixReader_1 = require(\"./datamatrix/DataMatrixReader\");\nvar NotFoundException_1 = require(\"./NotFoundException\");\nvar PDF417Reader_1 = require(\"./pdf417/PDF417Reader\");\nvar ReaderException_1 = require(\"./ReaderException\");\n/*namespace com.google.zxing {*/\n/**\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\n * can provide a hints object to request different behavior, for example only decoding QR codes.\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar MultiFormatReader = /** @class */ (function () {\n    function MultiFormatReader() {\n    }\n    /**\n     * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\n     * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\n     * Use setHints() followed by decodeWithState() for continuous scan applications.\n     *\n     * @param image The pixel data to decode\n     * @return The contents of the image\n     *\n     * @throws NotFoundException Any errors which occurred\n     */\n    /*@Override*/\n    // public decode(image: BinaryBitmap): Result {\n    //   setHints(null)\n    //   return decodeInternal(image)\n    // }\n    /**\n     * Decode an image using the hints provided. Does not honor existing state.\n     *\n     * @param image The pixel data to decode\n     * @param hints The hints to use, clearing the previous state.\n     * @return The contents of the image\n     *\n     * @throws NotFoundException Any errors which occurred\n     */\n    /*@Override*/\n    MultiFormatReader.prototype.decode = function (image, hints) {\n        this.setHints(hints);\n        return this.decodeInternal(image);\n    };\n    /**\n     * Decode an image using the state set up by calling setHints() previously. Continuous scan\n     * clients will get a <b>large</b> speed increase by using this instead of decode().\n     *\n     * @param image The pixel data to decode\n     * @return The contents of the image\n     *\n     * @throws NotFoundException Any errors which occurred\n     */\n    MultiFormatReader.prototype.decodeWithState = function (image) {\n        // Make sure to set up the default state so we don't crash\n        if (this.readers === null || this.readers === undefined) {\n            this.setHints(null);\n        }\n        return this.decodeInternal(image);\n    };\n    /**\n     * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\n     * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\n     * is important for performance in continuous scan clients.\n     *\n     * @param hints The set of hints to use for subsequent calls to decode(image)\n     */\n    MultiFormatReader.prototype.setHints = function (hints) {\n        this.hints = hints;\n        var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n        /*@SuppressWarnings(\"unchecked\")*/\n        var formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\n        var readers = new Array();\n        if (formats !== null && formats !== undefined) {\n            var addOneDReader = formats.some(function (f) {\n                return f === BarcodeFormat_1.default.UPC_A ||\n                    f === BarcodeFormat_1.default.UPC_E ||\n                    f === BarcodeFormat_1.default.EAN_13 ||\n                    f === BarcodeFormat_1.default.EAN_8 ||\n                    f === BarcodeFormat_1.default.CODABAR ||\n                    f === BarcodeFormat_1.default.CODE_39 ||\n                    f === BarcodeFormat_1.default.CODE_93 ||\n                    f === BarcodeFormat_1.default.CODE_128 ||\n                    f === BarcodeFormat_1.default.ITF ||\n                    f === BarcodeFormat_1.default.RSS_14 ||\n                    f === BarcodeFormat_1.default.RSS_EXPANDED;\n            });\n            // Put 1D readers upfront in \"normal\" mode\n            // TYPESCRIPTPORT: TODO: uncomment below as they are ported\n            if (addOneDReader && !tryHarder) {\n                readers.push(new MultiFormatOneDReader_1.default(hints));\n            }\n            if (formats.includes(BarcodeFormat_1.default.QR_CODE)) {\n                readers.push(new QRCodeReader_1.default());\n            }\n            if (formats.includes(BarcodeFormat_1.default.DATA_MATRIX)) {\n                readers.push(new DataMatrixReader_1.default());\n            }\n            if (formats.includes(BarcodeFormat_1.default.AZTEC)) {\n                readers.push(new AztecReader_1.default());\n            }\n            if (formats.includes(BarcodeFormat_1.default.PDF_417)) {\n                readers.push(new PDF417Reader_1.default());\n            }\n            // if (formats.includes(BarcodeFormat.MAXICODE)) {\n            //    readers.push(new MaxiCodeReader())\n            // }\n            // At end in \"try harder\" mode\n            if (addOneDReader && tryHarder) {\n                readers.push(new MultiFormatOneDReader_1.default(hints));\n            }\n        }\n        if (readers.length === 0) {\n            if (!tryHarder) {\n                readers.push(new MultiFormatOneDReader_1.default(hints));\n            }\n            readers.push(new QRCodeReader_1.default());\n            readers.push(new DataMatrixReader_1.default());\n            readers.push(new AztecReader_1.default());\n            readers.push(new PDF417Reader_1.default());\n            // readers.push(new MaxiCodeReader())\n            if (tryHarder) {\n                readers.push(new MultiFormatOneDReader_1.default(hints));\n            }\n        }\n        this.readers = readers; // .toArray(new Reader[readers.size()])\n    };\n    /*@Override*/\n    MultiFormatReader.prototype.reset = function () {\n        var e_1, _a;\n        if (this.readers !== null) {\n            try {\n                for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var reader = _c.value;\n                    reader.reset();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n    };\n    /**\n     * @throws NotFoundException\n     */\n    MultiFormatReader.prototype.decodeInternal = function (image) {\n        var e_2, _a;\n        if (this.readers === null) {\n            throw new ReaderException_1.default('No readers where selected, nothing can be read.');\n        }\n        try {\n            for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var reader = _c.value;\n                // Trying to decode with ${reader} reader.\n                try {\n                    return reader.decode(image, this.hints);\n                }\n                catch (ex) {\n                    if (ex instanceof ReaderException_1.default) {\n                        continue;\n                    }\n                    // Bad Exception.\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        throw new NotFoundException_1.default('No MultiFormat Readers were able to detect the code.');\n    };\n    return MultiFormatReader;\n}());\nexports.default = MultiFormatReader;\n//# sourceMappingURL=MultiFormatReader.js.map"]},"metadata":{},"sourceType":"script"}