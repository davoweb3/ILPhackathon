{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EncodeHintType_1 = require(\"../core/EncodeHintType\");\nvar Encoder_1 = require(\"../core/qrcode/encoder/Encoder\");\nvar ErrorCorrectionLevel_1 = require(\"../core/qrcode/decoder/ErrorCorrectionLevel\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../core/IllegalStateException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar BrowserQRCodeSvgWriter = /** @class */function () {\n  function BrowserQRCodeSvgWriter() {}\n  /**\n   * Writes and renders a QRCode SVG element.\n   *\n   * @param contents\n   * @param width\n   * @param height\n   * @param hints\n   */\n  BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    }\n    // if (format != BarcodeFormat.QR_CODE) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\n   * Renders the result and then appends it to the DOM.\n   */\n  BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    if (typeof containerElement === 'string') {\n      containerElement = document.querySelector(containerElement);\n    }\n    var svgElement = this.write(contents, width, height, hints);\n    if (containerElement) containerElement.appendChild(svgElement);\n  };\n  /**\n   * Note that the input matrix uses 0 == white, 1 == black.\n   * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n   */\n  BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n    var input = code.getMatrix();\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n    // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n    return svgElement;\n  };\n  /**\n   * Creates a SVG element.\n   *\n   * @param w SVG's width attribute\n   * @param h SVG's height attribute\n   */\n  BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n    svgElement.setAttributeNS(null, 'height', w.toString());\n    svgElement.setAttributeNS(null, 'width', h.toString());\n    return svgElement;\n  };\n  /**\n   * Creates a SVG rect element.\n   *\n   * @param x Element's x coordinate\n   * @param y Element's y coordinate\n   * @param w Element's width attribute\n   * @param h Element's height attribute\n   */\n  BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n    rect.setAttributeNS(null, 'x', x.toString());\n    rect.setAttributeNS(null, 'y', y.toString());\n    rect.setAttributeNS(null, 'height', w.toString());\n    rect.setAttributeNS(null, 'width', h.toString());\n    rect.setAttributeNS(null, 'fill', '#000000');\n    return rect;\n  };\n  BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  /**\n   * SVG markup NameSpace\n   */\n  BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n  return BrowserQRCodeSvgWriter;\n}();\nexports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;","map":{"version":3,"sources":["../../src/browser/BrowserQRCodeSvgWriter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EncodeHintType_1 = require(\"../core/EncodeHintType\");\nvar Encoder_1 = require(\"../core/qrcode/encoder/Encoder\");\nvar ErrorCorrectionLevel_1 = require(\"../core/qrcode/decoder/ErrorCorrectionLevel\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../core/IllegalStateException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar BrowserQRCodeSvgWriter = /** @class */ (function () {\n    function BrowserQRCodeSvgWriter() {\n    }\n    /**\n     * Writes and renders a QRCode SVG element.\n     *\n     * @param contents\n     * @param width\n     * @param height\n     * @param hints\n     */\n    BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n        if (hints === void 0) { hints = null; }\n        if (contents.length === 0) {\n            throw new IllegalArgumentException_1.default('Found empty contents');\n        }\n        // if (format != BarcodeFormat.QR_CODE) {\n        //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n        // }\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException_1.default('Requested dimensions are too small: ' + width + 'x' + height);\n        }\n        var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n        var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n        if (hints !== null) {\n            if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n                errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n            }\n            if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n                quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n            }\n        }\n        var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n        return this.renderResult(code, width, height, quietZone);\n    };\n    /**\n     * Renders the result and then appends it to the DOM.\n     */\n    BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n        if (hints === void 0) { hints = null; }\n        if (typeof containerElement === 'string') {\n            containerElement = document.querySelector(containerElement);\n        }\n        var svgElement = this.write(contents, width, height, hints);\n        if (containerElement)\n            containerElement.appendChild(svgElement);\n    };\n    /**\n     * Note that the input matrix uses 0 == white, 1 == black.\n     * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n     */\n    BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n        var input = code.getMatrix();\n        if (input === null) {\n            throw new IllegalStateException_1.default();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var qrWidth = inputWidth + (quietZone * 2);\n        var qrHeight = inputHeight + (quietZone * 2);\n        var outputWidth = Math.max(width, qrWidth);\n        var outputHeight = Math.max(height, qrHeight);\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n        var svgElement = this.createSVGElement(outputWidth, outputHeight);\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY) === 1) {\n                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n                    svgElement.appendChild(svgRectElement);\n                }\n            }\n        }\n        return svgElement;\n    };\n    /**\n     * Creates a SVG element.\n     *\n     * @param w SVG's width attribute\n     * @param h SVG's height attribute\n     */\n    BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n        var svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n        svgElement.setAttributeNS(null, 'height', w.toString());\n        svgElement.setAttributeNS(null, 'width', h.toString());\n        return svgElement;\n    };\n    /**\n     * Creates a SVG rect element.\n     *\n     * @param x Element's x coordinate\n     * @param y Element's y coordinate\n     * @param w Element's width attribute\n     * @param h Element's height attribute\n     */\n    BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n        var rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'x', x.toString());\n        rect.setAttributeNS(null, 'y', y.toString());\n        rect.setAttributeNS(null, 'height', w.toString());\n        rect.setAttributeNS(null, 'width', h.toString());\n        rect.setAttributeNS(null, 'fill', '#000000');\n        return rect;\n    };\n    BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n    /**\n     * SVG markup NameSpace\n     */\n    BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n    return BrowserQRCodeSvgWriter;\n}());\nexports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;\n//# sourceMappingURL=BrowserQRCodeSvgWriter.js.map"]},"metadata":{},"sourceType":"script"}