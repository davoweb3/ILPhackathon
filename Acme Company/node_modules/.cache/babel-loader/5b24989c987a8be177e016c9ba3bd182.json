{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\nvar FormatInformation_1 = require(\"./FormatInformation\");\nvar ECBlocks_1 = require(\"./ECBlocks\");\nvar ECB_1 = require(\"./ECB\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * See ISO 18004:2006 Annex D\n *\n * @author Sean Owen\n */\nvar Version = /** @class */function () {\n  function Version(versionNumber /*int*/, alignmentPatternCenters) {\n    var e_1, _a;\n    var ecBlocks = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      ecBlocks[_i - 2] = arguments[_i];\n    }\n    this.versionNumber = versionNumber;\n    this.alignmentPatternCenters = alignmentPatternCenters;\n    this.ecBlocks = ecBlocks;\n    var total = 0;\n    var ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\n    var ecbArray = ecBlocks[0].getECBlocks();\n    try {\n      for (var ecbArray_1 = __values(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {\n        var ecBlock = ecbArray_1_1.value;\n        total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecbArray_1_1 && !ecbArray_1_1.done && (_a = ecbArray_1.return)) _a.call(ecbArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    this.totalCodewords = total;\n  }\n  Version.prototype.getVersionNumber = function () {\n    return this.versionNumber;\n  };\n  Version.prototype.getAlignmentPatternCenters = function () {\n    return this.alignmentPatternCenters;\n  };\n  Version.prototype.getTotalCodewords = function () {\n    return this.totalCodewords;\n  };\n  Version.prototype.getDimensionForVersion = function () {\n    return 17 + 4 * this.versionNumber;\n  };\n  Version.prototype.getECBlocksForLevel = function (ecLevel) {\n    return this.ecBlocks[ecLevel.getValue()];\n    // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\n    // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\n  };\n  /**\n   * <p>Deduces version information purely from QR Code dimensions.</p>\n   *\n   * @param dimension dimension in modules\n   * @return Version for a QR Code of that dimension\n   * @throws FormatException if dimension is not 1 mod 4\n   */\n  Version.getProvisionalVersionForDimension = function (dimension /*int*/) {\n    if (dimension % 4 !== 1) {\n      throw new FormatException_1.default();\n    }\n    try {\n      return this.getVersionForNumber((dimension - 17) / 4);\n    } catch (ignored /*: IllegalArgumentException*/) {\n      throw new FormatException_1.default();\n    }\n  };\n  Version.getVersionForNumber = function (versionNumber /*int*/) {\n    if (versionNumber < 1 || versionNumber > 40) {\n      throw new IllegalArgumentException_1.default();\n    }\n    return Version.VERSIONS[versionNumber - 1];\n  };\n  Version.decodeVersionInformation = function (versionBits /*int*/) {\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestVersion = 0;\n    for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {\n      var targetVersion = Version.VERSION_DECODE_INFO[i];\n      // Do the version info bits match exactly? done.\n      if (targetVersion === versionBits) {\n        return Version.getVersionForNumber(i + 7);\n      }\n      // Otherwise see if this is the closest to a real version info bit string\n      // we have seen so far\n      var bitsDifference = FormatInformation_1.default.numBitsDiffering(versionBits, targetVersion);\n      if (bitsDifference < bestDifference) {\n        bestVersion = i + 7;\n        bestDifference = bitsDifference;\n      }\n    }\n    // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n    if (bestDifference <= 3) {\n      return Version.getVersionForNumber(bestVersion);\n    }\n    // If we didn't find a close enough match, fail\n    return null;\n  };\n  /**\n   * See ISO 18004:2006 Annex E\n   */\n  Version.prototype.buildFunctionPattern = function () {\n    var dimension = this.getDimensionForVersion();\n    var bitMatrix = new BitMatrix_1.default(dimension);\n    // Top left finder pattern + separator + format\n    bitMatrix.setRegion(0, 0, 9, 9);\n    // Top right finder pattern + separator + format\n    bitMatrix.setRegion(dimension - 8, 0, 8, 9);\n    // Bottom left finder pattern + separator + format\n    bitMatrix.setRegion(0, dimension - 8, 9, 8);\n    // Alignment patterns\n    var max = this.alignmentPatternCenters.length;\n    for (var x = 0; x < max; x++) {\n      var i = this.alignmentPatternCenters[x] - 2;\n      for (var y = 0; y < max; y++) {\n        if (x === 0 && (y === 0 || y === max - 1) || x === max - 1 && y === 0) {\n          // No alignment patterns near the three finder patterns\n          continue;\n        }\n        bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\n      }\n    }\n    // Vertical timing pattern\n    bitMatrix.setRegion(6, 9, 1, dimension - 17);\n    // Horizontal timing pattern\n    bitMatrix.setRegion(9, 6, dimension - 17, 1);\n    if (this.versionNumber > 6) {\n      // Version info, top right\n      bitMatrix.setRegion(dimension - 11, 0, 3, 6);\n      // Version info, bottom left\n      bitMatrix.setRegion(0, dimension - 11, 6, 3);\n    }\n    return bitMatrix;\n  };\n  /*@Override*/\n  Version.prototype.toString = function () {\n    return '' + this.versionNumber;\n  };\n  /**\n     * See ISO 18004:2006 Annex D.\n     * Element i represents the raw version bits that specify version i + 7\n     */\n  Version.VERSION_DECODE_INFO = Int32Array.from([0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB, 0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69]);\n  /**\n     * See ISO 18004:2006 6.5.1 Table 9\n     */\n  Version.VERSIONS = [new Version(1, new Int32Array(0), new ECBlocks_1.default(7, new ECB_1.default(1, 19)), new ECBlocks_1.default(10, new ECB_1.default(1, 16)), new ECBlocks_1.default(13, new ECB_1.default(1, 13)), new ECBlocks_1.default(17, new ECB_1.default(1, 9))), new Version(2, Int32Array.from([6, 18]), new ECBlocks_1.default(10, new ECB_1.default(1, 34)), new ECBlocks_1.default(16, new ECB_1.default(1, 28)), new ECBlocks_1.default(22, new ECB_1.default(1, 22)), new ECBlocks_1.default(28, new ECB_1.default(1, 16))), new Version(3, Int32Array.from([6, 22]), new ECBlocks_1.default(15, new ECB_1.default(1, 55)), new ECBlocks_1.default(26, new ECB_1.default(1, 44)), new ECBlocks_1.default(18, new ECB_1.default(2, 17)), new ECBlocks_1.default(22, new ECB_1.default(2, 13))), new Version(4, Int32Array.from([6, 26]), new ECBlocks_1.default(20, new ECB_1.default(1, 80)), new ECBlocks_1.default(18, new ECB_1.default(2, 32)), new ECBlocks_1.default(26, new ECB_1.default(2, 24)), new ECBlocks_1.default(16, new ECB_1.default(4, 9))), new Version(5, Int32Array.from([6, 30]), new ECBlocks_1.default(26, new ECB_1.default(1, 108)), new ECBlocks_1.default(24, new ECB_1.default(2, 43)), new ECBlocks_1.default(18, new ECB_1.default(2, 15), new ECB_1.default(2, 16)), new ECBlocks_1.default(22, new ECB_1.default(2, 11), new ECB_1.default(2, 12))), new Version(6, Int32Array.from([6, 34]), new ECBlocks_1.default(18, new ECB_1.default(2, 68)), new ECBlocks_1.default(16, new ECB_1.default(4, 27)), new ECBlocks_1.default(24, new ECB_1.default(4, 19)), new ECBlocks_1.default(28, new ECB_1.default(4, 15))), new Version(7, Int32Array.from([6, 22, 38]), new ECBlocks_1.default(20, new ECB_1.default(2, 78)), new ECBlocks_1.default(18, new ECB_1.default(4, 31)), new ECBlocks_1.default(18, new ECB_1.default(2, 14), new ECB_1.default(4, 15)), new ECBlocks_1.default(26, new ECB_1.default(4, 13), new ECB_1.default(1, 14))), new Version(8, Int32Array.from([6, 24, 42]), new ECBlocks_1.default(24, new ECB_1.default(2, 97)), new ECBlocks_1.default(22, new ECB_1.default(2, 38), new ECB_1.default(2, 39)), new ECBlocks_1.default(22, new ECB_1.default(4, 18), new ECB_1.default(2, 19)), new ECBlocks_1.default(26, new ECB_1.default(4, 14), new ECB_1.default(2, 15))), new Version(9, Int32Array.from([6, 26, 46]), new ECBlocks_1.default(30, new ECB_1.default(2, 116)), new ECBlocks_1.default(22, new ECB_1.default(3, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(20, new ECB_1.default(4, 16), new ECB_1.default(4, 17)), new ECBlocks_1.default(24, new ECB_1.default(4, 12), new ECB_1.default(4, 13))), new Version(10, Int32Array.from([6, 28, 50]), new ECBlocks_1.default(18, new ECB_1.default(2, 68), new ECB_1.default(2, 69)), new ECBlocks_1.default(26, new ECB_1.default(4, 43), new ECB_1.default(1, 44)), new ECBlocks_1.default(24, new ECB_1.default(6, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(28, new ECB_1.default(6, 15), new ECB_1.default(2, 16))), new Version(11, Int32Array.from([6, 30, 54]), new ECBlocks_1.default(20, new ECB_1.default(4, 81)), new ECBlocks_1.default(30, new ECB_1.default(1, 50), new ECB_1.default(4, 51)), new ECBlocks_1.default(28, new ECB_1.default(4, 22), new ECB_1.default(4, 23)), new ECBlocks_1.default(24, new ECB_1.default(3, 12), new ECB_1.default(8, 13))), new Version(12, Int32Array.from([6, 32, 58]), new ECBlocks_1.default(24, new ECB_1.default(2, 92), new ECB_1.default(2, 93)), new ECBlocks_1.default(22, new ECB_1.default(6, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(26, new ECB_1.default(4, 20), new ECB_1.default(6, 21)), new ECBlocks_1.default(28, new ECB_1.default(7, 14), new ECB_1.default(4, 15))), new Version(13, Int32Array.from([6, 34, 62]), new ECBlocks_1.default(26, new ECB_1.default(4, 107)), new ECBlocks_1.default(22, new ECB_1.default(8, 37), new ECB_1.default(1, 38)), new ECBlocks_1.default(24, new ECB_1.default(8, 20), new ECB_1.default(4, 21)), new ECBlocks_1.default(22, new ECB_1.default(12, 11), new ECB_1.default(4, 12))), new Version(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks_1.default(30, new ECB_1.default(3, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(24, new ECB_1.default(4, 40), new ECB_1.default(5, 41)), new ECBlocks_1.default(20, new ECB_1.default(11, 16), new ECB_1.default(5, 17)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(5, 13))), new Version(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks_1.default(22, new ECB_1.default(5, 87), new ECB_1.default(1, 88)), new ECBlocks_1.default(24, new ECB_1.default(5, 41), new ECB_1.default(5, 42)), new ECBlocks_1.default(30, new ECB_1.default(5, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(7, 13))), new Version(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks_1.default(24, new ECB_1.default(5, 98), new ECB_1.default(1, 99)), new ECBlocks_1.default(28, new ECB_1.default(7, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(24, new ECB_1.default(15, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(30, new ECB_1.default(3, 15), new ECB_1.default(13, 16))), new Version(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks_1.default(28, new ECB_1.default(1, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(1, 47)), new ECBlocks_1.default(28, new ECB_1.default(1, 22), new ECB_1.default(15, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(17, 15))), new Version(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks_1.default(30, new ECB_1.default(5, 120), new ECB_1.default(1, 121)), new ECBlocks_1.default(26, new ECB_1.default(9, 43), new ECB_1.default(4, 44)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(1, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(19, 15))), new Version(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks_1.default(28, new ECB_1.default(3, 113), new ECB_1.default(4, 114)), new ECBlocks_1.default(26, new ECB_1.default(3, 44), new ECB_1.default(11, 45)), new ECBlocks_1.default(26, new ECB_1.default(17, 21), new ECB_1.default(4, 22)), new ECBlocks_1.default(26, new ECB_1.default(9, 13), new ECB_1.default(16, 14))), new Version(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks_1.default(28, new ECB_1.default(3, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(26, new ECB_1.default(3, 41), new ECB_1.default(13, 42)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(5, 25)), new ECBlocks_1.default(28, new ECB_1.default(15, 15), new ECB_1.default(10, 16))), new Version(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks_1.default(28, new ECB_1.default(4, 116), new ECB_1.default(4, 117)), new ECBlocks_1.default(26, new ECB_1.default(17, 42)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(19, 16), new ECB_1.default(6, 17))), new Version(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks_1.default(28, new ECB_1.default(2, 111), new ECB_1.default(7, 112)), new ECBlocks_1.default(28, new ECB_1.default(17, 46)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(24, new ECB_1.default(34, 13))), new Version(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks_1.default(30, new ECB_1.default(4, 121), new ECB_1.default(5, 122)), new ECBlocks_1.default(28, new ECB_1.default(4, 47), new ECB_1.default(14, 48)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(16, 15), new ECB_1.default(14, 16))), new Version(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks_1.default(30, new ECB_1.default(6, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(6, 45), new ECB_1.default(14, 46)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(30, new ECB_1.default(30, 16), new ECB_1.default(2, 17))), new Version(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks_1.default(26, new ECB_1.default(8, 106), new ECB_1.default(4, 107)), new ECBlocks_1.default(28, new ECB_1.default(8, 47), new ECB_1.default(13, 48)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(13, 16))), new Version(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks_1.default(28, new ECB_1.default(10, 114), new ECB_1.default(2, 115)), new ECBlocks_1.default(28, new ECB_1.default(19, 46), new ECB_1.default(4, 47)), new ECBlocks_1.default(28, new ECB_1.default(28, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(33, 16), new ECB_1.default(4, 17))), new Version(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks_1.default(30, new ECB_1.default(8, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(22, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(30, new ECB_1.default(8, 23), new ECB_1.default(26, 24)), new ECBlocks_1.default(30, new ECB_1.default(12, 15), new ECB_1.default(28, 16))), new Version(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks_1.default(30, new ECB_1.default(3, 117), new ECB_1.default(10, 118)), new ECBlocks_1.default(28, new ECB_1.default(3, 45), new ECB_1.default(23, 46)), new ECBlocks_1.default(30, new ECB_1.default(4, 24), new ECB_1.default(31, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(31, 16))), new Version(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks_1.default(30, new ECB_1.default(7, 116), new ECB_1.default(7, 117)), new ECBlocks_1.default(28, new ECB_1.default(21, 45), new ECB_1.default(7, 46)), new ECBlocks_1.default(30, new ECB_1.default(1, 23), new ECB_1.default(37, 24)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(26, 16))), new Version(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks_1.default(30, new ECB_1.default(5, 115), new ECB_1.default(10, 116)), new ECBlocks_1.default(28, new ECB_1.default(19, 47), new ECB_1.default(10, 48)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(25, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(25, 16))), new Version(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(3, 116)), new ECBlocks_1.default(28, new ECB_1.default(2, 46), new ECB_1.default(29, 47)), new ECBlocks_1.default(30, new ECB_1.default(42, 24), new ECB_1.default(1, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(28, 16))), new Version(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks_1.default(30, new ECB_1.default(17, 115)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(10, 24), new ECB_1.default(35, 25)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(35, 16))), new Version(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks_1.default(30, new ECB_1.default(17, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(21, 47)), new ECBlocks_1.default(30, new ECB_1.default(29, 24), new ECB_1.default(19, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(46, 16))), new Version(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(6, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(44, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(30, new ECB_1.default(59, 16), new ECB_1.default(1, 17))), new Version(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks_1.default(30, new ECB_1.default(12, 121), new ECB_1.default(7, 122)), new ECBlocks_1.default(28, new ECB_1.default(12, 47), new ECB_1.default(26, 48)), new ECBlocks_1.default(30, new ECB_1.default(39, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(41, 16))), new Version(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks_1.default(30, new ECB_1.default(6, 121), new ECB_1.default(14, 122)), new ECBlocks_1.default(28, new ECB_1.default(6, 47), new ECB_1.default(34, 48)), new ECBlocks_1.default(30, new ECB_1.default(46, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(2, 15), new ECB_1.default(64, 16))), new Version(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks_1.default(30, new ECB_1.default(17, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(29, 46), new ECB_1.default(14, 47)), new ECBlocks_1.default(30, new ECB_1.default(49, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(24, 15), new ECB_1.default(46, 16))), new Version(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks_1.default(30, new ECB_1.default(4, 122), new ECB_1.default(18, 123)), new ECBlocks_1.default(28, new ECB_1.default(13, 46), new ECB_1.default(32, 47)), new ECBlocks_1.default(30, new ECB_1.default(48, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(42, 15), new ECB_1.default(32, 16))), new Version(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks_1.default(30, new ECB_1.default(20, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(40, 47), new ECB_1.default(7, 48)), new ECBlocks_1.default(30, new ECB_1.default(43, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(10, 15), new ECB_1.default(67, 16))), new Version(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks_1.default(30, new ECB_1.default(19, 118), new ECB_1.default(6, 119)), new ECBlocks_1.default(28, new ECB_1.default(18, 47), new ECB_1.default(31, 48)), new ECBlocks_1.default(30, new ECB_1.default(34, 24), new ECB_1.default(34, 25)), new ECBlocks_1.default(30, new ECB_1.default(20, 15), new ECB_1.default(61, 16)))];\n  return Version;\n}();\nexports.default = Version;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/Version.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\nvar FormatInformation_1 = require(\"./FormatInformation\");\nvar ECBlocks_1 = require(\"./ECBlocks\");\nvar ECB_1 = require(\"./ECB\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * See ISO 18004:2006 Annex D\n *\n * @author Sean Owen\n */\nvar Version = /** @class */ (function () {\n    function Version(versionNumber /*int*/, alignmentPatternCenters) {\n        var e_1, _a;\n        var ecBlocks = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            ecBlocks[_i - 2] = arguments[_i];\n        }\n        this.versionNumber = versionNumber;\n        this.alignmentPatternCenters = alignmentPatternCenters;\n        this.ecBlocks = ecBlocks;\n        var total = 0;\n        var ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\n        var ecbArray = ecBlocks[0].getECBlocks();\n        try {\n            for (var ecbArray_1 = __values(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {\n                var ecBlock = ecbArray_1_1.value;\n                total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecbArray_1_1 && !ecbArray_1_1.done && (_a = ecbArray_1.return)) _a.call(ecbArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.totalCodewords = total;\n    }\n    Version.prototype.getVersionNumber = function () {\n        return this.versionNumber;\n    };\n    Version.prototype.getAlignmentPatternCenters = function () {\n        return this.alignmentPatternCenters;\n    };\n    Version.prototype.getTotalCodewords = function () {\n        return this.totalCodewords;\n    };\n    Version.prototype.getDimensionForVersion = function () {\n        return 17 + 4 * this.versionNumber;\n    };\n    Version.prototype.getECBlocksForLevel = function (ecLevel) {\n        return this.ecBlocks[ecLevel.getValue()];\n        // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\n        // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\n    };\n    /**\n     * <p>Deduces version information purely from QR Code dimensions.</p>\n     *\n     * @param dimension dimension in modules\n     * @return Version for a QR Code of that dimension\n     * @throws FormatException if dimension is not 1 mod 4\n     */\n    Version.getProvisionalVersionForDimension = function (dimension /*int*/) {\n        if (dimension % 4 !== 1) {\n            throw new FormatException_1.default();\n        }\n        try {\n            return this.getVersionForNumber((dimension - 17) / 4);\n        }\n        catch (ignored /*: IllegalArgumentException*/) {\n            throw new FormatException_1.default();\n        }\n    };\n    Version.getVersionForNumber = function (versionNumber /*int*/) {\n        if (versionNumber < 1 || versionNumber > 40) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return Version.VERSIONS[versionNumber - 1];\n    };\n    Version.decodeVersionInformation = function (versionBits /*int*/) {\n        var bestDifference = Number.MAX_SAFE_INTEGER;\n        var bestVersion = 0;\n        for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {\n            var targetVersion = Version.VERSION_DECODE_INFO[i];\n            // Do the version info bits match exactly? done.\n            if (targetVersion === versionBits) {\n                return Version.getVersionForNumber(i + 7);\n            }\n            // Otherwise see if this is the closest to a real version info bit string\n            // we have seen so far\n            var bitsDifference = FormatInformation_1.default.numBitsDiffering(versionBits, targetVersion);\n            if (bitsDifference < bestDifference) {\n                bestVersion = i + 7;\n                bestDifference = bitsDifference;\n            }\n        }\n        // We can tolerate up to 3 bits of error since no two version info codewords will\n        // differ in less than 8 bits.\n        if (bestDifference <= 3) {\n            return Version.getVersionForNumber(bestVersion);\n        }\n        // If we didn't find a close enough match, fail\n        return null;\n    };\n    /**\n     * See ISO 18004:2006 Annex E\n     */\n    Version.prototype.buildFunctionPattern = function () {\n        var dimension = this.getDimensionForVersion();\n        var bitMatrix = new BitMatrix_1.default(dimension);\n        // Top left finder pattern + separator + format\n        bitMatrix.setRegion(0, 0, 9, 9);\n        // Top right finder pattern + separator + format\n        bitMatrix.setRegion(dimension - 8, 0, 8, 9);\n        // Bottom left finder pattern + separator + format\n        bitMatrix.setRegion(0, dimension - 8, 9, 8);\n        // Alignment patterns\n        var max = this.alignmentPatternCenters.length;\n        for (var x = 0; x < max; x++) {\n            var i = this.alignmentPatternCenters[x] - 2;\n            for (var y = 0; y < max; y++) {\n                if ((x === 0 && (y === 0 || y === max - 1)) || (x === max - 1 && y === 0)) {\n                    // No alignment patterns near the three finder patterns\n                    continue;\n                }\n                bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\n            }\n        }\n        // Vertical timing pattern\n        bitMatrix.setRegion(6, 9, 1, dimension - 17);\n        // Horizontal timing pattern\n        bitMatrix.setRegion(9, 6, dimension - 17, 1);\n        if (this.versionNumber > 6) {\n            // Version info, top right\n            bitMatrix.setRegion(dimension - 11, 0, 3, 6);\n            // Version info, bottom left\n            bitMatrix.setRegion(0, dimension - 11, 6, 3);\n        }\n        return bitMatrix;\n    };\n    /*@Override*/\n    Version.prototype.toString = function () {\n        return '' + this.versionNumber;\n    };\n    /**\n       * See ISO 18004:2006 Annex D.\n       * Element i represents the raw version bits that specify version i + 7\n       */\n    Version.VERSION_DECODE_INFO = Int32Array.from([\n        0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6,\n        0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78,\n        0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683,\n        0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,\n        0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250,\n        0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B,\n        0x2542E, 0x26A64, 0x27541, 0x28C69\n    ]);\n    /**\n       * See ISO 18004:2006 6.5.1 Table 9\n       */\n    Version.VERSIONS = [\n        new Version(1, new Int32Array(0), new ECBlocks_1.default(7, new ECB_1.default(1, 19)), new ECBlocks_1.default(10, new ECB_1.default(1, 16)), new ECBlocks_1.default(13, new ECB_1.default(1, 13)), new ECBlocks_1.default(17, new ECB_1.default(1, 9))),\n        new Version(2, Int32Array.from([6, 18]), new ECBlocks_1.default(10, new ECB_1.default(1, 34)), new ECBlocks_1.default(16, new ECB_1.default(1, 28)), new ECBlocks_1.default(22, new ECB_1.default(1, 22)), new ECBlocks_1.default(28, new ECB_1.default(1, 16))),\n        new Version(3, Int32Array.from([6, 22]), new ECBlocks_1.default(15, new ECB_1.default(1, 55)), new ECBlocks_1.default(26, new ECB_1.default(1, 44)), new ECBlocks_1.default(18, new ECB_1.default(2, 17)), new ECBlocks_1.default(22, new ECB_1.default(2, 13))),\n        new Version(4, Int32Array.from([6, 26]), new ECBlocks_1.default(20, new ECB_1.default(1, 80)), new ECBlocks_1.default(18, new ECB_1.default(2, 32)), new ECBlocks_1.default(26, new ECB_1.default(2, 24)), new ECBlocks_1.default(16, new ECB_1.default(4, 9))),\n        new Version(5, Int32Array.from([6, 30]), new ECBlocks_1.default(26, new ECB_1.default(1, 108)), new ECBlocks_1.default(24, new ECB_1.default(2, 43)), new ECBlocks_1.default(18, new ECB_1.default(2, 15), new ECB_1.default(2, 16)), new ECBlocks_1.default(22, new ECB_1.default(2, 11), new ECB_1.default(2, 12))),\n        new Version(6, Int32Array.from([6, 34]), new ECBlocks_1.default(18, new ECB_1.default(2, 68)), new ECBlocks_1.default(16, new ECB_1.default(4, 27)), new ECBlocks_1.default(24, new ECB_1.default(4, 19)), new ECBlocks_1.default(28, new ECB_1.default(4, 15))),\n        new Version(7, Int32Array.from([6, 22, 38]), new ECBlocks_1.default(20, new ECB_1.default(2, 78)), new ECBlocks_1.default(18, new ECB_1.default(4, 31)), new ECBlocks_1.default(18, new ECB_1.default(2, 14), new ECB_1.default(4, 15)), new ECBlocks_1.default(26, new ECB_1.default(4, 13), new ECB_1.default(1, 14))),\n        new Version(8, Int32Array.from([6, 24, 42]), new ECBlocks_1.default(24, new ECB_1.default(2, 97)), new ECBlocks_1.default(22, new ECB_1.default(2, 38), new ECB_1.default(2, 39)), new ECBlocks_1.default(22, new ECB_1.default(4, 18), new ECB_1.default(2, 19)), new ECBlocks_1.default(26, new ECB_1.default(4, 14), new ECB_1.default(2, 15))),\n        new Version(9, Int32Array.from([6, 26, 46]), new ECBlocks_1.default(30, new ECB_1.default(2, 116)), new ECBlocks_1.default(22, new ECB_1.default(3, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(20, new ECB_1.default(4, 16), new ECB_1.default(4, 17)), new ECBlocks_1.default(24, new ECB_1.default(4, 12), new ECB_1.default(4, 13))),\n        new Version(10, Int32Array.from([6, 28, 50]), new ECBlocks_1.default(18, new ECB_1.default(2, 68), new ECB_1.default(2, 69)), new ECBlocks_1.default(26, new ECB_1.default(4, 43), new ECB_1.default(1, 44)), new ECBlocks_1.default(24, new ECB_1.default(6, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(28, new ECB_1.default(6, 15), new ECB_1.default(2, 16))),\n        new Version(11, Int32Array.from([6, 30, 54]), new ECBlocks_1.default(20, new ECB_1.default(4, 81)), new ECBlocks_1.default(30, new ECB_1.default(1, 50), new ECB_1.default(4, 51)), new ECBlocks_1.default(28, new ECB_1.default(4, 22), new ECB_1.default(4, 23)), new ECBlocks_1.default(24, new ECB_1.default(3, 12), new ECB_1.default(8, 13))),\n        new Version(12, Int32Array.from([6, 32, 58]), new ECBlocks_1.default(24, new ECB_1.default(2, 92), new ECB_1.default(2, 93)), new ECBlocks_1.default(22, new ECB_1.default(6, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(26, new ECB_1.default(4, 20), new ECB_1.default(6, 21)), new ECBlocks_1.default(28, new ECB_1.default(7, 14), new ECB_1.default(4, 15))),\n        new Version(13, Int32Array.from([6, 34, 62]), new ECBlocks_1.default(26, new ECB_1.default(4, 107)), new ECBlocks_1.default(22, new ECB_1.default(8, 37), new ECB_1.default(1, 38)), new ECBlocks_1.default(24, new ECB_1.default(8, 20), new ECB_1.default(4, 21)), new ECBlocks_1.default(22, new ECB_1.default(12, 11), new ECB_1.default(4, 12))),\n        new Version(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks_1.default(30, new ECB_1.default(3, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(24, new ECB_1.default(4, 40), new ECB_1.default(5, 41)), new ECBlocks_1.default(20, new ECB_1.default(11, 16), new ECB_1.default(5, 17)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(5, 13))),\n        new Version(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks_1.default(22, new ECB_1.default(5, 87), new ECB_1.default(1, 88)), new ECBlocks_1.default(24, new ECB_1.default(5, 41), new ECB_1.default(5, 42)), new ECBlocks_1.default(30, new ECB_1.default(5, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(7, 13))),\n        new Version(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks_1.default(24, new ECB_1.default(5, 98), new ECB_1.default(1, 99)), new ECBlocks_1.default(28, new ECB_1.default(7, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(24, new ECB_1.default(15, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(30, new ECB_1.default(3, 15), new ECB_1.default(13, 16))),\n        new Version(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks_1.default(28, new ECB_1.default(1, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(1, 47)), new ECBlocks_1.default(28, new ECB_1.default(1, 22), new ECB_1.default(15, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(17, 15))),\n        new Version(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks_1.default(30, new ECB_1.default(5, 120), new ECB_1.default(1, 121)), new ECBlocks_1.default(26, new ECB_1.default(9, 43), new ECB_1.default(4, 44)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(1, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(19, 15))),\n        new Version(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks_1.default(28, new ECB_1.default(3, 113), new ECB_1.default(4, 114)), new ECBlocks_1.default(26, new ECB_1.default(3, 44), new ECB_1.default(11, 45)), new ECBlocks_1.default(26, new ECB_1.default(17, 21), new ECB_1.default(4, 22)), new ECBlocks_1.default(26, new ECB_1.default(9, 13), new ECB_1.default(16, 14))),\n        new Version(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks_1.default(28, new ECB_1.default(3, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(26, new ECB_1.default(3, 41), new ECB_1.default(13, 42)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(5, 25)), new ECBlocks_1.default(28, new ECB_1.default(15, 15), new ECB_1.default(10, 16))),\n        new Version(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks_1.default(28, new ECB_1.default(4, 116), new ECB_1.default(4, 117)), new ECBlocks_1.default(26, new ECB_1.default(17, 42)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(19, 16), new ECB_1.default(6, 17))),\n        new Version(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks_1.default(28, new ECB_1.default(2, 111), new ECB_1.default(7, 112)), new ECBlocks_1.default(28, new ECB_1.default(17, 46)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(24, new ECB_1.default(34, 13))),\n        new Version(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks_1.default(30, new ECB_1.default(4, 121), new ECB_1.default(5, 122)), new ECBlocks_1.default(28, new ECB_1.default(4, 47), new ECB_1.default(14, 48)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(16, 15), new ECB_1.default(14, 16))),\n        new Version(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks_1.default(30, new ECB_1.default(6, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(6, 45), new ECB_1.default(14, 46)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(30, new ECB_1.default(30, 16), new ECB_1.default(2, 17))),\n        new Version(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks_1.default(26, new ECB_1.default(8, 106), new ECB_1.default(4, 107)), new ECBlocks_1.default(28, new ECB_1.default(8, 47), new ECB_1.default(13, 48)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(13, 16))),\n        new Version(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks_1.default(28, new ECB_1.default(10, 114), new ECB_1.default(2, 115)), new ECBlocks_1.default(28, new ECB_1.default(19, 46), new ECB_1.default(4, 47)), new ECBlocks_1.default(28, new ECB_1.default(28, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(33, 16), new ECB_1.default(4, 17))),\n        new Version(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks_1.default(30, new ECB_1.default(8, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(22, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(30, new ECB_1.default(8, 23), new ECB_1.default(26, 24)), new ECBlocks_1.default(30, new ECB_1.default(12, 15), new ECB_1.default(28, 16))),\n        new Version(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks_1.default(30, new ECB_1.default(3, 117), new ECB_1.default(10, 118)), new ECBlocks_1.default(28, new ECB_1.default(3, 45), new ECB_1.default(23, 46)), new ECBlocks_1.default(30, new ECB_1.default(4, 24), new ECB_1.default(31, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(31, 16))),\n        new Version(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks_1.default(30, new ECB_1.default(7, 116), new ECB_1.default(7, 117)), new ECBlocks_1.default(28, new ECB_1.default(21, 45), new ECB_1.default(7, 46)), new ECBlocks_1.default(30, new ECB_1.default(1, 23), new ECB_1.default(37, 24)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(26, 16))),\n        new Version(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks_1.default(30, new ECB_1.default(5, 115), new ECB_1.default(10, 116)), new ECBlocks_1.default(28, new ECB_1.default(19, 47), new ECB_1.default(10, 48)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(25, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(25, 16))),\n        new Version(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(3, 116)), new ECBlocks_1.default(28, new ECB_1.default(2, 46), new ECB_1.default(29, 47)), new ECBlocks_1.default(30, new ECB_1.default(42, 24), new ECB_1.default(1, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(28, 16))),\n        new Version(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks_1.default(30, new ECB_1.default(17, 115)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(10, 24), new ECB_1.default(35, 25)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(35, 16))),\n        new Version(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks_1.default(30, new ECB_1.default(17, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(21, 47)), new ECBlocks_1.default(30, new ECB_1.default(29, 24), new ECB_1.default(19, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(46, 16))),\n        new Version(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(6, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(44, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(30, new ECB_1.default(59, 16), new ECB_1.default(1, 17))),\n        new Version(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks_1.default(30, new ECB_1.default(12, 121), new ECB_1.default(7, 122)), new ECBlocks_1.default(28, new ECB_1.default(12, 47), new ECB_1.default(26, 48)), new ECBlocks_1.default(30, new ECB_1.default(39, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(41, 16))),\n        new Version(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks_1.default(30, new ECB_1.default(6, 121), new ECB_1.default(14, 122)), new ECBlocks_1.default(28, new ECB_1.default(6, 47), new ECB_1.default(34, 48)), new ECBlocks_1.default(30, new ECB_1.default(46, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(2, 15), new ECB_1.default(64, 16))),\n        new Version(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks_1.default(30, new ECB_1.default(17, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(29, 46), new ECB_1.default(14, 47)), new ECBlocks_1.default(30, new ECB_1.default(49, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(24, 15), new ECB_1.default(46, 16))),\n        new Version(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks_1.default(30, new ECB_1.default(4, 122), new ECB_1.default(18, 123)), new ECBlocks_1.default(28, new ECB_1.default(13, 46), new ECB_1.default(32, 47)), new ECBlocks_1.default(30, new ECB_1.default(48, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(42, 15), new ECB_1.default(32, 16))),\n        new Version(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks_1.default(30, new ECB_1.default(20, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(40, 47), new ECB_1.default(7, 48)), new ECBlocks_1.default(30, new ECB_1.default(43, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(10, 15), new ECB_1.default(67, 16))),\n        new Version(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks_1.default(30, new ECB_1.default(19, 118), new ECB_1.default(6, 119)), new ECBlocks_1.default(28, new ECB_1.default(18, 47), new ECB_1.default(31, 48)), new ECBlocks_1.default(30, new ECB_1.default(34, 24), new ECB_1.default(34, 25)), new ECBlocks_1.default(30, new ECB_1.default(20, 15), new ECB_1.default(61, 16)))\n    ];\n    return Version;\n}());\nexports.default = Version;\n//# sourceMappingURL=Version.js.map"]},"metadata":{},"sourceType":"script"}