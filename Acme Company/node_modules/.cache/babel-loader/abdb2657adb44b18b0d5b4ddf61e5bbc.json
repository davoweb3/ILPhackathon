{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.common.CharacterSetECI;\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\n// import com.google.zxing.common.DecoderResult;\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n// import com.google.zxing.pdf417.PDF417ResultMetadata;\nvar PDF417ResultMetadata_1 = require(\"../PDF417ResultMetadata\");\n// import java.io.ByteArrayOutputStream;\n// import java.math.BigInteger;\n// import java.nio.charset.Charset;\n// import java.nio.charset.StandardCharsets;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar Long_1 = require(\"../../util/Long\");\nvar ByteArrayOutputStream_1 = require(\"../../util/ByteArrayOutputStream\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n/*private*/\nvar Mode;\n(function (Mode) {\n  Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n  Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n  Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n  Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n  Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n  Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n})(Mode || (Mode = {}));\n/**\n * Indirectly access the global BigInt constructor, it\n * allows browsers that doesn't support BigInt to run\n * the library without breaking due to \"undefined BigInt\"\n * errors.\n */\nfunction getBigIntConstructor() {\n  if (typeof window !== 'undefined') {\n    return window['BigInt'] || null;\n  }\n  if (typeof global !== 'undefined') {\n    return global['BigInt'] || null;\n  }\n  throw new Error('Can\\'t search globals for BigInt!');\n}\n/**\n * Used to store the BigInt constructor.\n */\nvar BigInteger;\n/**\n * This function creates a bigint value. It allows browsers\n * that doesn't support BigInt to run the rest of the library\n * by not directly accessing the BigInt constructor.\n */\nfunction createBigInt(num) {\n  if (typeof BigInteger === 'undefined') {\n    BigInteger = getBigIntConstructor();\n  }\n  if (BigInteger === null) {\n    throw new Error('BigInt is not supported!');\n  }\n  return BigInteger(num);\n}\nfunction getEXP900() {\n  // in Java - array with length = 16\n  var EXP900 = [];\n  EXP900[0] = createBigInt(1);\n  var nineHundred = createBigInt(900);\n  EXP900[1] = nineHundred;\n  // in Java - array with length = 16\n  for (var i /*int*/ = 2; i < 16; i++) {\n    EXP900[i] = EXP900[i - 1] * nineHundred;\n  }\n  return EXP900;\n}\n/**\n * <p>This class contains the methods for decoding the PDF417 codewords.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author Guenther Grau\n */\nvar DecodedBitStreamParser = /** @class */function () {\n  function DecodedBitStreamParser() {}\n  //   private DecodedBitStreamParser() {\n  // }\n  /**\n   *\n   * @param codewords\n   * @param ecLevel\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.decode = function (codewords, ecLevel) {\n    // pass encoding to result (will be used for decode symbols in byte mode)\n    var result = new StringBuilder_1.default('');\n    // let encoding: Charset = StandardCharsets.ISO_8859_1;\n    var encoding = CharacterSetECI_1.default.ISO8859_1;\n    /**\n     * @note the next command is specific from this TypeScript library\n     * because TS can't properly cast some values to char and\n     * convert it to string later correctly due to encoding\n     * differences from Java version. As reported here:\n     * https://github.com/zxing-js/library/pull/264/files#r382831593\n     */\n    result.enableDecoding(encoding);\n    // Get compaction mode\n    var codeIndex = 1;\n    var code = codewords[codeIndex++];\n    var resultMetadata = new PDF417ResultMetadata_1.default();\n    while (codeIndex < codewords[0]) {\n      switch (code) {\n        case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          codeIndex = DecodedBitStreamParser.byteCompaction(code, codewords, encoding, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n          result.append( /*(char)*/codewords[codeIndex++]);\n          break;\n        case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex, result);\n          break;\n        case DecodedBitStreamParser.ECI_CHARSET:\n          var charsetECI = CharacterSetECI_1.default.getCharacterSetECIByValue(codewords[codeIndex++]);\n          // encoding = Charset.forName(charsetECI.getName());\n          break;\n        case DecodedBitStreamParser.ECI_GENERAL_PURPOSE:\n          // Can't do anything with generic ECI; skip its 2 characters\n          codeIndex += 2;\n          break;\n        case DecodedBitStreamParser.ECI_USER_DEFINED:\n          // Can't do anything with user ECI; skip its 1 character\n          codeIndex++;\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          codeIndex = DecodedBitStreamParser.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n          break;\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          // Should not see these outside a macro block\n          throw new FormatException_1.default();\n        default:\n          // Default to text compaction. During testing numerous barcodes\n          // appeared to be missing the starting mode. In these cases defaulting\n          // to text compaction seems to work.\n          codeIndex--;\n          codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n          break;\n      }\n      if (codeIndex < codewords.length) {\n        code = codewords[codeIndex++];\n      } else {\n        throw FormatException_1.default.getFormatInstance();\n      }\n    }\n    if (result.length() === 0) {\n      throw FormatException_1.default.getFormatInstance();\n    }\n    var decoderResult = new DecoderResult_1.default(null, result.toString(), null, ecLevel);\n    decoderResult.setOther(resultMetadata);\n    return decoderResult;\n  };\n  /**\n   *\n   * @param int\n   * @param param1\n   * @param codewords\n   * @param int\n   * @param codeIndex\n   * @param PDF417ResultMetadata\n   * @param resultMetadata\n   *\n   * @throws FormatException\n   */\n  // @SuppressWarnings(\"deprecation\")\n  DecodedBitStreamParser.decodeMacroBlock = function (codewords, codeIndex, resultMetadata) {\n    if (codeIndex + DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n      // we must have at least two bytes left for the segment index\n      throw FormatException_1.default.getFormatInstance();\n    }\n    var segmentIndexArray = new Int32Array(DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS);\n    for (var i /*int*/ = 0; i < DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n      segmentIndexArray[i] = codewords[codeIndex];\n    }\n    resultMetadata.setSegmentIndex(Integer_1.default.parseInt(DecodedBitStreamParser.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS)));\n    var fileId = new StringBuilder_1.default();\n    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, fileId);\n    resultMetadata.setFileId(fileId.toString());\n    var optionalFieldsStart = -1;\n    if (codewords[codeIndex] === DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n      optionalFieldsStart = codeIndex + 1;\n    }\n    while (codeIndex < codewords[0]) {\n      switch (codewords[codeIndex]) {\n        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          codeIndex++;\n          switch (codewords[codeIndex]) {\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n              var fileName = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, fileName);\n              resultMetadata.setFileName(fileName.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n              var sender = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, sender);\n              resultMetadata.setSender(sender.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n              var addressee = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, addressee);\n              resultMetadata.setAddressee(addressee.toString());\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n              var segmentCount = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, segmentCount);\n              resultMetadata.setSegmentCount(Integer_1.default.parseInt(segmentCount.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n              var timestamp = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, timestamp);\n              resultMetadata.setTimestamp(Long_1.default.parseLong(timestamp.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n              var checksum = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, checksum);\n              resultMetadata.setChecksum(Integer_1.default.parseInt(checksum.toString()));\n              break;\n            case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n              var fileSize = new StringBuilder_1.default();\n              codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, fileSize);\n              resultMetadata.setFileSize(Long_1.default.parseLong(fileSize.toString()));\n              break;\n            default:\n              throw FormatException_1.default.getFormatInstance();\n          }\n          break;\n        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n          codeIndex++;\n          resultMetadata.setLastSegment(true);\n          break;\n        default:\n          throw FormatException_1.default.getFormatInstance();\n      }\n    }\n    // copy optional fields to additional options\n    if (optionalFieldsStart !== -1) {\n      var optionalFieldsLength = codeIndex - optionalFieldsStart;\n      if (resultMetadata.isLastSegment()) {\n        // do not include terminator\n        optionalFieldsLength--;\n      }\n      resultMetadata.setOptionalData(Arrays_1.default.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n    }\n    return codeIndex;\n  };\n  /**\n   * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\n   * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\n   * well as selected control characters.\n   *\n   * @param codewords The array of codewords (data + error)\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   */\n  DecodedBitStreamParser.textCompaction = function (codewords, codeIndex, result) {\n    // 2 character per codeword\n    var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    // Used to hold the byte compaction value if there is a mode shift\n    var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n    var index = 0;\n    var end = false;\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        textCompactionData[index] = code / 30;\n        textCompactionData[index + 1] = code % 30;\n        index += 2;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            // reinitialize text compaction mode to alpha sub mode\n            textCompactionData[index++] = DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH;\n            break;\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n          case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n            // The Mode Shift codeword 913 shall cause a temporary\n            // switch from Text Compaction mode to Byte Compaction mode.\n            // This switch shall be in effect for only the next codeword,\n            // after which the mode shall revert to the prevailing sub-mode\n            // of the Text Compaction mode. Codeword 913 is only available\n            // in Text Compaction mode; its use is described in 5.4.2.4.\n            textCompactionData[index] = DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n            code = codewords[codeIndex++];\n            byteCompactionData[index] = code;\n            index++;\n            break;\n        }\n      }\n    }\n    DecodedBitStreamParser.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n    return codeIndex;\n  };\n  /**\n   * The Text Compaction mode includes all the printable ASCII characters\n   * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\n   * (9: e), LF or line feed (10: e), and CR or carriage\n   * return (13: e). The Text Compaction mode also includes various latch\n   * and shift characters which are used exclusively within the mode. The Text\n   * Compaction mode encodes up to 2 characters per codeword. The compaction rules\n   * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\n   * switches are defined in 5.4.2.3.\n   *\n   * @param textCompactionData The text compaction data.\n   * @param byteCompactionData The byte compaction data if there\n   *                           was a mode shift.\n   * @param length             The size of the text compaction and byte compaction data.\n   * @param result             The decoded data is appended to the result.\n   */\n  DecodedBitStreamParser.decodeTextCompaction = function (textCompactionData, byteCompactionData, length, result) {\n    // Beginning from an initial state of the Alpha sub-mode\n    // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n    // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n    // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n    var subMode = Mode.ALPHA;\n    var priorToShiftMode = Mode.ALPHA;\n    var i = 0;\n    while (i < length) {\n      var subModeCh = textCompactionData[i];\n      var ch = /*char*/'';\n      switch (subMode) {\n        case Mode.ALPHA:\n          // Alpha (alphabetic: uppercase)\n          if (subModeCh < 26) {\n            // Upper case Alpha Character\n            // Note: 65 = 'A' ASCII -> there is byte code of symbol\n            ch = /*(char)('A' + subModeCh) */String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.LOWER:\n          // Lower (alphabetic: lowercase)\n          if (subModeCh < 26) {\n            ch = /*(char)('a' + subModeCh)*/String.fromCharCode(97 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.AS:\n                // Shift to alpha\n                priorToShiftMode = subMode;\n                subMode = Mode.ALPHA_SHIFT;\n                break;\n              case DecodedBitStreamParser.ML:\n                subMode = Mode.MIXED;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // TODO Does this need to use the current character encoding? See other occurrences below\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.MIXED:\n          // Mixed (punctuation: e)\n          if (subModeCh < DecodedBitStreamParser.PL) {\n            ch = DecodedBitStreamParser.MIXED_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PL:\n                subMode = Mode.PUNCT;\n                break;\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.LL:\n                subMode = Mode.LOWER;\n                break;\n              case DecodedBitStreamParser.AL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.PS:\n                // Shift to punctuation\n                priorToShiftMode = subMode;\n                subMode = Mode.PUNCT_SHIFT;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT:\n          // Punctuation\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.ALPHA_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < 26) {\n            ch = /*(char)('A' + subModeCh)*/String.fromCharCode(65 + subModeCh);\n          } else {\n            switch (subModeCh) {\n              case 26:\n                ch = ' ';\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n        case Mode.PUNCT_SHIFT:\n          // Restore sub-mode\n          subMode = priorToShiftMode;\n          if (subModeCh < DecodedBitStreamParser.PAL) {\n            ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n          } else {\n            switch (subModeCh) {\n              case DecodedBitStreamParser.PAL:\n                subMode = Mode.ALPHA;\n                break;\n              case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                // PS before Shift-to-Byte is used as a padding character,\n                // see 5.4.2.4 of the specification\n                result.append( /*(char)*/byteCompactionData[i]);\n                break;\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                subMode = Mode.ALPHA;\n                break;\n            }\n          }\n          break;\n      }\n      // if (ch !== 0) {\n      if (ch !== '') {\n        // Append decoded character to result\n        result.append(ch);\n      }\n      i++;\n    }\n  };\n  /**\n   * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\n   * This includes all ASCII characters value 0 to 127 inclusive and provides for international\n   * character set support.\n   *\n   * @param mode      The byte compaction mode i.e. 901 or 924\n   * @param codewords The array of codewords (data + error)\n   * @param encoding  Currently active character encoding\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   */\n  DecodedBitStreamParser.byteCompaction = function (mode, codewords, encoding, codeIndex, result) {\n    var decodedBytes = new ByteArrayOutputStream_1.default();\n    var count = 0;\n    var value = /*long*/0;\n    var end = false;\n    switch (mode) {\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n        // Total number of Byte Compaction characters to be encoded\n        // is not a multiple of 6\n        var byteCompactedCodewords = new Int32Array(6);\n        var nextCode = codewords[codeIndex++];\n        while (codeIndex < codewords[0] && !end) {\n          byteCompactedCodewords[count++] = nextCode;\n          // Base 900\n          value = 900 * value + nextCode;\n          nextCode = codewords[codeIndex++];\n          // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n          switch (nextCode) {\n            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n            case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n              codeIndex--;\n              end = true;\n              break;\n            default:\n              if (count % 5 === 0 && count > 0) {\n                // Decode every 5 codewords\n                // Convert to Base 256\n                for (var j /*int*/ = 0; j < 6; ++j) {\n                  /* @note\n                   * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                   * So the next bitwise operation could not be done with simple numbers\n                   */\n                  decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                }\n                value = 0;\n                count = 0;\n              }\n              break;\n          }\n        }\n        // if the end of all codewords is reached the last codeword needs to be added\n        if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n          byteCompactedCodewords[count++] = nextCode;\n        }\n        // If Byte Compaction mode is invoked with codeword 901,\n        // the last group of codewords is interpreted directly\n        // as one byte per codeword, without compaction.\n        for (var i /*int*/ = 0; i < count; i++) {\n          decodedBytes.write( /*(byte)*/byteCompactedCodewords[i]);\n        }\n        break;\n      case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n        // Total number of Byte Compaction characters to be encoded\n        // is an integer multiple of 6\n        while (codeIndex < codewords[0] && !end) {\n          var code = codewords[codeIndex++];\n          if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n            count++;\n            // Base 900\n            value = 900 * value + code;\n          } else {\n            switch (code) {\n              case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n              case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n              case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n              case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                codeIndex--;\n                end = true;\n                break;\n            }\n          }\n          if (count % 5 === 0 && count > 0) {\n            // Decode every 5 codewords\n            // Convert to Base 256\n            /* @note\n             * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n             * So the next bitwise operation could not be done with simple numbers\n            */\n            for (var j /*int*/ = 0; j < 6; ++j) {\n              decodedBytes.write( /*(byte)*/Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n            }\n            value = 0;\n            count = 0;\n          }\n        }\n        break;\n    }\n    result.append(StringEncoding_1.default.decode(decodedBytes.toByteArray(), encoding));\n    return codeIndex;\n  };\n  /**\n   * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\n   *\n   * @param codewords The array of codewords (data + error)\n   * @param codeIndex The current index into the codeword array.\n   * @param result    The decoded data is appended to the result.\n   * @return The next index into the codeword array.\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.numericCompaction = function (codewords, codeIndex /*int*/, result) {\n    var count = 0;\n    var end = false;\n    var numericCodewords = new Int32Array(DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS);\n    while (codeIndex < codewords[0] && !end) {\n      var code = codewords[codeIndex++];\n      if (codeIndex === codewords[0]) {\n        end = true;\n      }\n      if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n        numericCodewords[count] = code;\n        count++;\n      } else {\n        switch (code) {\n          case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n          case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n          case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n          case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n            codeIndex--;\n            end = true;\n            break;\n        }\n      }\n      if ((count % DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n        // Re-invoking Numeric Compaction mode (by using codeword 902\n        // while in Numeric Compaction mode) serves  to terminate the\n        // current Numeric Compaction mode grouping as described in 5.4.4.2,\n        // and then to start a new one grouping.\n        result.append(DecodedBitStreamParser.decodeBase900toBase10(numericCodewords, count));\n        count = 0;\n      }\n    }\n    return codeIndex;\n  };\n  /**\n   * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\n   *\n   * @param codewords The array of codewords\n   * @param count     The number of codewords\n   * @return The decoded string representing the Numeric data.\n   *\n   * EXAMPLE\n   * Encode the fifteen digit numeric string 000213298174000\n   * Prefix the numeric string with a 1 and set the initial value of\n   * t = 1 000 213 298 174 000\n   * Calculate codeword 0\n   * d0 = 1 000 213 298 174 000 mod 900 = 200\n   *\n   * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\n   * Calculate codeword 1\n   * d1 = 1 111 348 109 082 mod 900 = 282\n   *\n   * t = 1 111 348 109 082 div 900 = 1 234 831 232\n   * Calculate codeword 2\n   * d2 = 1 234 831 232 mod 900 = 632\n   *\n   * t = 1 234 831 232 div 900 = 1 372 034\n   * Calculate codeword 3\n   * d3 = 1 372 034 mod 900 = 434\n   *\n   * t = 1 372 034 div 900 = 1 524\n   * Calculate codeword 4\n   * d4 = 1 524 mod 900 = 624\n   *\n   * t = 1 524 div 900 = 1\n   * Calculate codeword 5\n   * d5 = 1 mod 900 = 1\n   * t = 1 div 900 = 0\n   * Codeword sequence is: 1, 624, 434, 632, 282, 200\n   *\n   * Decode the above codewords involves\n   *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\n   * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\n   *\n   * Remove leading 1 =>  Result is 000213298174000\n   *\n   * @throws FormatException\n   */\n  DecodedBitStreamParser.decodeBase900toBase10 = function (codewords, count) {\n    var result = createBigInt(0);\n    for (var i /*int*/ = 0; i < count; i++) {\n      result += DecodedBitStreamParser.EXP900[count - i - 1] * createBigInt(codewords[i]);\n    }\n    var resultString = result.toString();\n    if (resultString.charAt(0) !== '1') {\n      throw new FormatException_1.default();\n    }\n    return resultString.substring(1);\n  };\n  DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH = 900;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH = 901;\n  DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH = 902;\n  DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n  DecodedBitStreamParser.ECI_USER_DEFINED = 925;\n  DecodedBitStreamParser.ECI_GENERAL_PURPOSE = 926;\n  DecodedBitStreamParser.ECI_CHARSET = 927;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n  DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n  DecodedBitStreamParser.MACRO_PDF417_TERMINATOR = 922;\n  DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n  DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS = 15;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n  DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n  DecodedBitStreamParser.PL = 25;\n  DecodedBitStreamParser.LL = 27;\n  DecodedBitStreamParser.AS = 27;\n  DecodedBitStreamParser.ML = 28;\n  DecodedBitStreamParser.AL = 28;\n  DecodedBitStreamParser.PS = 29;\n  DecodedBitStreamParser.PAL = 29;\n  DecodedBitStreamParser.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n  DecodedBitStreamParser.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n  /**\n   * Table containing values for the exponent of 900.\n   * This is used in the numeric compaction decode algorithm.\n   */\n  DecodedBitStreamParser.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n  DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n  return DecodedBitStreamParser;\n}();\nexports.default = DecodedBitStreamParser;","map":{"version":3,"names":["FormatException_1","require","CharacterSetECI_1","DecoderResult_1","PDF417ResultMetadata_1","Arrays_1","StringBuilder_1","Integer_1","Long_1","ByteArrayOutputStream_1","StringEncoding_1","Mode","getBigIntConstructor","window","global","Error","BigInteger","createBigInt","num","getEXP900","EXP900","nineHundred","i","DecodedBitStreamParser","decode","codewords","ecLevel","result","default","encoding","ISO8859_1","enableDecoding","codeIndex","code","resultMetadata","TEXT_COMPACTION_MODE_LATCH","textCompaction","BYTE_COMPACTION_MODE_LATCH","BYTE_COMPACTION_MODE_LATCH_6","byteCompaction","MODE_SHIFT_TO_BYTE_COMPACTION_MODE","append","NUMERIC_COMPACTION_MODE_LATCH","numericCompaction","ECI_CHARSET","charsetECI","getCharacterSetECIByValue","ECI_GENERAL_PURPOSE","ECI_USER_DEFINED","BEGIN_MACRO_PDF417_CONTROL_BLOCK","decodeMacroBlock","BEGIN_MACRO_PDF417_OPTIONAL_FIELD","MACRO_PDF417_TERMINATOR","length","getFormatInstance","decoderResult","toString","setOther","NUMBER_OF_SEQUENCE_CODEWORDS","segmentIndexArray","Int32Array","setSegmentIndex","parseInt","decodeBase900toBase10","fileId","setFileId","optionalFieldsStart","MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME","fileName","setFileName","MACRO_PDF417_OPTIONAL_FIELD_SENDER","sender","setSender","MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE","addressee","setAddressee","MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT","segmentCount","setSegmentCount","MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP","timestamp","setTimestamp","parseLong","MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM","checksum","setChecksum","MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE","fileSize","setFileSize","setLastSegment","optionalFieldsLength","isLastSegment","setOptionalData","copyOfRange","textCompactionData","byteCompactionData","index","end","decodeTextCompaction","subMode","ALPHA","priorToShiftMode","subModeCh","ch","String","fromCharCode","LL","LOWER","ML","MIXED","PS","PUNCT_SHIFT","AS","ALPHA_SHIFT","PL","MIXED_CHARS","PUNCT","AL","PAL","PUNCT_CHARS","mode","decodedBytes","count","value","byteCompactedCodewords","nextCode","j","write","Number","toByteArray","numericCodewords","MAX_NUMERIC_CODEWORDS","resultString","charAt","substring"],"sources":["../../../../src/core/pdf417/decoder/DecodedBitStreamParser.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAEA;AACA,IAAAA,iBAAA,GAAAC,OAAA;AACA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AACA;AACA,IAAAE,eAAA,GAAAF,OAAA;AACA;AACA,IAAAG,sBAAA,GAAAH,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AAEA,IAAAK,eAAA,GAAAL,OAAA;AACA,IAAAM,SAAA,GAAAN,OAAA;AACA,IAAAO,MAAA,GAAAP,OAAA;AACA,IAAAQ,uBAAA,GAAAR,OAAA;AACA,IAAAS,gBAAA,GAAAT,OAAA;AAKA;AAAY,IAAKU,IAOhB;AAPW,WAAKA,IAAI;EACnBA,IAAA,CAAAA,IAAA,wBAAK;EACLA,IAAA,CAAAA,IAAA,wBAAK;EACLA,IAAA,CAAAA,IAAA,wBAAK;EACLA,IAAA,CAAAA,IAAA,wBAAK;EACLA,IAAA,CAAAA,IAAA,oCAAW;EACXA,IAAA,CAAAA,IAAA,oCAAW;AACb,CAAC,EAPgBA,IAAI,KAAJA,IAAI;AASrB;;;;;;AAMA,SAASC,oBAAoBA,CAAA;EAE3B,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAOA,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI;;EAGjC,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAOA,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI;;EAGjC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;AACtD;AAEA;;;AAGA,IAAIC,UAA6B;AAEjC;;;;;AAKA,SAASC,YAAYA,CAACC,GAA6B;EAEjD,IAAI,OAAOF,UAAU,KAAK,WAAW,EAAE;IACrCA,UAAU,GAAGJ,oBAAoB,EAAE;;EAGrC,IAAII,UAAU,KAAK,IAAI,EAAE;IACvB,MAAM,IAAID,KAAK,CAAC,0BAA0B,CAAC;;EAG7C,OAAOC,UAAU,CAACE,GAAG,CAAC;AACxB;AAEA,SAASC,SAASA,CAAA;EAChB;EACA,IAAIC,MAAM,GAAG,EAAE;EAEfA,MAAM,CAAC,CAAC,CAAC,GAAGH,YAAY,CAAC,CAAC,CAAC;EAE3B,IAAII,WAAW,GAAGJ,YAAY,CAAC,GAAG,CAAC;EAEnCG,MAAM,CAAC,CAAC,CAAC,GAAGC,WAAW;EAEvB;EACA,KAAK,IAAIC,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACnCF,MAAM,CAACE,CAAC,CAAC,GAAGF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGD,WAAW;;EAGzC,OAAOD,MAAM;AACf;AAEA;;;;;;AAMA,IAAAG,sBAAA;EAAA,SAAAA,uBAAA,GAqsBA;EAxpBE;EACA;EAEA;;;;;;;EAOOA,sBAAA,CAAAC,MAAM,GAAb,UAAcC,SAAqB,EAAEC,OAAe;IAClD;IACA,IAAIC,MAAM,GAAkB,IAAIrB,eAAA,CAAAsB,OAAa,CAAC,EAAE,CAAC;IACjD;IACA,IAAIC,QAAQ,GAAG3B,iBAAA,CAAA0B,OAAe,CAACE,SAAS;IACxC;;;;;;;IAOAH,MAAM,CAACI,cAAc,CAACF,QAAQ,CAAC;IAC/B;IACA,IAAIG,SAAS,GAAQ,CAAC;IACtB,IAAIC,IAAI,GAAQR,SAAS,CAACO,SAAS,EAAE,CAAC;IACtC,IAAIE,cAAc,GAAyB,IAAI9B,sBAAA,CAAAwB,OAAoB,EAAE;IACrE,OAAOI,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,EAAE;MAC/B,QAAQQ,IAAI;QACV,KAAKV,sBAAsB,CAACY,0BAA0B;UACpDH,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,EAAEL,MAAM,CAAC;UAC/E;QACF,KAAKJ,sBAAsB,CAACc,0BAA0B;QACtD,KAAKd,sBAAsB,CAACe,4BAA4B;UACtDN,SAAS,GAAGT,sBAAsB,CAACgB,cAAc,CAACN,IAAI,EAAER,SAAS,EAAEI,QAAQ,EAAEG,SAAS,EAAEL,MAAM,CAAC;UAC/F;QACF,KAAKJ,sBAAsB,CAACiB,kCAAkC;UAC5Db,MAAM,CAACc,MAAM,EAAC,UAAWhB,SAAS,CAACO,SAAS,EAAE,CAAC,CAAC;UAChD;QACF,KAAKT,sBAAsB,CAACmB,6BAA6B;UACvDV,SAAS,GAAGT,sBAAsB,CAACoB,iBAAiB,CAAClB,SAAS,EAAEO,SAAS,EAAEL,MAAM,CAAC;UAClF;QACF,KAAKJ,sBAAsB,CAACqB,WAAW;UACrC,IAAIC,UAAU,GACZ3C,iBAAA,CAAA0B,OAAe,CAACkB,yBAAyB,CAACrB,SAAS,CAACO,SAAS,EAAE,CAAC,CAAC;UACnE;UACA;QACF,KAAKT,sBAAsB,CAACwB,mBAAmB;UAC7C;UACAf,SAAS,IAAI,CAAC;UACd;QACF,KAAKT,sBAAsB,CAACyB,gBAAgB;UAC1C;UACAhB,SAAS,EAAE;UACX;QACF,KAAKT,sBAAsB,CAAC0B,gCAAgC;UAC1DjB,SAAS,GAAGT,sBAAsB,CAAC2B,gBAAgB,CAACzB,SAAS,EAAEO,SAAS,EAAEE,cAAc,CAAC;UACzF;QACF,KAAKX,sBAAsB,CAAC4B,iCAAiC;QAC7D,KAAK5B,sBAAsB,CAAC6B,uBAAuB;UACjD;UACA,MAAM,IAAIpD,iBAAA,CAAA4B,OAAe,EAAE;QAC7B;UACE;UACA;UACA;UACAI,SAAS,EAAE;UACXA,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,EAAEL,MAAM,CAAC;UAC/E;MAAM;MAEV,IAAIK,SAAS,GAAGP,SAAS,CAAC4B,MAAM,EAAE;QAChCpB,IAAI,GAAGR,SAAS,CAACO,SAAS,EAAE,CAAC;OAC9B,MAAM;QACL,MAAMhC,iBAAA,CAAA4B,OAAe,CAAC0B,iBAAiB,EAAE;;;IAG7C,IAAI3B,MAAM,CAAC0B,MAAM,EAAE,KAAK,CAAC,EAAE;MACzB,MAAMrD,iBAAA,CAAA4B,OAAe,CAAC0B,iBAAiB,EAAE;;IAE3C,IAAIC,aAAa,GAAkB,IAAIpD,eAAA,CAAAyB,OAAa,CAAC,IAAI,EAAED,MAAM,CAAC6B,QAAQ,EAAE,EAAE,IAAI,EAAE9B,OAAO,CAAC;IAC5F6B,aAAa,CAACE,QAAQ,CAACvB,cAAc,CAAC;IACtC,OAAOqB,aAAa;EACtB,CAAC;EAED;;;;;;;;;;;;EAYA;EACOhC,sBAAA,CAAA2B,gBAAgB,GAAvB,UAAwBzB,SAAqB,EAAEO,SAAc,EAAEE,cAAoC;IACjG,IAAIF,SAAS,GAAGT,sBAAsB,CAACmC,4BAA4B,GAAGjC,SAAS,CAAC,CAAC,CAAC,EAAE;MAClF;MACA,MAAMzB,iBAAA,CAAA4B,OAAe,CAAC0B,iBAAiB,EAAE;;IAE3C,IAAIK,iBAAiB,GAAe,IAAIC,UAAU,CAACrC,sBAAsB,CAACmC,4BAA4B,CAAC;IACvG,KAAK,IAAIpC,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAGC,sBAAsB,CAACmC,4BAA4B,EAAEpC,CAAC,EAAE,EAAEU,SAAS,EAAE,EAAE;MACjG2B,iBAAiB,CAACrC,CAAC,CAAC,GAAGG,SAAS,CAACO,SAAS,CAAC;;IAE7CE,cAAc,CAAC2B,eAAe,CAACtD,SAAA,CAAAqB,OAAO,CAACkC,QAAQ,CAACvC,sBAAsB,CAACwC,qBAAqB,CAACJ,iBAAiB,EAC5GpC,sBAAsB,CAACmC,4BAA4B,CAAC,CAAC,CAAC;IAExD,IAAIM,MAAM,GAAkB,IAAI1D,eAAA,CAAAsB,OAAa,EAAE;IAC/CI,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,EAAEgC,MAAM,CAAC;IAC/E9B,cAAc,CAAC+B,SAAS,CAACD,MAAM,CAACR,QAAQ,EAAE,CAAC;IAE3C,IAAIU,mBAAmB,GAAQ,CAAC,CAAC;IACjC,IAAIzC,SAAS,CAACO,SAAS,CAAC,KAAKT,sBAAsB,CAAC4B,iCAAiC,EAAE;MACrFe,mBAAmB,GAAGlC,SAAS,GAAG,CAAC;;IAGrC,OAAOA,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,EAAE;MAC/B,QAAQA,SAAS,CAACO,SAAS,CAAC;QAC1B,KAAKT,sBAAsB,CAAC4B,iCAAiC;UAC3DnB,SAAS,EAAE;UACX,QAAQP,SAAS,CAACO,SAAS,CAAC;YAC1B,KAAKT,sBAAsB,CAAC4C,qCAAqC;cAC/D,IAAIC,QAAQ,GAAkB,IAAI9D,eAAA,CAAAsB,OAAa,EAAE;cACjDI,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAEoC,QAAQ,CAAC;cACrFlC,cAAc,CAACmC,WAAW,CAACD,QAAQ,CAACZ,QAAQ,EAAE,CAAC;cAC/C;YACF,KAAKjC,sBAAsB,CAAC+C,kCAAkC;cAC5D,IAAIC,MAAM,GAAkB,IAAIjE,eAAA,CAAAsB,OAAa,EAAE;cAC/CI,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAEuC,MAAM,CAAC;cACnFrC,cAAc,CAACsC,SAAS,CAACD,MAAM,CAACf,QAAQ,EAAE,CAAC;cAC3C;YACF,KAAKjC,sBAAsB,CAACkD,qCAAqC;cAC/D,IAAIC,SAAS,GAAkB,IAAIpE,eAAA,CAAAsB,OAAa,EAAE;cAClDI,SAAS,GAAGT,sBAAsB,CAACa,cAAc,CAACX,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAE0C,SAAS,CAAC;cACtFxC,cAAc,CAACyC,YAAY,CAACD,SAAS,CAAClB,QAAQ,EAAE,CAAC;cACjD;YACF,KAAKjC,sBAAsB,CAACqD,yCAAyC;cACnE,IAAIC,YAAY,GAAkB,IAAIvE,eAAA,CAAAsB,OAAa,EAAE;cACrDI,SAAS,GAAGT,sBAAsB,CAACoB,iBAAiB,CAAClB,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAE6C,YAAY,CAAC;cAC5F3C,cAAc,CAAC4C,eAAe,CAACvE,SAAA,CAAAqB,OAAO,CAACkC,QAAQ,CAACe,YAAY,CAACrB,QAAQ,EAAE,CAAC,CAAC;cACzE;YACF,KAAKjC,sBAAsB,CAACwD,sCAAsC;cAChE,IAAIC,SAAS,GAAkB,IAAI1E,eAAA,CAAAsB,OAAa,EAAE;cAClDI,SAAS,GAAGT,sBAAsB,CAACoB,iBAAiB,CAAClB,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;cACzF9C,cAAc,CAAC+C,YAAY,CAACzE,MAAA,CAAAoB,OAAI,CAACsD,SAAS,CAACF,SAAS,CAACxB,QAAQ,EAAE,CAAC,CAAC;cACjE;YACF,KAAKjC,sBAAsB,CAAC4D,oCAAoC;cAC9D,IAAIC,QAAQ,GAAkB,IAAI9E,eAAA,CAAAsB,OAAa,EAAE;cACjDI,SAAS,GAAGT,sBAAsB,CAACoB,iBAAiB,CAAClB,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAEoD,QAAQ,CAAC;cACxFlD,cAAc,CAACmD,WAAW,CAAC9E,SAAA,CAAAqB,OAAO,CAACkC,QAAQ,CAACsB,QAAQ,CAAC5B,QAAQ,EAAE,CAAC,CAAC;cACjE;YACF,KAAKjC,sBAAsB,CAAC+D,qCAAqC;cAC/D,IAAIC,QAAQ,GAAkB,IAAIjF,eAAA,CAAAsB,OAAa,EAAE;cACjDI,SAAS,GAAGT,sBAAsB,CAACoB,iBAAiB,CAAClB,SAAS,EAAEO,SAAS,GAAG,CAAC,EAAEuD,QAAQ,CAAC;cACxFrD,cAAc,CAACsD,WAAW,CAAChF,MAAA,CAAAoB,OAAI,CAACsD,SAAS,CAACK,QAAQ,CAAC/B,QAAQ,EAAE,CAAC,CAAC;cAC/D;YACF;cACE,MAAMxD,iBAAA,CAAA4B,OAAe,CAAC0B,iBAAiB,EAAE;UAAC;UAE9C;QACF,KAAK/B,sBAAsB,CAAC6B,uBAAuB;UACjDpB,SAAS,EAAE;UACXE,cAAc,CAACuD,cAAc,CAAC,IAAI,CAAC;UACnC;QACF;UACE,MAAMzF,iBAAA,CAAA4B,OAAe,CAAC0B,iBAAiB,EAAE;MAAC;;IAIhD;IACA,IAAIY,mBAAmB,KAAK,CAAC,CAAC,EAAE;MAC9B,IAAIwB,oBAAoB,GAAQ1D,SAAS,GAAGkC,mBAAmB;MAC/D,IAAIhC,cAAc,CAACyD,aAAa,EAAE,EAAE;QAClC;QACAD,oBAAoB,EAAE;;MAExBxD,cAAc,CAAC0D,eAAe,CAACvF,QAAA,CAAAuB,OAAM,CAACiE,WAAW,CAACpE,SAAS,EAAEyC,mBAAmB,EAAEA,mBAAmB,GAAGwB,oBAAoB,CAAC,CAAC;;IAGhI,OAAO1D,SAAS;EAClB,CAAC;EAED;;;;;;;;;;EAUeT,sBAAA,CAAAa,cAAc,GAA7B,UAA8BX,SAAqB,EAAEO,SAAc,EAAEL,MAAqB;IACxF;IACA,IAAImE,kBAAkB,GAAe,IAAIlC,UAAU,CAAC,CAACnC,SAAS,CAAC,CAAC,CAAC,GAAGO,SAAS,IAAI,CAAC,CAAC;IACnF;IACA,IAAI+D,kBAAkB,GAAe,IAAInC,UAAU,CAAC,CAACnC,SAAS,CAAC,CAAC,CAAC,GAAGO,SAAS,IAAI,CAAC,CAAC;IAEnF,IAAIgE,KAAK,GAAQ,CAAC;IAClB,IAAIC,GAAG,GAAY,KAAK;IACxB,OAAQjE,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,IAAK,CAACwE,GAAG,EAAE;MACzC,IAAIhE,IAAI,GAAQR,SAAS,CAACO,SAAS,EAAE,CAAC;MACtC,IAAIC,IAAI,GAAGV,sBAAsB,CAACY,0BAA0B,EAAE;QAC5D2D,kBAAkB,CAACE,KAAK,CAAC,GAAG/D,IAAI,GAAG,EAAE;QACrC6D,kBAAkB,CAACE,KAAK,GAAG,CAAC,CAAC,GAAG/D,IAAI,GAAG,EAAE;QACzC+D,KAAK,IAAI,CAAC;OACX,MAAM;QACL,QAAQ/D,IAAI;UACV,KAAKV,sBAAsB,CAACY,0BAA0B;YACpD;YACA2D,kBAAkB,CAACE,KAAK,EAAE,CAAC,GAAGzE,sBAAsB,CAACY,0BAA0B;YAC/E;UACF,KAAKZ,sBAAsB,CAACc,0BAA0B;UACtD,KAAKd,sBAAsB,CAACe,4BAA4B;UACxD,KAAKf,sBAAsB,CAACmB,6BAA6B;UACzD,KAAKnB,sBAAsB,CAAC0B,gCAAgC;UAC5D,KAAK1B,sBAAsB,CAAC4B,iCAAiC;UAC7D,KAAK5B,sBAAsB,CAAC6B,uBAAuB;YACjDpB,SAAS,EAAE;YACXiE,GAAG,GAAG,IAAI;YACV;UACF,KAAK1E,sBAAsB,CAACiB,kCAAkC;YAC5D;YACA;YACA;YACA;YACA;YACA;YACAsD,kBAAkB,CAACE,KAAK,CAAC,GAAGzE,sBAAsB,CAACiB,kCAAkC;YACrFP,IAAI,GAAGR,SAAS,CAACO,SAAS,EAAE,CAAC;YAC7B+D,kBAAkB,CAACC,KAAK,CAAC,GAAG/D,IAAI;YAChC+D,KAAK,EAAE;YACP;QAAM;;;IAIdzE,sBAAsB,CAAC2E,oBAAoB,CAACJ,kBAAkB,EAAEC,kBAAkB,EAAEC,KAAK,EAAErE,MAAM,CAAC;IAClG,OAAOK,SAAS;EAClB,CAAC;EAED;;;;;;;;;;;;;;;;EAgBeT,sBAAA,CAAA2E,oBAAoB,GAAnC,UAAoCJ,kBAA8B,EAChEC,kBAA8B,EAC9B1C,MAAW,EACX1B,MAAqB;IACrB;IACA;IACA;IACA;IACA,IAAIwE,OAAO,GAASxF,IAAI,CAACyF,KAAK;IAC9B,IAAIC,gBAAgB,GAAS1F,IAAI,CAACyF,KAAK;IACvC,IAAI9E,CAAC,GAAQ,CAAC;IACd,OAAOA,CAAC,GAAG+B,MAAM,EAAE;MACjB,IAAIiD,SAAS,GAAQR,kBAAkB,CAACxE,CAAC,CAAC;MAC1C,IAAIiF,EAAE,GAAE,QAAkB,EAAE;MAC5B,QAAQJ,OAAO;QACb,KAAKxF,IAAI,CAACyF,KAAK;UACb;UACA,IAAIE,SAAS,GAAG,EAAE,EAAE;YAClB;YACA;YACAC,EAAE,GAAG,4BAA6BC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGH,SAAS,CAAC;WACtE,MAAM;YACL,QAAQA,SAAS;cACf,KAAK,EAAE;gBACLC,EAAE,GAAG,GAAG;gBACR;cACF,KAAKhF,sBAAsB,CAACmF,EAAE;gBAC5BP,OAAO,GAAGxF,IAAI,CAACgG,KAAK;gBACpB;cACF,KAAKpF,sBAAsB,CAACqF,EAAE;gBAC5BT,OAAO,GAAGxF,IAAI,CAACkG,KAAK;gBACpB;cACF,KAAKtF,sBAAsB,CAACuF,EAAE;gBAC5B;gBACAT,gBAAgB,GAAGF,OAAO;gBAC1BA,OAAO,GAAGxF,IAAI,CAACoG,WAAW;gBAC1B;cACF,KAAKxF,sBAAsB,CAACiB,kCAAkC;gBAC5Db,MAAM,CAACc,MAAM,EAAC,UAAWsD,kBAAkB,CAACzE,CAAC,CAAC,CAAC;gBAC/C;cACF,KAAKC,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;QAEF,KAAKzF,IAAI,CAACgG,KAAK;UACb;UACA,IAAIL,SAAS,GAAG,EAAE,EAAE;YAClBC,EAAE,GAAG,2BAA2BC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGH,SAAS,CAAC;WACpE,MAAM;YACL,QAAQA,SAAS;cACf,KAAK,EAAE;gBACLC,EAAE,GAAG,GAAG;gBACR;cACF,KAAKhF,sBAAsB,CAACyF,EAAE;gBAC5B;gBACAX,gBAAgB,GAAGF,OAAO;gBAC1BA,OAAO,GAAGxF,IAAI,CAACsG,WAAW;gBAC1B;cACF,KAAK1F,sBAAsB,CAACqF,EAAE;gBAC5BT,OAAO,GAAGxF,IAAI,CAACkG,KAAK;gBACpB;cACF,KAAKtF,sBAAsB,CAACuF,EAAE;gBAC5B;gBACAT,gBAAgB,GAAGF,OAAO;gBAC1BA,OAAO,GAAGxF,IAAI,CAACoG,WAAW;gBAC1B;cACF,KAAKxF,sBAAsB,CAACiB,kCAAkC;gBAC5D;gBACAb,MAAM,CAACc,MAAM,EAAC,UAAWsD,kBAAkB,CAACzE,CAAC,CAAC,CAAC;gBAC/C;cACF,KAAKC,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;QAEF,KAAKzF,IAAI,CAACkG,KAAK;UACb;UACA,IAAIP,SAAS,GAAG/E,sBAAsB,CAAC2F,EAAE,EAAE;YACzCX,EAAE,GAAGhF,sBAAsB,CAAC4F,WAAW,CAACb,SAAS,CAAC;WACnD,MAAM;YACL,QAAQA,SAAS;cACf,KAAK/E,sBAAsB,CAAC2F,EAAE;gBAC5Bf,OAAO,GAAGxF,IAAI,CAACyG,KAAK;gBACpB;cACF,KAAK,EAAE;gBACLb,EAAE,GAAG,GAAG;gBACR;cACF,KAAKhF,sBAAsB,CAACmF,EAAE;gBAC5BP,OAAO,GAAGxF,IAAI,CAACgG,KAAK;gBACpB;cACF,KAAKpF,sBAAsB,CAAC8F,EAAE;gBAC5BlB,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;cACF,KAAK7E,sBAAsB,CAACuF,EAAE;gBAC5B;gBACAT,gBAAgB,GAAGF,OAAO;gBAC1BA,OAAO,GAAGxF,IAAI,CAACoG,WAAW;gBAC1B;cACF,KAAKxF,sBAAsB,CAACiB,kCAAkC;gBAC5Db,MAAM,CAACc,MAAM,EAAC,UAAWsD,kBAAkB,CAACzE,CAAC,CAAC,CAAC;gBAC/C;cACF,KAAKC,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;QAEF,KAAKzF,IAAI,CAACyG,KAAK;UACb;UACA,IAAId,SAAS,GAAG/E,sBAAsB,CAAC+F,GAAG,EAAE;YAC1Cf,EAAE,GAAGhF,sBAAsB,CAACgG,WAAW,CAACjB,SAAS,CAAC;WACnD,MAAM;YACL,QAAQA,SAAS;cACf,KAAK/E,sBAAsB,CAAC+F,GAAG;gBAC7BnB,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;cACF,KAAK7E,sBAAsB,CAACiB,kCAAkC;gBAC5Db,MAAM,CAACc,MAAM,EAAC,UAAWsD,kBAAkB,CAACzE,CAAC,CAAC,CAAC;gBAC/C;cACF,KAAKC,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;QAEF,KAAKzF,IAAI,CAACsG,WAAW;UACnB;UACAd,OAAO,GAAGE,gBAAgB;UAC1B,IAAIC,SAAS,GAAG,EAAE,EAAE;YAClBC,EAAE,GAAG,2BAA4BC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGH,SAAS,CAAC;WACrE,MAAM;YACL,QAAQA,SAAS;cACf,KAAK,EAAE;gBACLC,EAAE,GAAG,GAAG;gBACR;cACF,KAAKhF,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;QAEF,KAAKzF,IAAI,CAACoG,WAAW;UACnB;UACAZ,OAAO,GAAGE,gBAAgB;UAC1B,IAAIC,SAAS,GAAG/E,sBAAsB,CAAC+F,GAAG,EAAE;YAC1Cf,EAAE,GAAGhF,sBAAsB,CAACgG,WAAW,CAACjB,SAAS,CAAC;WACnD,MAAM;YACL,QAAQA,SAAS;cACf,KAAK/E,sBAAsB,CAAC+F,GAAG;gBAC7BnB,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;cACF,KAAK7E,sBAAsB,CAACiB,kCAAkC;gBAC5D;gBACA;gBACAb,MAAM,CAACc,MAAM,EAAC,UAAWsD,kBAAkB,CAACzE,CAAC,CAAC,CAAC;gBAC/C;cACF,KAAKC,sBAAsB,CAACY,0BAA0B;gBACpDgE,OAAO,GAAGxF,IAAI,CAACyF,KAAK;gBACpB;YAAM;;UAGZ;MAAM;MAEV;MACA,IAAIG,EAAE,KAAK,EAAE,EAAE;QACb;QACA5E,MAAM,CAACc,MAAM,CAAC8D,EAAE,CAAC;;MAEnBjF,CAAC,EAAE;;EAEP,CAAC;EAED;;;;;;;;;;;;EAYuBC,sBAAA,CAAAgB,cAAc,GAArC,UAAsCiF,IAAS,EAC7C/F,SAAqB,EACrBI,QAAqC,EACrCG,SAAc,EACdL,MAAqB;IACrB,IAAI8F,YAAY,GAA0B,IAAIhH,uBAAA,CAAAmB,OAAqB,EAAE;IACrE,IAAI8F,KAAK,GAAQ,CAAC;IAClB,IAAIC,KAAK,GAAE,QAAkB,CAAC;IAC9B,IAAI1B,GAAG,GAAY,KAAK;IAExB,QAAQuB,IAAI;MACV,KAAKjG,sBAAsB,CAACc,0BAA0B;QACpD;QACA;QAEA,IAAIuF,sBAAsB,GAAe,IAAIhE,UAAU,CAAC,CAAC,CAAC;QAC1D,IAAIiE,QAAQ,GAAQpG,SAAS,CAACO,SAAS,EAAE,CAAC;QAC1C,OAAQA,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,IAAK,CAACwE,GAAG,EAAE;UACzC2B,sBAAsB,CAACF,KAAK,EAAE,CAAC,GAAGG,QAAQ;UAC1C;UACAF,KAAK,GAAG,GAAG,GAAGA,KAAK,GAAGE,QAAQ;UAC9BA,QAAQ,GAAGpG,SAAS,CAACO,SAAS,EAAE,CAAC;UACjC;UACA,QAAQ6F,QAAQ;YACd,KAAKtG,sBAAsB,CAACY,0BAA0B;YACtD,KAAKZ,sBAAsB,CAACc,0BAA0B;YACtD,KAAKd,sBAAsB,CAACmB,6BAA6B;YACzD,KAAKnB,sBAAsB,CAACe,4BAA4B;YACxD,KAAKf,sBAAsB,CAAC0B,gCAAgC;YAC5D,KAAK1B,sBAAsB,CAAC4B,iCAAiC;YAC7D,KAAK5B,sBAAsB,CAAC6B,uBAAuB;cACjDpB,SAAS,EAAE;cACXiE,GAAG,GAAG,IAAI;cACV;YACF;cACE,IAAKyB,KAAK,GAAG,CAAC,KAAK,CAAC,IAAMA,KAAK,GAAG,CAAE,EAAE;gBACpC;gBACA;gBACA,KAAK,IAAII,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;kBAClC;;;;kBAIAL,YAAY,CAACM,KAAK,EAAC,UAAUC,MAAM,CAAC/G,YAAY,CAAC0G,KAAK,CAAC,IAAI1G,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG6G,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAExFH,KAAK,GAAG,CAAC;gBACTD,KAAK,GAAG,CAAC;;cAEX;UAAM;;QAIZ;QACA,IAAI1F,SAAS,KAAKP,SAAS,CAAC,CAAC,CAAC,IAAIoG,QAAQ,GAAGtG,sBAAsB,CAACY,0BAA0B,EAAE;UAC9FyF,sBAAsB,CAACF,KAAK,EAAE,CAAC,GAAGG,QAAQ;;QAG5C;QACA;QACA;QACA,KAAK,IAAIvG,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAGoG,KAAK,EAAEpG,CAAC,EAAE,EAAE;UACtCmG,YAAY,CAACM,KAAK,EAAC,UAAWH,sBAAsB,CAACtG,CAAC,CAAC,CAAC;;QAG1D;MAEF,KAAKC,sBAAsB,CAACe,4BAA4B;QACtD;QACA;QACA,OAAON,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,IAAI,CAACwE,GAAG,EAAE;UACvC,IAAIhE,IAAI,GAAQR,SAAS,CAACO,SAAS,EAAE,CAAC;UACtC,IAAIC,IAAI,GAAGV,sBAAsB,CAACY,0BAA0B,EAAE;YAC5DuF,KAAK,EAAE;YACP;YACAC,KAAK,GAAG,GAAG,GAAGA,KAAK,GAAG1F,IAAI;WAC3B,MAAM;YACL,QAAQA,IAAI;cACV,KAAKV,sBAAsB,CAACY,0BAA0B;cACtD,KAAKZ,sBAAsB,CAACc,0BAA0B;cACtD,KAAKd,sBAAsB,CAACmB,6BAA6B;cACzD,KAAKnB,sBAAsB,CAACe,4BAA4B;cACxD,KAAKf,sBAAsB,CAAC0B,gCAAgC;cAC5D,KAAK1B,sBAAsB,CAAC4B,iCAAiC;cAC7D,KAAK5B,sBAAsB,CAAC6B,uBAAuB;gBACjDpB,SAAS,EAAE;gBACXiE,GAAG,GAAG,IAAI;gBACV;YAAM;;UAGZ,IAAKyB,KAAK,GAAG,CAAC,KAAK,CAAC,IAAMA,KAAK,GAAG,CAAE,EAAE;YACpC;YACA;YACA;;;;YAIA,KAAK,IAAII,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;cAClCL,YAAY,CAACM,KAAK,EAAC,UAAUC,MAAM,CAAC/G,YAAY,CAAC0G,KAAK,CAAC,IAAI1G,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG6G,CAAC,CAAC,CAAC,CAAC,CAAC;;YAExFH,KAAK,GAAG,CAAC;YACTD,KAAK,GAAG,CAAC;;;QAGb;IAAM;IAEV/F,MAAM,CAACc,MAAM,CAAC/B,gBAAA,CAAAkB,OAAc,CAACJ,MAAM,CAACiG,YAAY,CAACQ,WAAW,EAAE,EAAEpG,QAAQ,CAAC,CAAC;IAC1E,OAAOG,SAAS;EAClB,CAAC;EAED;;;;;;;;;;EAUeT,sBAAA,CAAAoB,iBAAiB,GAAhC,UAAiClB,SAAqB,EAAEO,SAAiB,CAAC,SAASL,MAAqB;IACtG,IAAI+F,KAAK,GAAQ,CAAC;IAClB,IAAIzB,GAAG,GAAY,KAAK;IAExB,IAAIiC,gBAAgB,GAAe,IAAItE,UAAU,CAACrC,sBAAsB,CAAC4G,qBAAqB,CAAC;IAE/F,OAAOnG,SAAS,GAAGP,SAAS,CAAC,CAAC,CAAC,IAAI,CAACwE,GAAG,EAAE;MACvC,IAAIhE,IAAI,GAAQR,SAAS,CAACO,SAAS,EAAE,CAAC;MACtC,IAAIA,SAAS,KAAKP,SAAS,CAAC,CAAC,CAAC,EAAE;QAC9BwE,GAAG,GAAG,IAAI;;MAEZ,IAAIhE,IAAI,GAAGV,sBAAsB,CAACY,0BAA0B,EAAE;QAC5D+F,gBAAgB,CAACR,KAAK,CAAC,GAAGzF,IAAI;QAC9ByF,KAAK,EAAE;OACR,MAAM;QACL,QAAQzF,IAAI;UACV,KAAKV,sBAAsB,CAACY,0BAA0B;UACtD,KAAKZ,sBAAsB,CAACc,0BAA0B;UACtD,KAAKd,sBAAsB,CAACe,4BAA4B;UACxD,KAAKf,sBAAsB,CAAC0B,gCAAgC;UAC5D,KAAK1B,sBAAsB,CAAC4B,iCAAiC;UAC7D,KAAK5B,sBAAsB,CAAC6B,uBAAuB;YACjDpB,SAAS,EAAE;YACXiE,GAAG,GAAG,IAAI;YACV;QAAM;;MAGZ,IAAI,CAACyB,KAAK,GAAGnG,sBAAsB,CAAC4G,qBAAqB,KAAK,CAAC,IAAIlG,IAAI,KAAKV,sBAAsB,CAACmB,6BAA6B,IAAIuD,GAAG,KAAKyB,KAAK,GAAG,CAAC,EAAE;QACrJ;QACA;QACA;QACA;QACA/F,MAAM,CAACc,MAAM,CAAClB,sBAAsB,CAACwC,qBAAqB,CAACmE,gBAAgB,EAAER,KAAK,CAAC,CAAC;QACpFA,KAAK,GAAG,CAAC;;;IAGb,OAAO1F,SAAS;EAClB,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4CeT,sBAAA,CAAAwC,qBAAqB,GAApC,UAAqCtC,SAAqB,EAAEiG,KAAU;IACpE,IAAI/F,MAAM,GAAGV,YAAY,CAAC,CAAC,CAAC;IAC5B,KAAK,IAAIK,CAAC,CAAC,UAAU,CAAC,EAAEA,CAAC,GAAGoG,KAAK,EAAEpG,CAAC,EAAE,EAAE;MACtCK,MAAM,IAAIJ,sBAAsB,CAACH,MAAM,CAACsG,KAAK,GAAGpG,CAAC,GAAG,CAAC,CAAC,GAAGL,YAAY,CAACQ,SAAS,CAACH,CAAC,CAAC,CAAC;;IAErF,IAAI8G,YAAY,GAAWzG,MAAM,CAAC6B,QAAQ,EAAE;IAC5C,IAAI4E,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAClC,MAAM,IAAIrI,iBAAA,CAAA4B,OAAe,EAAE;;IAE7B,OAAOwG,YAAY,CAACE,SAAS,CAAC,CAAC,CAAC;EAClC,CAAC;EAjsBwB/G,sBAAA,CAAAY,0BAA0B,GAAQ,GAAG;EACrCZ,sBAAA,CAAAc,0BAA0B,GAAQ,GAAG;EACrCd,sBAAA,CAAAmB,6BAA6B,GAAQ,GAAG;EACxCnB,sBAAA,CAAAe,4BAA4B,GAAQ,GAAG;EACvCf,sBAAA,CAAAyB,gBAAgB,GAAQ,GAAG;EAC3BzB,sBAAA,CAAAwB,mBAAmB,GAAQ,GAAG;EAC9BxB,sBAAA,CAAAqB,WAAW,GAAQ,GAAG;EACtBrB,sBAAA,CAAA0B,gCAAgC,GAAQ,GAAG;EAC3C1B,sBAAA,CAAA4B,iCAAiC,GAAQ,GAAG;EAC5C5B,sBAAA,CAAA6B,uBAAuB,GAAQ,GAAG;EAClC7B,sBAAA,CAAAiB,kCAAkC,GAAQ,GAAG;EAC7CjB,sBAAA,CAAA4G,qBAAqB,GAAQ,EAAE;EAE/B5G,sBAAA,CAAA4C,qCAAqC,GAAQ,CAAC;EAC9C5C,sBAAA,CAAAqD,yCAAyC,GAAQ,CAAC;EAClDrD,sBAAA,CAAAwD,sCAAsC,GAAQ,CAAC;EAC/CxD,sBAAA,CAAA+C,kCAAkC,GAAQ,CAAC;EAC3C/C,sBAAA,CAAAkD,qCAAqC,GAAQ,CAAC;EAC9ClD,sBAAA,CAAA+D,qCAAqC,GAAQ,CAAC;EAC9C/D,sBAAA,CAAA4D,oCAAoC,GAAQ,CAAC;EAE7C5D,sBAAA,CAAA2F,EAAE,GAAQ,EAAE;EACZ3F,sBAAA,CAAAmF,EAAE,GAAQ,EAAE;EACZnF,sBAAA,CAAAyF,EAAE,GAAQ,EAAE;EACZzF,sBAAA,CAAAqF,EAAE,GAAQ,EAAE;EACZrF,sBAAA,CAAA8F,EAAE,GAAQ,EAAE;EACZ9F,sBAAA,CAAAuF,EAAE,GAAQ,EAAE;EACZvF,sBAAA,CAAA+F,GAAG,GAAQ,EAAE;EAEb/F,sBAAA,CAAAgG,WAAW,GAClC,oCAAoC;EAEbhG,sBAAA,CAAA4F,WAAW,GAClC,6BAA6B;EAE/B;;;;EAIyB5F,sBAAA,CAAAH,MAAM,GAAaR,oBAAoB,EAAE,GAAGO,SAAS,EAAE,GAAG,EAAE;EAE5DI,sBAAA,CAAAmC,4BAA4B,GAAQ,CAAC;EA0pBhE,OAAAnC,sBAAC;CAAA,EArsBD;kBAA+BA,sBAAsB"},"metadata":{},"sourceType":"script"}