{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n/*import java.util.Arrays;*/\nvar BitArray_1 = require(\"./BitArray\");\nvar System_1 = require(\"../util/System\");\nvar Arrays_1 = require(\"../util/Arrays\");\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\n * module, x is the column position, and y is the row position. The ordering is always x, y.\n * The origin is at the top-left.</p>\n *\n * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\n * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\n * efficiently.</p>\n *\n * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\n * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar BitMatrix /*implements Cloneable*/ = /** @class */function () {\n  /**\n   * Creates an empty square {@link BitMatrix}.\n   *\n   * @param dimension height and width\n   */\n  // public constructor(dimension: number /*int*/) {\n  //   this(dimension, dimension)\n  // }\n  /**\n   * Creates an empty {@link BitMatrix}.\n   *\n   * @param width bit matrix width\n   * @param height bit matrix height\n   */\n  // public constructor(width: number /*int*/, height: number /*int*/) {\n  //   if (width < 1 || height < 1) {\n  //     throw new IllegalArgumentException(\"Both dimensions must be greater than 0\")\n  //   }\n  //   this.width = width\n  //   this.height = height\n  //   this.rowSize = (width + 31) / 32\n  //   bits = new int[rowSize * height];\n  // }\n  function BitMatrix(width /*int*/, height /*int*/, rowSize /*int*/, bits) {\n    this.width = width;\n    this.height = height;\n    this.rowSize = rowSize;\n    this.bits = bits;\n    if (undefined === height || null === height) {\n      height = width;\n    }\n    this.height = height;\n    if (width < 1 || height < 1) {\n      throw new IllegalArgumentException_1.default('Both dimensions must be greater than 0');\n    }\n    if (undefined === rowSize || null === rowSize) {\n      rowSize = Math.floor((width + 31) / 32);\n    }\n    this.rowSize = rowSize;\n    if (undefined === bits || null === bits) {\n      this.bits = new Int32Array(this.rowSize * this.height);\n    }\n  }\n  /**\n   * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\n   *\n   * @function parse\n   * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\n   * @return {@link BitMatrix} representation of image\n   */\n  BitMatrix.parseFromBooleanArray = function (image) {\n    var height = image.length;\n    var width = image[0].length;\n    var bits = new BitMatrix(width, height);\n    for (var i = 0; i < height; i++) {\n      var imageI = image[i];\n      for (var j = 0; j < width; j++) {\n        if (imageI[j]) {\n          bits.set(j, i);\n        }\n      }\n    }\n    return bits;\n  };\n  /**\n   *\n   * @function parse\n   * @param stringRepresentation\n   * @param setString\n   * @param unsetString\n   */\n  BitMatrix.parseFromString = function (stringRepresentation, setString, unsetString) {\n    if (stringRepresentation === null) {\n      throw new IllegalArgumentException_1.default('stringRepresentation cannot be null');\n    }\n    var bits = new Array(stringRepresentation.length);\n    var bitsPos = 0;\n    var rowStartPos = 0;\n    var rowLength = -1;\n    var nRows = 0;\n    var pos = 0;\n    while (pos < stringRepresentation.length) {\n      if (stringRepresentation.charAt(pos) === '\\n' || stringRepresentation.charAt(pos) === '\\r') {\n        if (bitsPos > rowStartPos) {\n          if (rowLength === -1) {\n            rowLength = bitsPos - rowStartPos;\n          } else if (bitsPos - rowStartPos !== rowLength) {\n            throw new IllegalArgumentException_1.default('row lengths do not match');\n          }\n          rowStartPos = bitsPos;\n          nRows++;\n        }\n        pos++;\n      } else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\n        pos += setString.length;\n        bits[bitsPos] = true;\n        bitsPos++;\n      } else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\n        pos += unsetString.length;\n        bits[bitsPos] = false;\n        bitsPos++;\n      } else {\n        throw new IllegalArgumentException_1.default('illegal character encountered: ' + stringRepresentation.substring(pos));\n      }\n    }\n    // no EOL at end?\n    if (bitsPos > rowStartPos) {\n      if (rowLength === -1) {\n        rowLength = bitsPos - rowStartPos;\n      } else if (bitsPos - rowStartPos !== rowLength) {\n        throw new IllegalArgumentException_1.default('row lengths do not match');\n      }\n      nRows++;\n    }\n    var matrix = new BitMatrix(rowLength, nRows);\n    for (var i = 0; i < bitsPos; i++) {\n      if (bits[i]) {\n        matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\n      }\n    }\n    return matrix;\n  };\n  /**\n   * <p>Gets the requested bit, where true means black.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   * @return value of given bit in matrix\n   */\n  BitMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    return (this.bits[offset] >>> (x & 0x1f) & 1) !== 0;\n  };\n  /**\n   * <p>Sets the given bit to true.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   */\n  BitMatrix.prototype.set = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] |= 1 << (x & 0x1f) & 0xFFFFFFFF;\n  };\n  BitMatrix.prototype.unset = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] &= ~(1 << (x & 0x1f) & 0xFFFFFFFF);\n  };\n  /**\n   * <p>Flips the given bit.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   */\n  BitMatrix.prototype.flip = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] ^= 1 << (x & 0x1f) & 0xFFFFFFFF;\n  };\n  /**\n   * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\n   * mask bit is set.\n   *\n   * @param mask XOR mask\n   */\n  BitMatrix.prototype.xor = function (mask) {\n    if (this.width !== mask.getWidth() || this.height !== mask.getHeight() || this.rowSize !== mask.getRowSize()) {\n      throw new IllegalArgumentException_1.default('input matrix dimensions do not match');\n    }\n    var rowArray = new BitArray_1.default(Math.floor(this.width / 32) + 1);\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    for (var y = 0, height = this.height; y < height; y++) {\n      var offset = y * rowSize;\n      var row = mask.getRow(y, rowArray).getBitArray();\n      for (var x = 0; x < rowSize; x++) {\n        bits[offset + x] ^= row[x];\n      }\n    }\n  };\n  /**\n   * Clears all bits (sets to false).\n   */\n  BitMatrix.prototype.clear = function () {\n    var bits = this.bits;\n    var max = bits.length;\n    for (var i = 0; i < max; i++) {\n      bits[i] = 0;\n    }\n  };\n  /**\n   * <p>Sets a square region of the bit matrix to true.</p>\n   *\n   * @param left The horizontal position to begin at (inclusive)\n   * @param top The vertical position to begin at (inclusive)\n   * @param width The width of the region\n   * @param height The height of the region\n   */\n  BitMatrix.prototype.setRegion = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    if (top < 0 || left < 0) {\n      throw new IllegalArgumentException_1.default('Left and top must be nonnegative');\n    }\n    if (height < 1 || width < 1) {\n      throw new IllegalArgumentException_1.default('Height and width must be at least 1');\n    }\n    var right = left + width;\n    var bottom = top + height;\n    if (bottom > this.height || right > this.width) {\n      throw new IllegalArgumentException_1.default('The region must fit inside the matrix');\n    }\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    for (var y = top; y < bottom; y++) {\n      var offset = y * rowSize;\n      for (var x = left; x < right; x++) {\n        bits[offset + Math.floor(x / 32)] |= 1 << (x & 0x1f) & 0xFFFFFFFF;\n      }\n    }\n  };\n  /**\n   * A fast method to retrieve one row of data from the matrix as a BitArray.\n   *\n   * @param y The row to retrieve\n   * @param row An optional caller-allocated BitArray, will be allocated if null or too small\n   * @return The resulting BitArray - this reference should always be used even when passing\n   *         your own row\n   */\n  BitMatrix.prototype.getRow = function (y /*int*/, row) {\n    if (row === null || row === undefined || row.getSize() < this.width) {\n      row = new BitArray_1.default(this.width);\n    } else {\n      row.clear();\n    }\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var offset = y * rowSize;\n    for (var x = 0; x < rowSize; x++) {\n      row.setBulk(x * 32, bits[offset + x]);\n    }\n    return row;\n  };\n  /**\n   * @param y row to set\n   * @param row {@link BitArray} to copy from\n   */\n  BitMatrix.prototype.setRow = function (y /*int*/, row) {\n    System_1.default.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\n  };\n  /**\n   * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\n   */\n  BitMatrix.prototype.rotate180 = function () {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var topRow = new BitArray_1.default(width);\n    var bottomRow = new BitArray_1.default(width);\n    for (var i = 0, length_1 = Math.floor((height + 1) / 2); i < length_1; i++) {\n      topRow = this.getRow(i, topRow);\n      bottomRow = this.getRow(height - 1 - i, bottomRow);\n      topRow.reverse();\n      bottomRow.reverse();\n      this.setRow(i, bottomRow);\n      this.setRow(height - 1 - i, topRow);\n    }\n  };\n  /**\n   * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\n   *\n   * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\n   */\n  BitMatrix.prototype.getEnclosingRectangle = function () {\n    var width = this.width;\n    var height = this.height;\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var left = width;\n    var top = height;\n    var right = -1;\n    var bottom = -1;\n    for (var y = 0; y < height; y++) {\n      for (var x32 = 0; x32 < rowSize; x32++) {\n        var theBits = bits[y * rowSize + x32];\n        if (theBits !== 0) {\n          if (y < top) {\n            top = y;\n          }\n          if (y > bottom) {\n            bottom = y;\n          }\n          if (x32 * 32 < left) {\n            var bit = 0;\n            while ((theBits << 31 - bit & 0xFFFFFFFF) === 0) {\n              bit++;\n            }\n            if (x32 * 32 + bit < left) {\n              left = x32 * 32 + bit;\n            }\n          }\n          if (x32 * 32 + 31 > right) {\n            var bit = 31;\n            while (theBits >>> bit === 0) {\n              bit--;\n            }\n            if (x32 * 32 + bit > right) {\n              right = x32 * 32 + bit;\n            }\n          }\n        }\n      }\n    }\n    if (right < left || bottom < top) {\n      return null;\n    }\n    return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\n  };\n  /**\n   * This is useful in detecting a corner of a 'pure' barcode.\n   *\n   * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\n   */\n  BitMatrix.prototype.getTopLeftOnBit = function () {\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var bitsOffset = 0;\n    while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\n      bitsOffset++;\n    }\n    if (bitsOffset === bits.length) {\n      return null;\n    }\n    var y = bitsOffset / rowSize;\n    var x = bitsOffset % rowSize * 32;\n    var theBits = bits[bitsOffset];\n    var bit = 0;\n    while ((theBits << 31 - bit & 0xFFFFFFFF) === 0) {\n      bit++;\n    }\n    x += bit;\n    return Int32Array.from([x, y]);\n  };\n  BitMatrix.prototype.getBottomRightOnBit = function () {\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var bitsOffset = bits.length - 1;\n    while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\n      bitsOffset--;\n    }\n    if (bitsOffset < 0) {\n      return null;\n    }\n    var y = Math.floor(bitsOffset / rowSize);\n    var x = Math.floor(bitsOffset % rowSize) * 32;\n    var theBits = bits[bitsOffset];\n    var bit = 31;\n    while (theBits >>> bit === 0) {\n      bit--;\n    }\n    x += bit;\n    return Int32Array.from([x, y]);\n  };\n  /**\n   * @return The width of the matrix\n   */\n  BitMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n  /**\n   * @return The height of the matrix\n   */\n  BitMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n  /**\n   * @return The row size of the matrix\n   */\n  BitMatrix.prototype.getRowSize = function () {\n    return this.rowSize;\n  };\n  /*@Override*/\n  BitMatrix.prototype.equals = function (o) {\n    if (!(o instanceof BitMatrix)) {\n      return false;\n    }\n    var other = o;\n    return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize && Arrays_1.default.equals(this.bits, other.bits);\n  };\n  /*@Override*/\n  BitMatrix.prototype.hashCode = function () {\n    var hash = this.width;\n    hash = 31 * hash + this.width;\n    hash = 31 * hash + this.height;\n    hash = 31 * hash + this.rowSize;\n    hash = 31 * hash + Arrays_1.default.hashCode(this.bits);\n    return hash;\n  };\n  /**\n   * @return string representation using \"X\" for set and \" \" for unset bits\n   */\n  /*@Override*/\n  // public toString(): string {\n  //   return toString(\": \"X, \"  \")\n  // }\n  /**\n   * @param setString representation of a set bit\n   * @param unsetString representation of an unset bit\n   * @return string representation of entire matrix utilizing given strings\n   */\n  // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\n  //   return this.buildToString(setString, unsetString, \"\\n\")\n  // }\n  /**\n   * @param setString representation of a set bit\n   * @param unsetString representation of an unset bit\n   * @param lineSeparator newline character in string representation\n   * @return string representation of entire matrix utilizing given strings and line separator\n   * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\n   */\n  // @Deprecated\n  BitMatrix.prototype.toString = function (setString, unsetString, lineSeparator) {\n    if (setString === void 0) {\n      setString = 'X ';\n    }\n    if (unsetString === void 0) {\n      unsetString = '  ';\n    }\n    if (lineSeparator === void 0) {\n      lineSeparator = '\\n';\n    }\n    return this.buildToString(setString, unsetString, lineSeparator);\n  };\n  BitMatrix.prototype.buildToString = function (setString, unsetString, lineSeparator) {\n    var result = new StringBuilder_1.default();\n    // result.append(lineSeparator);\n    for (var y = 0, height = this.height; y < height; y++) {\n      for (var x = 0, width = this.width; x < width; x++) {\n        result.append(this.get(x, y) ? setString : unsetString);\n      }\n      result.append(lineSeparator);\n    }\n    return result.toString();\n  };\n  /*@Override*/\n  BitMatrix.prototype.clone = function () {\n    return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\n  };\n  return BitMatrix;\n}();\nexports.default = BitMatrix;","map":{"version":3,"names":["BitArray_1","require","System_1","Arrays_1","StringBuilder_1","IllegalArgumentException_1","BitMatrix","width","height","rowSize","bits","undefined","default","Math","floor","Int32Array","parseFromBooleanArray","image","length","i","imageI","j","set","parseFromString","stringRepresentation","setString","unsetString","Array","bitsPos","rowStartPos","rowLength","nRows","pos","charAt","substring","matrix","prototype","get","x","y","offset","unset","flip","xor","mask","getWidth","getHeight","getRowSize","rowArray","row","getRow","getBitArray","clear","max","setRegion","left","top","right","bottom","getSize","setBulk","setRow","arraycopy","rotate180","topRow","bottomRow","length_1","reverse","getEnclosingRectangle","x32","theBits","bit","from","getTopLeftOnBit","bitsOffset","getBottomRightOnBit","equals","o","other","hashCode","hash","toString","lineSeparator","buildToString","result","append","clone","slice"],"sources":["../../../src/core/common/BitMatrix.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}