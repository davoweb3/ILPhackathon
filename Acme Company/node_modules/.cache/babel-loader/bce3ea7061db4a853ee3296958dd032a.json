{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar Formatter_1 = require(\"../../util/Formatter\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResult = /** @class */function () {\n  function DetectionResult(barcodeMetadata, boundingBox) {\n    /*final*/this.ADJUST_ROW_NUMBER_SKIP = 2;\n    this.barcodeMetadata = barcodeMetadata;\n    this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n    this.boundingBox = boundingBox;\n    // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n    this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n  }\n  DetectionResult.prototype.getDetectionResultColumns = function () {\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n    var unadjustedCodewordCount = PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE;\n    var previousUnadjustedCount;\n    do {\n      previousUnadjustedCount = unadjustedCodewordCount;\n      unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n    } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n    return this.detectionResultColumns;\n  };\n  DetectionResult.prototype.adjustIndicatorColumnRowNumbers = function (detectionResultColumn) {\n    if (detectionResultColumn != null) {\n      detectionResultColumn.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n    }\n  };\n  // TODO ensure that no detected codewords with unknown row number are left\n  // we should be able to estimate the row height and use it as a hint for the row number\n  // we should also fill the rows top to bottom and bottom to top\n  /**\n   * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n   * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n   */\n  DetectionResult.prototype.adjustRowNumbersAndGetCount = function () {\n    var unadjustedCount = this.adjustRowNumbersByRow();\n    if (unadjustedCount === 0) {\n      return 0;\n    }\n    for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n      var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n      for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n        if (codewords[codewordsRow] == null) {\n          continue;\n        }\n        if (!codewords[codewordsRow].hasValidRowNumber()) {\n          this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.prototype.adjustRowNumbersByRow = function () {\n    this.adjustRowNumbersFromBothRI();\n    // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n    // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n    // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n    // number starts and ends.\n    var unadjustedCount = this.adjustRowNumbersFromLRI();\n    return unadjustedCount + this.adjustRowNumbersFromRRI();\n  };\n  DetectionResult.prototype.adjustRowNumbersFromBothRI = function () {\n    if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return;\n    }\n    var LRIcodewords = this.detectionResultColumns[0].getCodewords();\n    var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n      if (LRIcodewords[codewordsRow] != null && RRIcodewords[codewordsRow] != null && LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n        for (var barcodeColumn /*int*/ = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n          if (codeword == null) {\n            continue;\n          }\n          codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n          if (!codeword.hasValidRowNumber()) {\n            this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n          }\n        }\n      }\n    }\n  };\n  DetectionResult.prototype.adjustRowNumbersFromRRI = function () {\n    if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return 0;\n    }\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n      for (var barcodeColumn /*int*/ = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.prototype.adjustRowNumbersFromLRI = function () {\n    if (this.detectionResultColumns[0] == null) {\n      return 0;\n    }\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[0].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n      for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.adjustRowNumberIfValid = function (rowIndicatorRowNumber, invalidRowCounts, codeword) {\n    if (codeword == null) {\n      return invalidRowCounts;\n    }\n    if (!codeword.hasValidRowNumber()) {\n      if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n        codeword.setRowNumber(rowIndicatorRowNumber);\n        invalidRowCounts = 0;\n      } else {\n        ++invalidRowCounts;\n      }\n    }\n    return invalidRowCounts;\n  };\n  DetectionResult.prototype.adjustRowNumbers = function (barcodeColumn, codewordsRow, codewords) {\n    var e_1, _a;\n    var codeword = codewords[codewordsRow];\n    var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n    var nextColumnCodewords = previousColumnCodewords;\n    if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n      nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n    }\n    // let otherCodewords: Codeword[] = new Codeword[14];\n    var otherCodewords = new Array(14);\n    otherCodewords[2] = previousColumnCodewords[codewordsRow];\n    otherCodewords[3] = nextColumnCodewords[codewordsRow];\n    if (codewordsRow > 0) {\n      otherCodewords[0] = codewords[codewordsRow - 1];\n      otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n      otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n    }\n    if (codewordsRow > 1) {\n      otherCodewords[8] = codewords[codewordsRow - 2];\n      otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n      otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n    }\n    if (codewordsRow < codewords.length - 1) {\n      otherCodewords[1] = codewords[codewordsRow + 1];\n      otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n      otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n    }\n    if (codewordsRow < codewords.length - 2) {\n      otherCodewords[9] = codewords[codewordsRow + 2];\n      otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n      otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n    }\n    try {\n      for (var otherCodewords_1 = __values(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {\n        var otherCodeword = otherCodewords_1_1.value;\n        if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a = otherCodewords_1.return)) _a.call(otherCodewords_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @return true, if row number was adjusted, false otherwise\n   */\n  DetectionResult.adjustRowNumber = function (codeword, otherCodeword) {\n    if (otherCodeword == null) {\n      return false;\n    }\n    if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n      codeword.setRowNumber(otherCodeword.getRowNumber());\n      return true;\n    }\n    return false;\n  };\n  DetectionResult.prototype.getBarcodeColumnCount = function () {\n    return this.barcodeColumnCount;\n  };\n  DetectionResult.prototype.getBarcodeRowCount = function () {\n    return this.barcodeMetadata.getRowCount();\n  };\n  DetectionResult.prototype.getBarcodeECLevel = function () {\n    return this.barcodeMetadata.getErrorCorrectionLevel();\n  };\n  DetectionResult.prototype.setBoundingBox = function (boundingBox) {\n    this.boundingBox = boundingBox;\n  };\n  DetectionResult.prototype.getBoundingBox = function () {\n    return this.boundingBox;\n  };\n  DetectionResult.prototype.setDetectionResultColumn = function (barcodeColumn, detectionResultColumn) {\n    this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n  };\n  DetectionResult.prototype.getDetectionResultColumn = function (barcodeColumn) {\n    return this.detectionResultColumns[barcodeColumn];\n  };\n  // @Override\n  DetectionResult.prototype.toString = function () {\n    var rowIndicatorColumn = this.detectionResultColumns[0];\n    if (rowIndicatorColumn == null) {\n      rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n    }\n    // try (\n    var formatter = new Formatter_1.default();\n    // ) {\n    for (var codewordsRow /*int*/ = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n      formatter.format('CW %3d:', codewordsRow);\n      for (var barcodeColumn /*int*/ = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n        if (this.detectionResultColumns[barcodeColumn] == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n        formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n      }\n      formatter.format('%n');\n    }\n    return formatter.toString();\n    // }\n  };\n\n  return DetectionResult;\n}();\nexports.default = DetectionResult;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/DetectionResult.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar Formatter_1 = require(\"../../util/Formatter\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResult = /** @class */ (function () {\n    function DetectionResult(barcodeMetadata, boundingBox) {\n        /*final*/ this.ADJUST_ROW_NUMBER_SKIP = 2;\n        this.barcodeMetadata = barcodeMetadata;\n        this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n        this.boundingBox = boundingBox;\n        // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n        this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n    }\n    DetectionResult.prototype.getDetectionResultColumns = function () {\n        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n        var unadjustedCodewordCount = PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE;\n        var previousUnadjustedCount;\n        do {\n            previousUnadjustedCount = unadjustedCodewordCount;\n            unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n        } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n        return this.detectionResultColumns;\n    };\n    DetectionResult.prototype.adjustIndicatorColumnRowNumbers = function (detectionResultColumn) {\n        if (detectionResultColumn != null) {\n            detectionResultColumn\n                .adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n        }\n    };\n    // TODO ensure that no detected codewords with unknown row number are left\n    // we should be able to estimate the row height and use it as a hint for the row number\n    // we should also fill the rows top to bottom and bottom to top\n    /**\n     * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n     * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n     */\n    DetectionResult.prototype.adjustRowNumbersAndGetCount = function () {\n        var unadjustedCount = this.adjustRowNumbersByRow();\n        if (unadjustedCount === 0) {\n            return 0;\n        }\n        for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n            var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n            for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                if (!codewords[codewordsRow].hasValidRowNumber()) {\n                    this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.prototype.adjustRowNumbersByRow = function () {\n        this.adjustRowNumbersFromBothRI();\n        // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n        // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n        // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n        // number starts and ends.\n        var unadjustedCount = this.adjustRowNumbersFromLRI();\n        return unadjustedCount + this.adjustRowNumbersFromRRI();\n    };\n    DetectionResult.prototype.adjustRowNumbersFromBothRI = function () {\n        if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n            return;\n        }\n        var LRIcodewords = this.detectionResultColumns[0].getCodewords();\n        var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n            if (LRIcodewords[codewordsRow] != null &&\n                RRIcodewords[codewordsRow] != null &&\n                LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n                for (var barcodeColumn /*int*/ = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n                    var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                    if (codeword == null) {\n                        continue;\n                    }\n                    codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n                    if (!codeword.hasValidRowNumber()) {\n                        this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n                    }\n                }\n            }\n        }\n    };\n    DetectionResult.prototype.adjustRowNumbersFromRRI = function () {\n        if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n            return 0;\n        }\n        var unadjustedCount = 0;\n        var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n            var invalidRowCounts = 0;\n            for (var barcodeColumn /*int*/ = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword != null) {\n                    invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                    if (!codeword.hasValidRowNumber()) {\n                        unadjustedCount++;\n                    }\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.prototype.adjustRowNumbersFromLRI = function () {\n        if (this.detectionResultColumns[0] == null) {\n            return 0;\n        }\n        var unadjustedCount = 0;\n        var codewords = this.detectionResultColumns[0].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n            var invalidRowCounts = 0;\n            for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword != null) {\n                    invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                    if (!codeword.hasValidRowNumber()) {\n                        unadjustedCount++;\n                    }\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.adjustRowNumberIfValid = function (rowIndicatorRowNumber, invalidRowCounts, codeword) {\n        if (codeword == null) {\n            return invalidRowCounts;\n        }\n        if (!codeword.hasValidRowNumber()) {\n            if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n                codeword.setRowNumber(rowIndicatorRowNumber);\n                invalidRowCounts = 0;\n            }\n            else {\n                ++invalidRowCounts;\n            }\n        }\n        return invalidRowCounts;\n    };\n    DetectionResult.prototype.adjustRowNumbers = function (barcodeColumn, codewordsRow, codewords) {\n        var e_1, _a;\n        var codeword = codewords[codewordsRow];\n        var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n        var nextColumnCodewords = previousColumnCodewords;\n        if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n            nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n        }\n        // let otherCodewords: Codeword[] = new Codeword[14];\n        var otherCodewords = new Array(14);\n        otherCodewords[2] = previousColumnCodewords[codewordsRow];\n        otherCodewords[3] = nextColumnCodewords[codewordsRow];\n        if (codewordsRow > 0) {\n            otherCodewords[0] = codewords[codewordsRow - 1];\n            otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n            otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n        }\n        if (codewordsRow > 1) {\n            otherCodewords[8] = codewords[codewordsRow - 2];\n            otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n            otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n        }\n        if (codewordsRow < codewords.length - 1) {\n            otherCodewords[1] = codewords[codewordsRow + 1];\n            otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n            otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n        }\n        if (codewordsRow < codewords.length - 2) {\n            otherCodewords[9] = codewords[codewordsRow + 2];\n            otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n            otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n        }\n        try {\n            for (var otherCodewords_1 = __values(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {\n                var otherCodeword = otherCodewords_1_1.value;\n                if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a = otherCodewords_1.return)) _a.call(otherCodewords_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * @return true, if row number was adjusted, false otherwise\n     */\n    DetectionResult.adjustRowNumber = function (codeword, otherCodeword) {\n        if (otherCodeword == null) {\n            return false;\n        }\n        if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n            codeword.setRowNumber(otherCodeword.getRowNumber());\n            return true;\n        }\n        return false;\n    };\n    DetectionResult.prototype.getBarcodeColumnCount = function () {\n        return this.barcodeColumnCount;\n    };\n    DetectionResult.prototype.getBarcodeRowCount = function () {\n        return this.barcodeMetadata.getRowCount();\n    };\n    DetectionResult.prototype.getBarcodeECLevel = function () {\n        return this.barcodeMetadata.getErrorCorrectionLevel();\n    };\n    DetectionResult.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n    DetectionResult.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n    DetectionResult.prototype.setDetectionResultColumn = function (barcodeColumn, detectionResultColumn) {\n        this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n    };\n    DetectionResult.prototype.getDetectionResultColumn = function (barcodeColumn) {\n        return this.detectionResultColumns[barcodeColumn];\n    };\n    // @Override\n    DetectionResult.prototype.toString = function () {\n        var rowIndicatorColumn = this.detectionResultColumns[0];\n        if (rowIndicatorColumn == null) {\n            rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n        }\n        // try (\n        var formatter = new Formatter_1.default();\n        // ) {\n        for (var codewordsRow /*int*/ = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n            formatter.format('CW %3d:', codewordsRow);\n            for (var barcodeColumn /*int*/ = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n                if (this.detectionResultColumns[barcodeColumn] == null) {\n                    formatter.format('    |   ');\n                    continue;\n                }\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword == null) {\n                    formatter.format('    |   ');\n                    continue;\n                }\n                formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n            }\n            formatter.format('%n');\n        }\n        return formatter.toString();\n        // }\n    };\n    return DetectionResult;\n}());\nexports.default = DetectionResult;\n//# sourceMappingURL=DetectionResult.js.map"]},"metadata":{},"sourceType":"script"}