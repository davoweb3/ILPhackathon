{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ArgumentException_1 = require(\"../../ArgumentException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ErrorCorrectionLevelValues;\n(function (ErrorCorrectionLevelValues) {\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar ErrorCorrectionLevel = /** @class */function () {\n  function ErrorCorrectionLevel(value, stringValue, bits /*int*/) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.bits = bits;\n    ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n    ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n  }\n  ErrorCorrectionLevel.prototype.getValue = function () {\n    return this.value;\n  };\n  ErrorCorrectionLevel.prototype.getBits = function () {\n    return this.bits;\n  };\n  ErrorCorrectionLevel.fromString = function (s) {\n    switch (s) {\n      case 'L':\n        return ErrorCorrectionLevel.L;\n      case 'M':\n        return ErrorCorrectionLevel.M;\n      case 'Q':\n        return ErrorCorrectionLevel.Q;\n      case 'H':\n        return ErrorCorrectionLevel.H;\n      default:\n        throw new ArgumentException_1.default(s + 'not available');\n    }\n  };\n  ErrorCorrectionLevel.prototype.toString = function () {\n    return this.stringValue;\n  };\n  ErrorCorrectionLevel.prototype.equals = function (o) {\n    if (!(o instanceof ErrorCorrectionLevel)) {\n      return false;\n    }\n    var other = o;\n    return this.value === other.value;\n  };\n  /**\n   * @param bits int containing the two bits encoding a QR Code's error correction level\n   * @return ErrorCorrectionLevel representing the encoded error correction level\n   */\n  ErrorCorrectionLevel.forBits = function (bits /*int*/) {\n    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n      throw new IllegalArgumentException_1.default();\n    }\n    return ErrorCorrectionLevel.FOR_BITS.get(bits);\n  };\n  ErrorCorrectionLevel.FOR_BITS = new Map();\n  ErrorCorrectionLevel.FOR_VALUE = new Map();\n  /** L = ~7% correction */\n  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n  /** M = ~15% correction */\n  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n  /** Q = ~25% correction */\n  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n  /** H = ~30% correction */\n  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n  return ErrorCorrectionLevel;\n}();\nexports.default = ErrorCorrectionLevel;","map":{"version":3,"names":["ArgumentException_1","require","IllegalArgumentException_1","ErrorCorrectionLevelValues","exports","ErrorCorrectionLevel","value","stringValue","bits","FOR_BITS","set","FOR_VALUE","prototype","getValue","getBits","fromString","s","L","M","Q","H","default","toString","equals","o","other","forBits","size","get","Map"],"sources":["../../../../src/core/qrcode/decoder/ErrorCorrectionLevel.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAgBA;AAGA,IAAAA,mBAAA,GAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAD,OAAA;AAEA,IAAYE,0BAKX;AALD,WAAYA,0BAA0B;EAClCA,0BAAA,CAAAA,0BAAA,gBAAC;EACDA,0BAAA,CAAAA,0BAAA,gBAAC;EACDA,0BAAA,CAAAA,0BAAA,gBAAC;EACDA,0BAAA,CAAAA,0BAAA,gBAAC;AACL,CAAC,EALWA,0BAA0B,GAA1BC,OAAA,CAAAD,0BAA0B,KAA1BC,OAAA,CAAAD,0BAA0B;AAOtC;;;;;;AAMA,IAAAE,oBAAA;EAcI,SAAAA,qBAA4BC,KAAiC,EAAUC,WAAmB,EAAUC,IAAY,CAAC,SAAO;IAA5F,KAAAF,KAAK,GAALA,KAAK;IAAsC,KAAAC,WAAW,GAAXA,WAAW;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IACpGH,oBAAoB,CAACI,QAAQ,CAACC,GAAG,CAACF,IAAI,EAAE,IAAI,CAAC;IAC7CH,oBAAoB,CAACM,SAAS,CAACD,GAAG,CAACJ,KAAK,EAAE,IAAI,CAAC;EACnD;EAEOD,oBAAA,CAAAO,SAAA,CAAAC,QAAQ,GAAf;IACI,OAAO,IAAI,CAACP,KAAK;EACrB,CAAC;EAEMD,oBAAA,CAAAO,SAAA,CAAAE,OAAO,GAAd;IACI,OAAO,IAAI,CAACN,IAAI;EACpB,CAAC;EAEaH,oBAAA,CAAAU,UAAU,GAAxB,UAAyBC,CAAS;IAC9B,QAAQA,CAAC;MACL,KAAK,GAAG;QAAE,OAAOX,oBAAoB,CAACY,CAAC;MACvC,KAAK,GAAG;QAAE,OAAOZ,oBAAoB,CAACa,CAAC;MACvC,KAAK,GAAG;QAAE,OAAOb,oBAAoB,CAACc,CAAC;MACvC,KAAK,GAAG;QAAE,OAAOd,oBAAoB,CAACe,CAAC;MACvC;QAAS,MAAM,IAAIpB,mBAAA,CAAAqB,OAAiB,CAACL,CAAC,GAAG,eAAe,CAAC;IAAC;EAElE,CAAC;EAEMX,oBAAA,CAAAO,SAAA,CAAAU,QAAQ,GAAf;IACI,OAAO,IAAI,CAACf,WAAW;EAC3B,CAAC;EAEMF,oBAAA,CAAAO,SAAA,CAAAW,MAAM,GAAb,UAAcC,CAAM;IAChB,IAAI,EAAEA,CAAC,YAAYnB,oBAAoB,CAAC,EAAE;MACtC,OAAO,KAAK;;IAEhB,IAAMoB,KAAK,GAAyBD,CAAC;IACrC,OAAO,IAAI,CAAClB,KAAK,KAAKmB,KAAK,CAACnB,KAAK;EACrC,CAAC;EACD;;;;EAIcD,oBAAA,CAAAqB,OAAO,GAArB,UAAsBlB,IAAY,CAAC,SAAO;IACtC,IAAIA,IAAI,GAAG,CAAC,IAAIA,IAAI,IAAIH,oBAAoB,CAACI,QAAQ,CAACkB,IAAI,EAAE;MACxD,MAAM,IAAIzB,0BAAA,CAAAmB,OAAwB,EAAE;;IAExC,OAAOhB,oBAAoB,CAACI,QAAQ,CAACmB,GAAG,CAACpB,IAAI,CAAC;EAClD,CAAC;EAvDcH,oBAAA,CAAAI,QAAQ,GAAG,IAAIoB,GAAG,EAAgC;EAClDxB,oBAAA,CAAAM,SAAS,GAAG,IAAIkB,GAAG,EAAoD;EAEtF;EACcxB,oBAAA,CAAAY,CAAC,GAAG,IAAIZ,oBAAoB,CAACF,0BAA0B,CAACc,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;EACnF;EACcZ,oBAAA,CAAAa,CAAC,GAAG,IAAIb,oBAAoB,CAACF,0BAA0B,CAACe,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;EACnF;EACcb,oBAAA,CAAAc,CAAC,GAAG,IAAId,oBAAoB,CAACF,0BAA0B,CAACgB,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;EACnF;EACcd,oBAAA,CAAAe,CAAC,GAAG,IAAIf,oBAAoB,CAACF,0BAA0B,CAACiB,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;EA+CvF,OAAAf,oBAAC;CAAA,EA3DD;kBAAqBA,oBAAoB"},"metadata":{},"sourceType":"script"}