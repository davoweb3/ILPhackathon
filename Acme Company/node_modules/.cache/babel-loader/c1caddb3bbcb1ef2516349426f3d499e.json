{"ast":null,"code":"\"use strict\";\n\n/*\n* Copyright 2009 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.ResultPoint;\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar System_1 = require(\"../../util/System\");\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar PDF417DetectorResult_1 = require(\"./PDF417DetectorResult\");\n// import java.util.ArrayList;\n// import java.util.Arrays;\n// import java.util.List;\n// import java.util.Map;\n/**\n * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the\n * PDF417 Code is rotated or skewed, or partially obscured.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Guenther Grau\n */\nvar Detector = /** @class */function () {\n  function Detector() {}\n  /**\n   * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>\n   *\n   * @param image barcode image to decode\n   * @param hints optional hints to detector\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @return {@link PDF417DetectorResult} encapsulating results of detecting a PDF417 code\n   * @throws NotFoundException if no PDF417 Code can be found\n   */\n  Detector.detectMultiple = function (image, hints, multiple) {\n    // TODO detection improvement, tryHarder could try several different luminance thresholds/blackpoints or even\n    // different binarizers\n    // boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n    var bitMatrix = image.getBlackMatrix();\n    var barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n    if (!barcodeCoordinates.length) {\n      bitMatrix = bitMatrix.clone();\n      bitMatrix.rotate180();\n      barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n    }\n    return new PDF417DetectorResult_1.default(bitMatrix, barcodeCoordinates);\n  };\n  /**\n   * Detects PDF417 codes in an image. Only checks 0 degree rotation\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @param bitMatrix bit matrix to detect barcodes in\n   * @return List of ResultPoint arrays containing the coordinates of found barcodes\n   */\n  Detector.detect = function (multiple, bitMatrix) {\n    var e_1, _a;\n    var barcodeCoordinates = new Array();\n    var row = 0;\n    var column = 0;\n    var foundBarcodeInRow = false;\n    while (row < bitMatrix.getHeight()) {\n      var vertices = Detector.findVertices(bitMatrix, row, column);\n      if (vertices[0] == null && vertices[3] == null) {\n        if (!foundBarcodeInRow) {\n          // we didn't find any barcode so that's the end of searching\n          break;\n        }\n        // we didn't find a barcode starting at the given column and row. Try again from the first column and slightly\n        // below the lowest barcode we found so far.\n        foundBarcodeInRow = false;\n        column = 0;\n        try {\n          for (var barcodeCoordinates_1 = __values(barcodeCoordinates), barcodeCoordinates_1_1 = barcodeCoordinates_1.next(); !barcodeCoordinates_1_1.done; barcodeCoordinates_1_1 = barcodeCoordinates_1.next()) {\n            var barcodeCoordinate = barcodeCoordinates_1_1.value;\n            if (barcodeCoordinate[1] != null) {\n              row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));\n            }\n            if (barcodeCoordinate[3] != null) {\n              row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (barcodeCoordinates_1_1 && !barcodeCoordinates_1_1.done && (_a = barcodeCoordinates_1.return)) _a.call(barcodeCoordinates_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        row += Detector.ROW_STEP;\n        continue;\n      }\n      foundBarcodeInRow = true;\n      barcodeCoordinates.push(vertices);\n      if (!multiple) {\n        break;\n      }\n      // if we didn't find a right row indicator column, then continue the search for the next barcode after the\n      // start pattern of the barcode just found.\n      if (vertices[2] != null) {\n        column = Math.trunc(vertices[2].getX());\n        row = Math.trunc(vertices[2].getY());\n      } else {\n        column = Math.trunc(vertices[4].getX());\n        row = Math.trunc(vertices[4].getY());\n      }\n    }\n    return barcodeCoordinates;\n  };\n  /**\n   * Locate the vertices and the codewords area of a black blob using the Start\n   * and Stop patterns as locators.\n   *\n   * @param matrix the scanned barcode image.\n   * @return an array containing the vertices:\n   *           vertices[0] x, y top left barcode\n   *           vertices[1] x, y bottom left barcode\n   *           vertices[2] x, y top right barcode\n   *           vertices[3] x, y bottom right barcode\n   *           vertices[4] x, y top left codeword area\n   *           vertices[5] x, y bottom left codeword area\n   *           vertices[6] x, y top right codeword area\n   *           vertices[7] x, y bottom right codeword area\n   */\n  Detector.findVertices = function (matrix, startRow, startColumn) {\n    var height = matrix.getHeight();\n    var width = matrix.getWidth();\n    // const result = new ResultPoint[8];\n    var result = new Array(8);\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.START_PATTERN), Detector.INDEXES_START_PATTERN);\n    if (result[4] != null) {\n      startColumn = Math.trunc(result[4].getX());\n      startRow = Math.trunc(result[4].getY());\n    }\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.STOP_PATTERN), Detector.INDEXES_STOP_PATTERN);\n    return result;\n  };\n  Detector.copyToResult = function (result, tmpResult, destinationIndexes) {\n    for (var i = 0; i < destinationIndexes.length; i++) {\n      result[destinationIndexes[i]] = tmpResult[i];\n    }\n  };\n  Detector.findRowsWithPattern = function (matrix, height, width, startRow, startColumn, pattern) {\n    // const result = new ResultPoint[4];\n    var result = new Array(4);\n    var found = false;\n    var counters = new Int32Array(pattern.length);\n    for (; startRow < height; startRow += Detector.ROW_STEP) {\n      var loc = Detector.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);\n      if (loc != null) {\n        while (startRow > 0) {\n          var previousRowLoc = Detector.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);\n          if (previousRowLoc != null) {\n            loc = previousRowLoc;\n          } else {\n            startRow++;\n            break;\n          }\n        }\n        result[0] = new ResultPoint_1.default(loc[0], startRow);\n        result[1] = new ResultPoint_1.default(loc[1], startRow);\n        found = true;\n        break;\n      }\n    }\n    var stopRow = startRow + 1;\n    // Last row of the current symbol that contains pattern\n    if (found) {\n      var skippedRowCount = 0;\n      var previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);\n      for (; stopRow < height; stopRow++) {\n        var loc = Detector.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters);\n        // a found pattern is only considered to belong to the same barcode if the start and end positions\n        // don't differ too much. Pattern drift should be not bigger than two for consecutive rows. With\n        // a higher number of skipped rows drift could be larger. To keep it simple for now, we allow a slightly\n        // larger drift and don't check for skipped rows.\n        if (loc != null && Math.abs(previousRowLoc[0] - loc[0]) < Detector.MAX_PATTERN_DRIFT && Math.abs(previousRowLoc[1] - loc[1]) < Detector.MAX_PATTERN_DRIFT) {\n          previousRowLoc = loc;\n          skippedRowCount = 0;\n        } else {\n          if (skippedRowCount > Detector.SKIPPED_ROW_COUNT_MAX) {\n            break;\n          } else {\n            skippedRowCount++;\n          }\n        }\n      }\n      stopRow -= skippedRowCount + 1;\n      result[2] = new ResultPoint_1.default(previousRowLoc[0], stopRow);\n      result[3] = new ResultPoint_1.default(previousRowLoc[1], stopRow);\n    }\n    if (stopRow - startRow < Detector.BARCODE_MIN_HEIGHT) {\n      Arrays_1.default.fill(result, null);\n    }\n    return result;\n  };\n  /**\n   * @param matrix row of black/white values to search\n   * @param column x position to start search\n   * @param row y position to start search\n   * @param width the number of pixels to search on this row\n   * @param pattern pattern of counts of number of black and white pixels that are\n   *                 being searched for as a pattern\n   * @param counters array of counters, as long as pattern, to re-use\n   * @return start/end horizontal offset of guard pattern, as an array of two ints.\n   */\n  Detector.findGuardPattern = function (matrix, column, row, width, whiteFirst, pattern, counters) {\n    Arrays_1.default.fillWithin(counters, 0, counters.length, 0);\n    var patternStart = column;\n    var pixelDrift = 0;\n    // if there are black pixels left of the current pixel shift to the left, but only for MAX_PIXEL_DRIFT pixels\n    while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector.MAX_PIXEL_DRIFT) {\n      patternStart--;\n    }\n    var x = patternStart;\n    var counterPosition = 0;\n    var patternLength = pattern.length;\n    for (var isWhite = whiteFirst; x < width; x++) {\n      var pixel = matrix.get(x, row);\n      if (pixel !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          if (Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n            return new Int32Array([patternStart, x]);\n          }\n          patternStart += counters[0] + counters[1];\n          System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    if (counterPosition === patternLength - 1 && Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n      return new Int32Array([patternStart, x - 1]);\n    }\n    return null;\n  };\n  /**\n   * Determines how closely a set of observed counts of runs of black/white\n   * values matches a given target pattern. This is reported as the ratio of\n   * the total variance from the expected pattern proportions across all\n   * pattern elements, to the length of the pattern.\n   *\n   * @param counters observed counters\n   * @param pattern expected pattern\n   * @param maxIndividualVariance The most any counter can differ before we give up\n   * @return ratio of total variance between counters and pattern compared to total pattern size\n   */\n  Detector.patternMatchVariance = function (counters, pattern, maxIndividualVariance) {\n    var numCounters = counters.length;\n    var total = 0;\n    var patternLength = 0;\n    for (var i = 0; i < numCounters; i++) {\n      total += counters[i];\n      patternLength += pattern[i];\n    }\n    if (total < patternLength) {\n      // If we don't even have one pixel per unit of bar width, assume this\n      // is too small to reliably match, so fail:\n      return (/*Float.POSITIVE_INFINITY*/Infinity\n      );\n    }\n    // We're going to fake floating-point math in integers. We just need to use more bits.\n    // Scale up patternLength so that intermediate values below like scaledCounter will have\n    // more \"significant digits\".\n    var unitBarWidth = total / patternLength;\n    maxIndividualVariance *= unitBarWidth;\n    var totalVariance = 0.0;\n    for (var x = 0; x < numCounters; x++) {\n      var counter = counters[x];\n      var scaledPattern = pattern[x] * unitBarWidth;\n      var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n      if (variance > maxIndividualVariance) {\n        return (/*Float.POSITIVE_INFINITY*/Infinity\n        );\n      }\n      totalVariance += variance;\n    }\n    return totalVariance / total;\n  };\n  Detector.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);\n  Detector.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);\n  Detector.MAX_AVG_VARIANCE = 0.42;\n  Detector.MAX_INDIVIDUAL_VARIANCE = 0.8;\n  // B S B S B S B S Bar/Space pattern\n  // 11111111 0 1 0 1 0 1 000\n  Detector.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);\n  // 1111111 0 1 000 1 0 1 00 1\n  Detector.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);\n  Detector.MAX_PIXEL_DRIFT = 3;\n  Detector.MAX_PATTERN_DRIFT = 5;\n  // if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.\n  // if we set the value too high, then we might detect the start pattern from a neighbor barcode.\n  Detector.SKIPPED_ROW_COUNT_MAX = 25;\n  // A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least\n  // 9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.\n  Detector.ROW_STEP = 5;\n  Detector.BARCODE_MIN_HEIGHT = 10;\n  return Detector;\n}();\nexports.default = Detector;","map":{"version":3,"names":["ResultPoint_1","require","System_1","Arrays_1","PDF417DetectorResult_1","Detector","detectMultiple","image","hints","multiple","bitMatrix","getBlackMatrix","barcodeCoordinates","detect","length","clone","rotate180","default","Array","row","column","foundBarcodeInRow","getHeight","vertices","findVertices","barcodeCoordinates_1","__values","barcodeCoordinates_1_1","next","done","barcodeCoordinate","value","Math","trunc","max","getY","ROW_STEP","push","getX","matrix","startRow","startColumn","height","width","getWidth","result","copyToResult","findRowsWithPattern","START_PATTERN","INDEXES_START_PATTERN","STOP_PATTERN","INDEXES_STOP_PATTERN","tmpResult","destinationIndexes","i","pattern","found","counters","Int32Array","loc","findGuardPattern","previousRowLoc","stopRow","skippedRowCount","from","abs","MAX_PATTERN_DRIFT","SKIPPED_ROW_COUNT_MAX","BARCODE_MIN_HEIGHT","fill","whiteFirst","fillWithin","patternStart","pixelDrift","get","MAX_PIXEL_DRIFT","x","counterPosition","patternLength","isWhite","pixel","patternMatchVariance","MAX_INDIVIDUAL_VARIANCE","MAX_AVG_VARIANCE","arraycopy","maxIndividualVariance","numCounters","total","Infinity","unitBarWidth","totalVariance","counter","scaledPattern","variance"],"sources":["../../../../src/core/pdf417/detector/Detector.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA,IAAAA,aAAA,GAAAC,OAAA;AAGA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AACA,IAAAG,sBAAA,GAAAH,OAAA;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA,IAAAI,QAAA;EAAA,SAAAA,SAAA,GA4SA;EAtRE;;;;;;;;;;EAUcA,QAAA,CAAAC,cAAc,GAA5B,UAA8BC,KAAmB,EAAGC,KAA+B,EAAGC,QAAiB;IACrG;IACA;IACA;IAEA,IAAIC,SAAS,GAAGH,KAAK,CAACI,cAAc,EAAE;IAEtC,IAAIC,kBAAkB,GAAGP,QAAQ,CAACQ,MAAM,CAACJ,QAAQ,EAAEC,SAAS,CAAC;IAC7D,IAAI,CAACE,kBAAkB,CAACE,MAAM,EAAE;MAC9BJ,SAAS,GAAGA,SAAS,CAACK,KAAK,EAAE;MAC7BL,SAAS,CAACM,SAAS,EAAE;MACrBJ,kBAAkB,GAAGP,QAAQ,CAACQ,MAAM,CAACJ,QAAQ,EAAEC,SAAS,CAAC;;IAE3D,OAAO,IAAIN,sBAAA,CAAAa,OAAoB,CAACP,SAAS,EAAEE,kBAAkB,CAAC;EAChE,CAAC;EAED;;;;;;;EAOeP,QAAA,CAAAQ,MAAM,GAArB,UAAuBJ,QAAiB,EAAGC,SAAoB;;IAC7D,IAAME,kBAAkB,GAAG,IAAIM,KAAK,EAAiB;IACrD,IAAIC,GAAG,GAAG,CAAC;IACX,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,OAAOF,GAAG,GAAGT,SAAS,CAACY,SAAS,EAAE,EAAE;MAClC,IAAMC,QAAQ,GAAGlB,QAAQ,CAACmB,YAAY,CAACd,SAAS,EAAES,GAAG,EAAEC,MAAM,CAAC;MAE9D,IAAIG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,IAAIA,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QAC9C,IAAI,CAACF,iBAAiB,EAAE;UACtB;UACA;;QAEF;QACA;QACAA,iBAAiB,GAAG,KAAK;QACzBD,MAAM,GAAG,CAAC;;UACV,KAAgC,IAAAK,oBAAA,GAAAC,QAAA,CAAAd,kBAAkB,GAAAe,sBAAA,GAAAF,oBAAA,CAAAG,IAAA,KAAAD,sBAAA,CAAAE,IAAA,EAAAF,sBAAA,GAAAF,oBAAA,CAAAG,IAAA,IAAE;YAA/C,IAAME,iBAAiB,GAAAH,sBAAA,CAAAI,KAAA;YAC1B,IAAID,iBAAiB,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;cAChCX,GAAG,GAASa,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACf,GAAG,EAAEW,iBAAiB,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC,CAAC;;YAEpE,IAAIL,iBAAiB,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;cAChCX,GAAG,GAAGa,IAAI,CAACE,GAAG,CAACf,GAAG,EAAQa,IAAI,CAACC,KAAK,CAACH,iBAAiB,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC,CAAC;;;;;;;;;;;;;;QAGtEhB,GAAG,IAAId,QAAQ,CAAC+B,QAAQ;QACxB;;MAEFf,iBAAiB,GAAG,IAAI;MACxBT,kBAAkB,CAACyB,IAAI,CAACd,QAAQ,CAAC;MACjC,IAAI,CAACd,QAAQ,EAAE;QACb;;MAEF;MACA;MACA,IAAIc,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACvBH,MAAM,GAASY,IAAI,CAACC,KAAK,CAACV,QAAQ,CAAC,CAAC,CAAC,CAACe,IAAI,EAAE,CAAC;QAC7CnB,GAAG,GAASa,IAAI,CAACC,KAAK,CAACV,QAAQ,CAAC,CAAC,CAAC,CAACY,IAAI,EAAE,CAAC;OAC3C,MAAM;QACLf,MAAM,GAASY,IAAI,CAACC,KAAK,CAACV,QAAQ,CAAC,CAAC,CAAC,CAACe,IAAI,EAAE,CAAC;QAC7CnB,GAAG,GAASa,IAAI,CAACC,KAAK,CAACV,QAAQ,CAAC,CAAC,CAAC,CAACY,IAAI,EAAE,CAAC;;;IAG9C,OAAOvB,kBAAkB;EAC3B,CAAC;EAED;;;;;;;;;;;;;;;EAeeP,QAAA,CAAAmB,YAAY,GAA3B,UAA6Be,MAAiB,EAAGC,QAAwB,EAAGC,WAA2B;IACrG,IAAMC,MAAM,GAAGH,MAAM,CAACjB,SAAS,EAAE;IACjC,IAAMqB,KAAK,GAAGJ,MAAM,CAACK,QAAQ,EAAE;IAE/B;IACA,IAAMC,MAAM,GAAG,IAAI3B,KAAK,CAAc,CAAC,CAAC;IACxCb,QAAQ,CAACyC,YAAY,CAACD,MAAM,EAAExC,QAAQ,CAAC0C,mBAAmB,CAACR,MAAM,EAAEG,MAAM,EAAEC,KAAK,EAAEH,QAAQ,EAAEC,WAAW,EAAEpC,QAAQ,CAAC2C,aAAa,CAAC,EAC5H3C,QAAQ,CAAC4C,qBAAqB,CAAC;IAEnC,IAAIJ,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACrBJ,WAAW,GAAST,IAAI,CAACC,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC,CAACP,IAAI,EAAE,CAAC;MAChDE,QAAQ,GAASR,IAAI,CAACC,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC,CAACV,IAAI,EAAE,CAAC;;IAE/C9B,QAAQ,CAACyC,YAAY,CAACD,MAAM,EAAExC,QAAQ,CAAC0C,mBAAmB,CAACR,MAAM,EAAEG,MAAM,EAAEC,KAAK,EAAEH,QAAQ,EAAEC,WAAW,EAAEpC,QAAQ,CAAC6C,YAAY,CAAC,EAC3H7C,QAAQ,CAAC8C,oBAAoB,CAAC;IAClC,OAAON,MAAM;EACf,CAAC;EAEcxC,QAAA,CAAAyC,YAAY,GAA3B,UAA4BD,MAAqB,EAAEO,SAAwB,EAAEC,kBAA8B;IACzG,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,kBAAkB,CAACvC,MAAM,EAAEwC,CAAC,EAAE,EAAE;MAClDT,MAAM,CAACQ,kBAAkB,CAACC,CAAC,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,CAAC;;EAEhD,CAAC;EAEejD,QAAA,CAAA0C,mBAAmB,GAAnC,UAAqCR,MAAiB,EACJG,MAAsB,EACtBC,KAAqB,EACrBH,QAAwB,EACxBC,WAA2B,EAC3Bc,OAAmB;IACnE;IACA,IAAMV,MAAM,GAAG,IAAI3B,KAAK,CAAc,CAAC,CAAC;IACxC,IAAIsC,KAAK,GAAG,KAAK;IACjB,IAAMC,QAAQ,GAAG,IAAIC,UAAU,CAACH,OAAO,CAACzC,MAAM,CAAC;IAC/C,OAAO0B,QAAQ,GAAGE,MAAM,EAAEF,QAAQ,IAAInC,QAAQ,CAAC+B,QAAQ,EAAE;MACvD,IAAIuB,GAAG,GAAGtD,QAAQ,CAACuD,gBAAgB,CAACrB,MAAM,EAAEE,WAAW,EAAED,QAAQ,EAAEG,KAAK,EAAE,KAAK,EAAEY,OAAO,EAAEE,QAAQ,CAAC;MACnG,IAAIE,GAAG,IAAI,IAAI,EAAE;QACf,OAAOnB,QAAQ,GAAG,CAAC,EAAE;UACnB,IAAMqB,cAAc,GAAGxD,QAAQ,CAACuD,gBAAgB,CAACrB,MAAM,EAAEE,WAAW,EAAE,EAAED,QAAQ,EAAEG,KAAK,EAAE,KAAK,EAAEY,OAAO,EAAEE,QAAQ,CAAC;UAClH,IAAII,cAAc,IAAI,IAAI,EAAE;YAC1BF,GAAG,GAAGE,cAAc;WACrB,MAAM;YACLrB,QAAQ,EAAE;YACV;;;QAGJK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI7C,aAAA,CAAAiB,OAAW,CAAC0C,GAAG,CAAC,CAAC,CAAC,EAAEnB,QAAQ,CAAC;QAC7CK,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI7C,aAAA,CAAAiB,OAAW,CAAC0C,GAAG,CAAC,CAAC,CAAC,EAAEnB,QAAQ,CAAC;QAC7CgB,KAAK,GAAG,IAAI;QACZ;;;IAGJ,IAAIM,OAAO,GAAGtB,QAAQ,GAAG,CAAC;IAC1B;IACA,IAAIgB,KAAK,EAAE;MACT,IAAIO,eAAe,GAAG,CAAC;MACvB,IAAIF,cAAc,GAAGH,UAAU,CAACM,IAAI,CAAC,CAAOhC,IAAI,CAACC,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC,CAACP,IAAI,EAAE,CAAC,EAAQN,IAAI,CAACC,KAAK,CAACY,MAAM,CAAC,CAAC,CAAC,CAACP,IAAI,EAAE,CAAC,CAAC,CAAC;MAC9G,OAAOwB,OAAO,GAAGpB,MAAM,EAAEoB,OAAO,EAAE,EAAE;QAClC,IAAMH,GAAG,GAAGtD,QAAQ,CAACuD,gBAAgB,CAACrB,MAAM,EAAEsB,cAAc,CAAC,CAAC,CAAC,EAAEC,OAAO,EAAEnB,KAAK,EAAE,KAAK,EAAEY,OAAO,EAAEE,QAAQ,CAAC;QAC1G;QACA;QACA;QACA;QACA,IAAIE,GAAG,IAAI,IAAI,IACX3B,IAAI,CAACiC,GAAG,CAACJ,cAAc,CAAC,CAAC,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC6D,iBAAiB,IACjElC,IAAI,CAACiC,GAAG,CAACJ,cAAc,CAAC,CAAC,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC6D,iBAAiB,EAAE;UACrEL,cAAc,GAAGF,GAAG;UACpBI,eAAe,GAAG,CAAC;SACpB,MAAM;UACL,IAAIA,eAAe,GAAG1D,QAAQ,CAAC8D,qBAAqB,EAAE;YACpD;WACD,MAAM;YACLJ,eAAe,EAAE;;;;MAIvBD,OAAO,IAAIC,eAAe,GAAG,CAAC;MAC9BlB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI7C,aAAA,CAAAiB,OAAW,CAAC4C,cAAc,CAAC,CAAC,CAAC,EAAEC,OAAO,CAAC;MACvDjB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI7C,aAAA,CAAAiB,OAAW,CAAC4C,cAAc,CAAC,CAAC,CAAC,EAAEC,OAAO,CAAC;;IAEzD,IAAIA,OAAO,GAAGtB,QAAQ,GAAGnC,QAAQ,CAAC+D,kBAAkB,EAAE;MACpDjE,QAAA,CAAAc,OAAM,CAACoD,IAAI,CAACxB,MAAM,EAAE,IAAI,CAAC;;IAE3B,OAAOA,MAAM;EACf,CAAC;EAED;;;;;;;;;;EAUexC,QAAA,CAAAuD,gBAAgB,GAA/B,UAAiCrB,MAAiB,EACXnB,MAAsB,EACtBD,GAAmB,EACnBwB,KAAqB,EACrB2B,UAAmB,EACnBf,OAAmB,EACnBE,QAAoB;IACzDtD,QAAA,CAAAc,OAAM,CAACsD,UAAU,CAACd,QAAQ,EAAE,CAAC,EAAEA,QAAQ,CAAC3C,MAAM,EAAE,CAAC,CAAC;IAClD,IAAI0D,YAAY,GAAGpD,MAAM;IACzB,IAAIqD,UAAU,GAAG,CAAC;IAElB;IACA,OAAOlC,MAAM,CAACmC,GAAG,CAACF,YAAY,EAAErD,GAAG,CAAC,IAAIqD,YAAY,GAAG,CAAC,IAAIC,UAAU,EAAE,GAAGpE,QAAQ,CAACsE,eAAe,EAAE;MACnGH,YAAY,EAAE;;IAEhB,IAAII,CAAC,GAAGJ,YAAY;IACpB,IAAIK,eAAe,GAAG,CAAC;IACvB,IAAIC,aAAa,GAAGvB,OAAO,CAACzC,MAAM;IAClC,KAAK,IAAIiE,OAAO,GAAGT,UAAU,EAAEM,CAAC,GAAGjC,KAAK,EAAEiC,CAAC,EAAE,EAAE;MAC7C,IAAII,KAAK,GAAGzC,MAAM,CAACmC,GAAG,CAACE,CAAC,EAAEzD,GAAG,CAAC;MAC9B,IAAI6D,KAAK,KAAKD,OAAO,EAAE;QACrBtB,QAAQ,CAACoB,eAAe,CAAC,EAAE;OAC5B,MAAM;QACL,IAAIA,eAAe,KAAKC,aAAa,GAAG,CAAC,EAAE;UACzC,IAAIzE,QAAQ,CAAC4E,oBAAoB,CAACxB,QAAQ,EAAEF,OAAO,EAAElD,QAAQ,CAAC6E,uBAAuB,CAAC,GAAG7E,QAAQ,CAAC8E,gBAAgB,EAAE;YAClH,OAAO,IAAIzB,UAAU,CAAC,CAACc,YAAY,EAAEI,CAAC,CAAC,CAAC;;UAE1CJ,YAAY,IAAIf,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC;UACzCvD,QAAA,CAAAe,OAAM,CAACmE,SAAS,CAAC3B,QAAQ,EAAE,CAAC,EAAEA,QAAQ,EAAE,CAAC,EAAEoB,eAAe,GAAG,CAAC,CAAC;UAC/DpB,QAAQ,CAACoB,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC;UACjCpB,QAAQ,CAACoB,eAAe,CAAC,GAAG,CAAC;UAC7BA,eAAe,EAAE;SAClB,MAAM;UACLA,eAAe,EAAE;;QAEnBpB,QAAQ,CAACoB,eAAe,CAAC,GAAG,CAAC;QAC7BE,OAAO,GAAG,CAACA,OAAO;;;IAGtB,IAAIF,eAAe,KAAKC,aAAa,GAAG,CAAC,IACrCzE,QAAQ,CAAC4E,oBAAoB,CAACxB,QAAQ,EAAEF,OAAO,EAAElD,QAAQ,CAAC6E,uBAAuB,CAAC,GAAG7E,QAAQ,CAAC8E,gBAAgB,EAAE;MAClH,OAAO,IAAIzB,UAAU,CAAC,CAACc,YAAY,EAAEI,CAAC,GAAG,CAAC,CAAC,CAAC;;IAE9C,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;;;EAWevE,QAAA,CAAA4E,oBAAoB,GAAnC,UAAqCxB,QAAoB,EAAGF,OAAmB,EAAG8B,qBAA4B;IAC5G,IAAIC,WAAW,GAAG7B,QAAQ,CAAC3C,MAAM;IACjC,IAAIyE,KAAK,GAAG,CAAC;IACb,IAAIT,aAAa,GAAG,CAAC;IACrB,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgC,WAAW,EAAEhC,CAAC,EAAE,EAAE;MACpCiC,KAAK,IAAI9B,QAAQ,CAACH,CAAC,CAAC;MACpBwB,aAAa,IAAIvB,OAAO,CAACD,CAAC,CAAC;;IAE7B,IAAIiC,KAAK,GAAGT,aAAa,EAAE;MACzB;MACA;MACA,OAAO,4BAA4BU;MAAQ;;IAE7C;IACA;IACA;IACA,IAAIC,YAAY,GAAWF,KAAK,GAAGT,aAAa;IAChDO,qBAAqB,IAAII,YAAY;IAErC,IAAIC,aAAa,GAAG,GAAG;IACvB,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,WAAW,EAAEV,CAAC,EAAE,EAAE;MACpC,IAAIe,OAAO,GAAGlC,QAAQ,CAACmB,CAAC,CAAC;MACzB,IAAIgB,aAAa,GAAGrC,OAAO,CAACqB,CAAC,CAAC,GAAGa,YAAY;MAC7C,IAAII,QAAQ,GAAGF,OAAO,GAAGC,aAAa,GAAGD,OAAO,GAAGC,aAAa,GAAGA,aAAa,GAAGD,OAAO;MAC1F,IAAIE,QAAQ,GAAGR,qBAAqB,EAAE;QACpC,OAAO,4BAA4BG;QAAQ;;MAE7CE,aAAa,IAAIG,QAAQ;;IAE3B,OAAOH,aAAa,GAAGH,KAAK;EAC9B,CAAC;EAzSwBlF,QAAA,CAAA4C,qBAAqB,GAAGS,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrD3D,QAAA,CAAA8C,oBAAoB,GAAGO,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD3D,QAAA,CAAA8E,gBAAgB,GAAoB,IAAI;EACxC9E,QAAA,CAAA6E,uBAAuB,GAAmB,GAAG;EAEtE;EACA;EACyB7E,QAAA,CAAA2C,aAAa,GAAGU,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAClF;EACyB3D,QAAA,CAAA6C,YAAY,GAAGQ,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3D3D,QAAA,CAAAsE,eAAe,GAAmB,CAAC;EACnCtE,QAAA,CAAA6D,iBAAiB,GAAmB,CAAC;EAC9D;EACA;EACyB7D,QAAA,CAAA8D,qBAAqB,GAAmB,EAAE;EACnE;EACA;EACyB9D,QAAA,CAAA+B,QAAQ,GAAmB,CAAC;EAC5B/B,QAAA,CAAA+D,kBAAkB,GAAmB,EAAE;EAwRlE,OAAA/D,QAAC;CAAA,EA5SD;kBAA0CA,QAAQ"},"metadata":{},"sourceType":"script"}