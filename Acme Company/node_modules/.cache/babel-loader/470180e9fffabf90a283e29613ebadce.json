{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\nvar GridSampler_1 = require(\"./GridSampler\");\nvar BitMatrix_1 = require(\"./BitMatrix\");\nvar PerspectiveTransform_1 = require(\"./PerspectiveTransform\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\n * @author Sean Owen\n */\nvar DefaultGridSampler = /** @class */function (_super) {\n  __extends(DefaultGridSampler, _super);\n  function DefaultGridSampler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /*@Override*/\n  DefaultGridSampler.prototype.sampleGrid = function (image, dimensionX /*int*/, dimensionY /*int*/, p1ToX /*float*/, p1ToY /*float*/, p2ToX /*float*/, p2ToY /*float*/, p3ToX /*float*/, p3ToY /*float*/, p4ToX /*float*/, p4ToY /*float*/, p1FromX /*float*/, p1FromY /*float*/, p2FromX /*float*/, p2FromY /*float*/, p3FromX /*float*/, p3FromY /*float*/, p4FromX /*float*/, p4FromY /*float*/) {\n    var transform = PerspectiveTransform_1.default.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\n    return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);\n  };\n  /*@Override*/\n  DefaultGridSampler.prototype.sampleGridWithTransform = function (image, dimensionX /*int*/, dimensionY /*int*/, transform) {\n    if (dimensionX <= 0 || dimensionY <= 0) {\n      throw new NotFoundException_1.default();\n    }\n    var bits = new BitMatrix_1.default(dimensionX, dimensionY);\n    var points = new Float32Array(2 * dimensionX);\n    for (var y = 0; y < dimensionY; y++) {\n      var max = points.length;\n      var iValue = y + 0.5;\n      for (var x = 0; x < max; x += 2) {\n        points[x] = x / 2 + 0.5;\n        points[x + 1] = iValue;\n      }\n      transform.transformPoints(points);\n      // Quick check to see if points transformed to something inside the image\n      // sufficient to check the endpoints\n      GridSampler_1.default.checkAndNudgePoints(image, points);\n      try {\n        for (var x = 0; x < max; x += 2) {\n          if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {\n            // Black(-ish) pixel\n            bits.set(x / 2, y);\n          }\n        }\n      } catch (aioobe /*: ArrayIndexOutOfBoundsException*/) {\n        // This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\n        // transform gets \"twisted\" such that it maps a straight line of points to a set of points\n        // whose endpoints are in bounds, but others are not. There is probably some mathematical\n        // way to detect this about the transformation that I don't know yet.\n        // This results in an ugly runtime exception despite our clever checks above -- can't have\n        // that. We could check each point's coordinates but that feels duplicative. We settle for\n        // catching and wrapping ArrayIndexOutOfBoundsException.\n        throw new NotFoundException_1.default();\n      }\n    }\n    return bits;\n  };\n  return DefaultGridSampler;\n}(GridSampler_1.default);\nexports.default = DefaultGridSampler;","map":{"version":3,"sources":["../../../src/core/common/DefaultGridSampler.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;AAEH;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAIA;;AAEG;AACH,IAAA,kBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgD,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;EAAhD,SAAA,kBAAA,CAAA,EAAA;;EAgEA;EA9DI;EACO,kBAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UAAkB,KAAgB,EAC9B,UAAkB,CAAC,SACnB,UAAkB,CAAC,SACnB,KAAa,CAAA,WAAW,KAAa,CAAA,WACrC,KAAa,CAAA,WAAW,KAAa,CAAA,WACrC,KAAa,CAAA,WAAW,KAAa,CAAA,WACrC,KAAa,CAAA,WAAW,KAAa,CAAA,WACrC,OAAe,CAAA,WAAW,OAAe,CAAA,WACzC,OAAe,CAAA,WAAW,OAAe,CAAA,WACzC,OAAe,CAAA,WAAW,OAAe,CAAA,WACzC,OAAe,CAAA,WAAW,OAAe,CAAA,WAAS;IAElD,IAAM,SAAS,GAAG,sBAAA,CAAA,OAAoB,CAAC,4BAA4B,CAC/D,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EACtD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAE3E,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC;EACjF,CAAC;EAED;EACO,kBAAA,CAAA,SAAA,CAAA,uBAAuB,GAA9B,UAA+B,KAAgB,EAC3C,UAAkB,CAAC,SACnB,UAAkB,CAAC,SACnB,SAA+B,EAAA;IAC/B,IAAI,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,EAAE;MACpC,MAAM,IAAI,mBAAA,CAAA,OAAiB,EAAE;IAChC;IACD,IAAM,IAAI,GAAG,IAAI,WAAA,CAAA,OAAS,CAAC,UAAU,EAAE,UAAU,CAAC;IAClD,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,UAAU,CAAC;IAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;MACjC,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM;MACzB,IAAM,MAAM,GAAqB,CAAC,GAAG,GAAG;MACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;QAC7B,MAAM,CAAC,CAAC,CAAC,GAAY,CAAC,GAAG,CAAC,GAAI,GAAG;QACjC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;MACzB;MACD,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC;MACjC;MACA;MACA,aAAA,CAAA,OAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,CAAC;MAC9C,IAAI;QACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;UAC7B,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7D;YACA,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;UACrB;QACJ;OACJ,CAAC,OAAO,MAAM,CAAA,sCAAsC;QACjD;QACA;QACA;QACA;QACA;QACA;QACA;QACA,MAAM,IAAI,mBAAA,CAAA,OAAiB,EAAE;MAChC;IACJ;IACD,OAAO,IAAI;EACf,CAAC;EAEL,OAAA,kBAAC;AAAD,CAAC,CAhE+C,aAAA,CAAA,OAAW,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\nvar GridSampler_1 = require(\"./GridSampler\");\nvar BitMatrix_1 = require(\"./BitMatrix\");\nvar PerspectiveTransform_1 = require(\"./PerspectiveTransform\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\n * @author Sean Owen\n */\nvar DefaultGridSampler = /** @class */ (function (_super) {\n    __extends(DefaultGridSampler, _super);\n    function DefaultGridSampler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /*@Override*/\n    DefaultGridSampler.prototype.sampleGrid = function (image, dimensionX /*int*/, dimensionY /*int*/, p1ToX /*float*/, p1ToY /*float*/, p2ToX /*float*/, p2ToY /*float*/, p3ToX /*float*/, p3ToY /*float*/, p4ToX /*float*/, p4ToY /*float*/, p1FromX /*float*/, p1FromY /*float*/, p2FromX /*float*/, p2FromY /*float*/, p3FromX /*float*/, p3FromY /*float*/, p4FromX /*float*/, p4FromY /*float*/) {\n        var transform = PerspectiveTransform_1.default.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\n        return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);\n    };\n    /*@Override*/\n    DefaultGridSampler.prototype.sampleGridWithTransform = function (image, dimensionX /*int*/, dimensionY /*int*/, transform) {\n        if (dimensionX <= 0 || dimensionY <= 0) {\n            throw new NotFoundException_1.default();\n        }\n        var bits = new BitMatrix_1.default(dimensionX, dimensionY);\n        var points = new Float32Array(2 * dimensionX);\n        for (var y = 0; y < dimensionY; y++) {\n            var max = points.length;\n            var iValue = y + 0.5;\n            for (var x = 0; x < max; x += 2) {\n                points[x] = (x / 2) + 0.5;\n                points[x + 1] = iValue;\n            }\n            transform.transformPoints(points);\n            // Quick check to see if points transformed to something inside the image\n            // sufficient to check the endpoints\n            GridSampler_1.default.checkAndNudgePoints(image, points);\n            try {\n                for (var x = 0; x < max; x += 2) {\n                    if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {\n                        // Black(-ish) pixel\n                        bits.set(x / 2, y);\n                    }\n                }\n            }\n            catch (aioobe /*: ArrayIndexOutOfBoundsException*/) {\n                // This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\n                // transform gets \"twisted\" such that it maps a straight line of points to a set of points\n                // whose endpoints are in bounds, but others are not. There is probably some mathematical\n                // way to detect this about the transformation that I don't know yet.\n                // This results in an ugly runtime exception despite our clever checks above -- can't have\n                // that. We could check each point's coordinates but that feels duplicative. We settle for\n                // catching and wrapping ArrayIndexOutOfBoundsException.\n                throw new NotFoundException_1.default();\n            }\n        }\n        return bits;\n    };\n    return DefaultGridSampler;\n}(GridSampler_1.default));\nexports.default = DefaultGridSampler;\n//# sourceMappingURL=DefaultGridSampler.js.map"]},"metadata":{},"sourceType":"script"}