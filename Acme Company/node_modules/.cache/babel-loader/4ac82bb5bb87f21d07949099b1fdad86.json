{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n/*namespace com.google.zxing {*/\n/**\n * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\n * white and vice versa, and each value becomes (255-value).\n *\n * @author Sean Owen\n */\nvar InvertedLuminanceSource = /** @class */function (_super) {\n  __extends(InvertedLuminanceSource, _super);\n  function InvertedLuminanceSource(delegate) {\n    var _this = _super.call(this, delegate.getWidth(), delegate.getHeight()) || this;\n    _this.delegate = delegate;\n    return _this;\n  }\n  /*@Override*/\n  InvertedLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    var sourceRow = this.delegate.getRow(y, row);\n    var width = this.getWidth();\n    for (var i = 0; i < width; i++) {\n      sourceRow[i] = /*(byte)*/255 - (sourceRow[i] & 0xFF);\n    }\n    return sourceRow;\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.getMatrix = function () {\n    var matrix = this.delegate.getMatrix();\n    var length = this.getWidth() * this.getHeight();\n    var invertedMatrix = new Uint8ClampedArray(length);\n    for (var i = 0; i < length; i++) {\n      invertedMatrix[i] = /*(byte)*/255 - (matrix[i] & 0xFF);\n    }\n    return invertedMatrix;\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.isCropSupported = function () {\n    return this.delegate.isCropSupported();\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.isRotateSupported = function () {\n    return this.delegate.isRotateSupported();\n  };\n  /**\n   * @return original delegate {@link LuminanceSource} since invert undoes itself\n   */\n  /*@Override*/\n  InvertedLuminanceSource.prototype.invert = function () {\n    return this.delegate;\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.rotateCounterClockwise = function () {\n    return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\n  };\n  /*@Override*/\n  InvertedLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\n  };\n  return InvertedLuminanceSource;\n}(LuminanceSource_1.default);\nexports.default = InvertedLuminanceSource;","map":{"version":3,"sources":["../../src/core/InvertedLuminanceSource.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;AAEH,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;AAEA;;;;;AAKG;AACH,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqD,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;EAEjD,SAAA,uBAAA,CAA2B,QAAyB,EAAA;IAApD,IAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,IAAA,IAAA;IADzB,KAAA,CAAA,QAAQ,GAAR,QAAQ;;EAEnC;EAEA;EACO,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,CAAS,CAAC,SAAS,GAAuB,EAAA;IACpD,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;IAC9C,IAAM,KAAK,GAAmB,IAAI,CAAC,QAAQ,EAAE;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;MAC5B,SAAS,CAAC,CAAC,CAAC,GAAG,UAAY,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAE;IAC1D;IACD,OAAO,SAAS;EACpB,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IAEI,IAAM,MAAM,GAAsB,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;IAC3D,IAAM,MAAM,GAAmB,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE;IACjE,IAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC;IAEpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;MAC7B,cAAc,CAAC,CAAC,CAAC,GAAG,UAAY,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAE;IAC5D;IAED,OAAO,cAAc;EACzB,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,YAAA;IACI,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;EAC1C,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAY,IAAY,CAAC,SAAS,GAAW,CAAC,SAAS,KAAa,CAAC,SAAS,MAAc,CAAC,SAAO;IAChG,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;EACpF,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IACI,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;EAC5C,CAAC;EAED;;AAEG;EACH;EACO,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACI,OAAO,IAAI,CAAC,QAAQ;EACxB,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,sBAAsB,GAA7B,YAAA;IACI,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;EAC9E,CAAC;EAED;EACO,uBAAA,CAAA,SAAA,CAAA,wBAAwB,GAA/B,YAAA;IACI,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,EAAE,CAAC;EAChF,CAAC;EAEL,OAAA,uBAAC;AAAD,CAAC,CA/DoD,iBAAA,CAAA,OAAe,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n/*namespace com.google.zxing {*/\n/**\n * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\n * white and vice versa, and each value becomes (255-value).\n *\n * @author Sean Owen\n */\nvar InvertedLuminanceSource = /** @class */ (function (_super) {\n    __extends(InvertedLuminanceSource, _super);\n    function InvertedLuminanceSource(delegate) {\n        var _this = _super.call(this, delegate.getWidth(), delegate.getHeight()) || this;\n        _this.delegate = delegate;\n        return _this;\n    }\n    /*@Override*/\n    InvertedLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        var sourceRow = this.delegate.getRow(y, row);\n        var width = this.getWidth();\n        for (var i = 0; i < width; i++) {\n            sourceRow[i] = /*(byte)*/ (255 - (sourceRow[i] & 0xFF));\n        }\n        return sourceRow;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.getMatrix = function () {\n        var matrix = this.delegate.getMatrix();\n        var length = this.getWidth() * this.getHeight();\n        var invertedMatrix = new Uint8ClampedArray(length);\n        for (var i = 0; i < length; i++) {\n            invertedMatrix[i] = /*(byte)*/ (255 - (matrix[i] & 0xFF));\n        }\n        return invertedMatrix;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.isCropSupported = function () {\n        return this.delegate.isCropSupported();\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.isRotateSupported = function () {\n        return this.delegate.isRotateSupported();\n    };\n    /**\n     * @return original delegate {@link LuminanceSource} since invert undoes itself\n     */\n    /*@Override*/\n    InvertedLuminanceSource.prototype.invert = function () {\n        return this.delegate;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.rotateCounterClockwise = function () {\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\n    };\n    return InvertedLuminanceSource;\n}(LuminanceSource_1.default));\nexports.default = InvertedLuminanceSource;\n//# sourceMappingURL=InvertedLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}