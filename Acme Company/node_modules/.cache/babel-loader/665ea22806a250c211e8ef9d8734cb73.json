{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n/*import java.util.Arrays;*/\nvar BitArray_1 = require(\"./BitArray\");\nvar System_1 = require(\"../util/System\");\nvar Arrays_1 = require(\"../util/Arrays\");\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\n * module, x is the column position, and y is the row position. The ordering is always x, y.\n * The origin is at the top-left.</p>\n *\n * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\n * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\n * efficiently.</p>\n *\n * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\n * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar BitMatrix /*implements Cloneable*/ = /** @class */function () {\n  /**\n   * Creates an empty square {@link BitMatrix}.\n   *\n   * @param dimension height and width\n   */\n  // public constructor(dimension: number /*int*/) {\n  //   this(dimension, dimension)\n  // }\n  /**\n   * Creates an empty {@link BitMatrix}.\n   *\n   * @param width bit matrix width\n   * @param height bit matrix height\n   */\n  // public constructor(width: number /*int*/, height: number /*int*/) {\n  //   if (width < 1 || height < 1) {\n  //     throw new IllegalArgumentException(\"Both dimensions must be greater than 0\")\n  //   }\n  //   this.width = width\n  //   this.height = height\n  //   this.rowSize = (width + 31) / 32\n  //   bits = new int[rowSize * height];\n  // }\n  function BitMatrix(width /*int*/, height /*int*/, rowSize /*int*/, bits) {\n    this.width = width;\n    this.height = height;\n    this.rowSize = rowSize;\n    this.bits = bits;\n    if (undefined === height || null === height) {\n      height = width;\n    }\n    this.height = height;\n    if (width < 1 || height < 1) {\n      throw new IllegalArgumentException_1.default('Both dimensions must be greater than 0');\n    }\n    if (undefined === rowSize || null === rowSize) {\n      rowSize = Math.floor((width + 31) / 32);\n    }\n    this.rowSize = rowSize;\n    if (undefined === bits || null === bits) {\n      this.bits = new Int32Array(this.rowSize * this.height);\n    }\n  }\n  /**\n   * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\n   *\n   * @function parse\n   * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\n   * @return {@link BitMatrix} representation of image\n   */\n  BitMatrix.parseFromBooleanArray = function (image) {\n    var height = image.length;\n    var width = image[0].length;\n    var bits = new BitMatrix(width, height);\n    for (var i = 0; i < height; i++) {\n      var imageI = image[i];\n      for (var j = 0; j < width; j++) {\n        if (imageI[j]) {\n          bits.set(j, i);\n        }\n      }\n    }\n    return bits;\n  };\n  /**\n   *\n   * @function parse\n   * @param stringRepresentation\n   * @param setString\n   * @param unsetString\n   */\n  BitMatrix.parseFromString = function (stringRepresentation, setString, unsetString) {\n    if (stringRepresentation === null) {\n      throw new IllegalArgumentException_1.default('stringRepresentation cannot be null');\n    }\n    var bits = new Array(stringRepresentation.length);\n    var bitsPos = 0;\n    var rowStartPos = 0;\n    var rowLength = -1;\n    var nRows = 0;\n    var pos = 0;\n    while (pos < stringRepresentation.length) {\n      if (stringRepresentation.charAt(pos) === '\\n' || stringRepresentation.charAt(pos) === '\\r') {\n        if (bitsPos > rowStartPos) {\n          if (rowLength === -1) {\n            rowLength = bitsPos - rowStartPos;\n          } else if (bitsPos - rowStartPos !== rowLength) {\n            throw new IllegalArgumentException_1.default('row lengths do not match');\n          }\n          rowStartPos = bitsPos;\n          nRows++;\n        }\n        pos++;\n      } else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\n        pos += setString.length;\n        bits[bitsPos] = true;\n        bitsPos++;\n      } else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\n        pos += unsetString.length;\n        bits[bitsPos] = false;\n        bitsPos++;\n      } else {\n        throw new IllegalArgumentException_1.default('illegal character encountered: ' + stringRepresentation.substring(pos));\n      }\n    }\n    // no EOL at end?\n    if (bitsPos > rowStartPos) {\n      if (rowLength === -1) {\n        rowLength = bitsPos - rowStartPos;\n      } else if (bitsPos - rowStartPos !== rowLength) {\n        throw new IllegalArgumentException_1.default('row lengths do not match');\n      }\n      nRows++;\n    }\n    var matrix = new BitMatrix(rowLength, nRows);\n    for (var i = 0; i < bitsPos; i++) {\n      if (bits[i]) {\n        matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\n      }\n    }\n    return matrix;\n  };\n  /**\n   * <p>Gets the requested bit, where true means black.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   * @return value of given bit in matrix\n   */\n  BitMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    return (this.bits[offset] >>> (x & 0x1f) & 1) !== 0;\n  };\n  /**\n   * <p>Sets the given bit to true.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   */\n  BitMatrix.prototype.set = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] |= 1 << (x & 0x1f) & 0xFFFFFFFF;\n  };\n  BitMatrix.prototype.unset = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] &= ~(1 << (x & 0x1f) & 0xFFFFFFFF);\n  };\n  /**\n   * <p>Flips the given bit.</p>\n   *\n   * @param x The horizontal component (i.e. which column)\n   * @param y The vertical component (i.e. which row)\n   */\n  BitMatrix.prototype.flip = function (x /*int*/, y /*int*/) {\n    var offset = y * this.rowSize + Math.floor(x / 32);\n    this.bits[offset] ^= 1 << (x & 0x1f) & 0xFFFFFFFF;\n  };\n  /**\n   * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\n   * mask bit is set.\n   *\n   * @param mask XOR mask\n   */\n  BitMatrix.prototype.xor = function (mask) {\n    if (this.width !== mask.getWidth() || this.height !== mask.getHeight() || this.rowSize !== mask.getRowSize()) {\n      throw new IllegalArgumentException_1.default('input matrix dimensions do not match');\n    }\n    var rowArray = new BitArray_1.default(Math.floor(this.width / 32) + 1);\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    for (var y = 0, height = this.height; y < height; y++) {\n      var offset = y * rowSize;\n      var row = mask.getRow(y, rowArray).getBitArray();\n      for (var x = 0; x < rowSize; x++) {\n        bits[offset + x] ^= row[x];\n      }\n    }\n  };\n  /**\n   * Clears all bits (sets to false).\n   */\n  BitMatrix.prototype.clear = function () {\n    var bits = this.bits;\n    var max = bits.length;\n    for (var i = 0; i < max; i++) {\n      bits[i] = 0;\n    }\n  };\n  /**\n   * <p>Sets a square region of the bit matrix to true.</p>\n   *\n   * @param left The horizontal position to begin at (inclusive)\n   * @param top The vertical position to begin at (inclusive)\n   * @param width The width of the region\n   * @param height The height of the region\n   */\n  BitMatrix.prototype.setRegion = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    if (top < 0 || left < 0) {\n      throw new IllegalArgumentException_1.default('Left and top must be nonnegative');\n    }\n    if (height < 1 || width < 1) {\n      throw new IllegalArgumentException_1.default('Height and width must be at least 1');\n    }\n    var right = left + width;\n    var bottom = top + height;\n    if (bottom > this.height || right > this.width) {\n      throw new IllegalArgumentException_1.default('The region must fit inside the matrix');\n    }\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    for (var y = top; y < bottom; y++) {\n      var offset = y * rowSize;\n      for (var x = left; x < right; x++) {\n        bits[offset + Math.floor(x / 32)] |= 1 << (x & 0x1f) & 0xFFFFFFFF;\n      }\n    }\n  };\n  /**\n   * A fast method to retrieve one row of data from the matrix as a BitArray.\n   *\n   * @param y The row to retrieve\n   * @param row An optional caller-allocated BitArray, will be allocated if null or too small\n   * @return The resulting BitArray - this reference should always be used even when passing\n   *         your own row\n   */\n  BitMatrix.prototype.getRow = function (y /*int*/, row) {\n    if (row === null || row === undefined || row.getSize() < this.width) {\n      row = new BitArray_1.default(this.width);\n    } else {\n      row.clear();\n    }\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var offset = y * rowSize;\n    for (var x = 0; x < rowSize; x++) {\n      row.setBulk(x * 32, bits[offset + x]);\n    }\n    return row;\n  };\n  /**\n   * @param y row to set\n   * @param row {@link BitArray} to copy from\n   */\n  BitMatrix.prototype.setRow = function (y /*int*/, row) {\n    System_1.default.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\n  };\n  /**\n   * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\n   */\n  BitMatrix.prototype.rotate180 = function () {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var topRow = new BitArray_1.default(width);\n    var bottomRow = new BitArray_1.default(width);\n    for (var i = 0, length_1 = Math.floor((height + 1) / 2); i < length_1; i++) {\n      topRow = this.getRow(i, topRow);\n      bottomRow = this.getRow(height - 1 - i, bottomRow);\n      topRow.reverse();\n      bottomRow.reverse();\n      this.setRow(i, bottomRow);\n      this.setRow(height - 1 - i, topRow);\n    }\n  };\n  /**\n   * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\n   *\n   * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\n   */\n  BitMatrix.prototype.getEnclosingRectangle = function () {\n    var width = this.width;\n    var height = this.height;\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var left = width;\n    var top = height;\n    var right = -1;\n    var bottom = -1;\n    for (var y = 0; y < height; y++) {\n      for (var x32 = 0; x32 < rowSize; x32++) {\n        var theBits = bits[y * rowSize + x32];\n        if (theBits !== 0) {\n          if (y < top) {\n            top = y;\n          }\n          if (y > bottom) {\n            bottom = y;\n          }\n          if (x32 * 32 < left) {\n            var bit = 0;\n            while ((theBits << 31 - bit & 0xFFFFFFFF) === 0) {\n              bit++;\n            }\n            if (x32 * 32 + bit < left) {\n              left = x32 * 32 + bit;\n            }\n          }\n          if (x32 * 32 + 31 > right) {\n            var bit = 31;\n            while (theBits >>> bit === 0) {\n              bit--;\n            }\n            if (x32 * 32 + bit > right) {\n              right = x32 * 32 + bit;\n            }\n          }\n        }\n      }\n    }\n    if (right < left || bottom < top) {\n      return null;\n    }\n    return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\n  };\n  /**\n   * This is useful in detecting a corner of a 'pure' barcode.\n   *\n   * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\n   */\n  BitMatrix.prototype.getTopLeftOnBit = function () {\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var bitsOffset = 0;\n    while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\n      bitsOffset++;\n    }\n    if (bitsOffset === bits.length) {\n      return null;\n    }\n    var y = bitsOffset / rowSize;\n    var x = bitsOffset % rowSize * 32;\n    var theBits = bits[bitsOffset];\n    var bit = 0;\n    while ((theBits << 31 - bit & 0xFFFFFFFF) === 0) {\n      bit++;\n    }\n    x += bit;\n    return Int32Array.from([x, y]);\n  };\n  BitMatrix.prototype.getBottomRightOnBit = function () {\n    var rowSize = this.rowSize;\n    var bits = this.bits;\n    var bitsOffset = bits.length - 1;\n    while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\n      bitsOffset--;\n    }\n    if (bitsOffset < 0) {\n      return null;\n    }\n    var y = Math.floor(bitsOffset / rowSize);\n    var x = Math.floor(bitsOffset % rowSize) * 32;\n    var theBits = bits[bitsOffset];\n    var bit = 31;\n    while (theBits >>> bit === 0) {\n      bit--;\n    }\n    x += bit;\n    return Int32Array.from([x, y]);\n  };\n  /**\n   * @return The width of the matrix\n   */\n  BitMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n  /**\n   * @return The height of the matrix\n   */\n  BitMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n  /**\n   * @return The row size of the matrix\n   */\n  BitMatrix.prototype.getRowSize = function () {\n    return this.rowSize;\n  };\n  /*@Override*/\n  BitMatrix.prototype.equals = function (o) {\n    if (!(o instanceof BitMatrix)) {\n      return false;\n    }\n    var other = o;\n    return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize && Arrays_1.default.equals(this.bits, other.bits);\n  };\n  /*@Override*/\n  BitMatrix.prototype.hashCode = function () {\n    var hash = this.width;\n    hash = 31 * hash + this.width;\n    hash = 31 * hash + this.height;\n    hash = 31 * hash + this.rowSize;\n    hash = 31 * hash + Arrays_1.default.hashCode(this.bits);\n    return hash;\n  };\n  /**\n   * @return string representation using \"X\" for set and \" \" for unset bits\n   */\n  /*@Override*/\n  // public toString(): string {\n  //   return toString(\": \"X, \"  \")\n  // }\n  /**\n   * @param setString representation of a set bit\n   * @param unsetString representation of an unset bit\n   * @return string representation of entire matrix utilizing given strings\n   */\n  // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\n  //   return this.buildToString(setString, unsetString, \"\\n\")\n  // }\n  /**\n   * @param setString representation of a set bit\n   * @param unsetString representation of an unset bit\n   * @param lineSeparator newline character in string representation\n   * @return string representation of entire matrix utilizing given strings and line separator\n   * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\n   */\n  // @Deprecated\n  BitMatrix.prototype.toString = function (setString, unsetString, lineSeparator) {\n    if (setString === void 0) {\n      setString = 'X ';\n    }\n    if (unsetString === void 0) {\n      unsetString = '  ';\n    }\n    if (lineSeparator === void 0) {\n      lineSeparator = '\\n';\n    }\n    return this.buildToString(setString, unsetString, lineSeparator);\n  };\n  BitMatrix.prototype.buildToString = function (setString, unsetString, lineSeparator) {\n    var result = new StringBuilder_1.default();\n    // result.append(lineSeparator);\n    for (var y = 0, height = this.height; y < height; y++) {\n      for (var x = 0, width = this.width; x < width; x++) {\n        result.append(this.get(x, y) ? setString : unsetString);\n      }\n      result.append(lineSeparator);\n    }\n    return result.toString();\n  };\n  /*@Override*/\n  BitMatrix.prototype.clone = function () {\n    return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\n  };\n  return BitMatrix;\n}();\nexports.default = BitMatrix;","map":{"version":3,"sources":["../../../src/core/common/BitMatrix.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.util.Arrays;*/\nvar BitArray_1 = require(\"./BitArray\");\nvar System_1 = require(\"../util/System\");\nvar Arrays_1 = require(\"../util/Arrays\");\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\n * module, x is the column position, and y is the row position. The ordering is always x, y.\n * The origin is at the top-left.</p>\n *\n * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\n * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\n * efficiently.</p>\n *\n * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\n * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar BitMatrix /*implements Cloneable*/ = /** @class */ (function () {\n    /**\n     * Creates an empty square {@link BitMatrix}.\n     *\n     * @param dimension height and width\n     */\n    // public constructor(dimension: number /*int*/) {\n    //   this(dimension, dimension)\n    // }\n    /**\n     * Creates an empty {@link BitMatrix}.\n     *\n     * @param width bit matrix width\n     * @param height bit matrix height\n     */\n    // public constructor(width: number /*int*/, height: number /*int*/) {\n    //   if (width < 1 || height < 1) {\n    //     throw new IllegalArgumentException(\"Both dimensions must be greater than 0\")\n    //   }\n    //   this.width = width\n    //   this.height = height\n    //   this.rowSize = (width + 31) / 32\n    //   bits = new int[rowSize * height];\n    // }\n    function BitMatrix(width /*int*/, height /*int*/, rowSize /*int*/, bits) {\n        this.width = width;\n        this.height = height;\n        this.rowSize = rowSize;\n        this.bits = bits;\n        if (undefined === height || null === height) {\n            height = width;\n        }\n        this.height = height;\n        if (width < 1 || height < 1) {\n            throw new IllegalArgumentException_1.default('Both dimensions must be greater than 0');\n        }\n        if (undefined === rowSize || null === rowSize) {\n            rowSize = Math.floor((width + 31) / 32);\n        }\n        this.rowSize = rowSize;\n        if (undefined === bits || null === bits) {\n            this.bits = new Int32Array(this.rowSize * this.height);\n        }\n    }\n    /**\n     * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\n     *\n     * @function parse\n     * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\n     * @return {@link BitMatrix} representation of image\n     */\n    BitMatrix.parseFromBooleanArray = function (image) {\n        var height = image.length;\n        var width = image[0].length;\n        var bits = new BitMatrix(width, height);\n        for (var i = 0; i < height; i++) {\n            var imageI = image[i];\n            for (var j = 0; j < width; j++) {\n                if (imageI[j]) {\n                    bits.set(j, i);\n                }\n            }\n        }\n        return bits;\n    };\n    /**\n     *\n     * @function parse\n     * @param stringRepresentation\n     * @param setString\n     * @param unsetString\n     */\n    BitMatrix.parseFromString = function (stringRepresentation, setString, unsetString) {\n        if (stringRepresentation === null) {\n            throw new IllegalArgumentException_1.default('stringRepresentation cannot be null');\n        }\n        var bits = new Array(stringRepresentation.length);\n        var bitsPos = 0;\n        var rowStartPos = 0;\n        var rowLength = -1;\n        var nRows = 0;\n        var pos = 0;\n        while (pos < stringRepresentation.length) {\n            if (stringRepresentation.charAt(pos) === '\\n' ||\n                stringRepresentation.charAt(pos) === '\\r') {\n                if (bitsPos > rowStartPos) {\n                    if (rowLength === -1) {\n                        rowLength = bitsPos - rowStartPos;\n                    }\n                    else if (bitsPos - rowStartPos !== rowLength) {\n                        throw new IllegalArgumentException_1.default('row lengths do not match');\n                    }\n                    rowStartPos = bitsPos;\n                    nRows++;\n                }\n                pos++;\n            }\n            else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\n                pos += setString.length;\n                bits[bitsPos] = true;\n                bitsPos++;\n            }\n            else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\n                pos += unsetString.length;\n                bits[bitsPos] = false;\n                bitsPos++;\n            }\n            else {\n                throw new IllegalArgumentException_1.default('illegal character encountered: ' + stringRepresentation.substring(pos));\n            }\n        }\n        // no EOL at end?\n        if (bitsPos > rowStartPos) {\n            if (rowLength === -1) {\n                rowLength = bitsPos - rowStartPos;\n            }\n            else if (bitsPos - rowStartPos !== rowLength) {\n                throw new IllegalArgumentException_1.default('row lengths do not match');\n            }\n            nRows++;\n        }\n        var matrix = new BitMatrix(rowLength, nRows);\n        for (var i = 0; i < bitsPos; i++) {\n            if (bits[i]) {\n                matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\n            }\n        }\n        return matrix;\n    };\n    /**\n     * <p>Gets the requested bit, where true means black.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     * @return value of given bit in matrix\n     */\n    BitMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        return ((this.bits[offset] >>> (x & 0x1f)) & 1) !== 0;\n    };\n    /**\n     * <p>Sets the given bit to true.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     */\n    BitMatrix.prototype.set = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] |= (1 << (x & 0x1f)) & 0xFFFFFFFF;\n    };\n    BitMatrix.prototype.unset = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] &= ~((1 << (x & 0x1f)) & 0xFFFFFFFF);\n    };\n    /**\n     * <p>Flips the given bit.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     */\n    BitMatrix.prototype.flip = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] ^= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n    };\n    /**\n     * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\n     * mask bit is set.\n     *\n     * @param mask XOR mask\n     */\n    BitMatrix.prototype.xor = function (mask) {\n        if (this.width !== mask.getWidth() || this.height !== mask.getHeight()\n            || this.rowSize !== mask.getRowSize()) {\n            throw new IllegalArgumentException_1.default('input matrix dimensions do not match');\n        }\n        var rowArray = new BitArray_1.default(Math.floor(this.width / 32) + 1);\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        for (var y = 0, height = this.height; y < height; y++) {\n            var offset = y * rowSize;\n            var row = mask.getRow(y, rowArray).getBitArray();\n            for (var x = 0; x < rowSize; x++) {\n                bits[offset + x] ^= row[x];\n            }\n        }\n    };\n    /**\n     * Clears all bits (sets to false).\n     */\n    BitMatrix.prototype.clear = function () {\n        var bits = this.bits;\n        var max = bits.length;\n        for (var i = 0; i < max; i++) {\n            bits[i] = 0;\n        }\n    };\n    /**\n     * <p>Sets a square region of the bit matrix to true.</p>\n     *\n     * @param left The horizontal position to begin at (inclusive)\n     * @param top The vertical position to begin at (inclusive)\n     * @param width The width of the region\n     * @param height The height of the region\n     */\n    BitMatrix.prototype.setRegion = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        if (top < 0 || left < 0) {\n            throw new IllegalArgumentException_1.default('Left and top must be nonnegative');\n        }\n        if (height < 1 || width < 1) {\n            throw new IllegalArgumentException_1.default('Height and width must be at least 1');\n        }\n        var right = left + width;\n        var bottom = top + height;\n        if (bottom > this.height || right > this.width) {\n            throw new IllegalArgumentException_1.default('The region must fit inside the matrix');\n        }\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        for (var y = top; y < bottom; y++) {\n            var offset = y * rowSize;\n            for (var x = left; x < right; x++) {\n                bits[offset + Math.floor(x / 32)] |= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n            }\n        }\n    };\n    /**\n     * A fast method to retrieve one row of data from the matrix as a BitArray.\n     *\n     * @param y The row to retrieve\n     * @param row An optional caller-allocated BitArray, will be allocated if null or too small\n     * @return The resulting BitArray - this reference should always be used even when passing\n     *         your own row\n     */\n    BitMatrix.prototype.getRow = function (y /*int*/, row) {\n        if (row === null || row === undefined || row.getSize() < this.width) {\n            row = new BitArray_1.default(this.width);\n        }\n        else {\n            row.clear();\n        }\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var offset = y * rowSize;\n        for (var x = 0; x < rowSize; x++) {\n            row.setBulk(x * 32, bits[offset + x]);\n        }\n        return row;\n    };\n    /**\n     * @param y row to set\n     * @param row {@link BitArray} to copy from\n     */\n    BitMatrix.prototype.setRow = function (y /*int*/, row) {\n        System_1.default.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\n    };\n    /**\n     * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\n     */\n    BitMatrix.prototype.rotate180 = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        var topRow = new BitArray_1.default(width);\n        var bottomRow = new BitArray_1.default(width);\n        for (var i = 0, length_1 = Math.floor((height + 1) / 2); i < length_1; i++) {\n            topRow = this.getRow(i, topRow);\n            bottomRow = this.getRow(height - 1 - i, bottomRow);\n            topRow.reverse();\n            bottomRow.reverse();\n            this.setRow(i, bottomRow);\n            this.setRow(height - 1 - i, topRow);\n        }\n    };\n    /**\n     * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\n     *\n     * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\n     */\n    BitMatrix.prototype.getEnclosingRectangle = function () {\n        var width = this.width;\n        var height = this.height;\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var left = width;\n        var top = height;\n        var right = -1;\n        var bottom = -1;\n        for (var y = 0; y < height; y++) {\n            for (var x32 = 0; x32 < rowSize; x32++) {\n                var theBits = bits[y * rowSize + x32];\n                if (theBits !== 0) {\n                    if (y < top) {\n                        top = y;\n                    }\n                    if (y > bottom) {\n                        bottom = y;\n                    }\n                    if (x32 * 32 < left) {\n                        var bit = 0;\n                        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n                            bit++;\n                        }\n                        if ((x32 * 32 + bit) < left) {\n                            left = x32 * 32 + bit;\n                        }\n                    }\n                    if (x32 * 32 + 31 > right) {\n                        var bit = 31;\n                        while ((theBits >>> bit) === 0) {\n                            bit--;\n                        }\n                        if ((x32 * 32 + bit) > right) {\n                            right = x32 * 32 + bit;\n                        }\n                    }\n                }\n            }\n        }\n        if (right < left || bottom < top) {\n            return null;\n        }\n        return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\n    };\n    /**\n     * This is useful in detecting a corner of a 'pure' barcode.\n     *\n     * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\n     */\n    BitMatrix.prototype.getTopLeftOnBit = function () {\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var bitsOffset = 0;\n        while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\n            bitsOffset++;\n        }\n        if (bitsOffset === bits.length) {\n            return null;\n        }\n        var y = bitsOffset / rowSize;\n        var x = (bitsOffset % rowSize) * 32;\n        var theBits = bits[bitsOffset];\n        var bit = 0;\n        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n            bit++;\n        }\n        x += bit;\n        return Int32Array.from([x, y]);\n    };\n    BitMatrix.prototype.getBottomRightOnBit = function () {\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var bitsOffset = bits.length - 1;\n        while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\n            bitsOffset--;\n        }\n        if (bitsOffset < 0) {\n            return null;\n        }\n        var y = Math.floor(bitsOffset / rowSize);\n        var x = Math.floor(bitsOffset % rowSize) * 32;\n        var theBits = bits[bitsOffset];\n        var bit = 31;\n        while ((theBits >>> bit) === 0) {\n            bit--;\n        }\n        x += bit;\n        return Int32Array.from([x, y]);\n    };\n    /**\n     * @return The width of the matrix\n     */\n    BitMatrix.prototype.getWidth = function () {\n        return this.width;\n    };\n    /**\n     * @return The height of the matrix\n     */\n    BitMatrix.prototype.getHeight = function () {\n        return this.height;\n    };\n    /**\n     * @return The row size of the matrix\n     */\n    BitMatrix.prototype.getRowSize = function () {\n        return this.rowSize;\n    };\n    /*@Override*/\n    BitMatrix.prototype.equals = function (o) {\n        if (!(o instanceof BitMatrix)) {\n            return false;\n        }\n        var other = o;\n        return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize &&\n            Arrays_1.default.equals(this.bits, other.bits);\n    };\n    /*@Override*/\n    BitMatrix.prototype.hashCode = function () {\n        var hash = this.width;\n        hash = 31 * hash + this.width;\n        hash = 31 * hash + this.height;\n        hash = 31 * hash + this.rowSize;\n        hash = 31 * hash + Arrays_1.default.hashCode(this.bits);\n        return hash;\n    };\n    /**\n     * @return string representation using \"X\" for set and \" \" for unset bits\n     */\n    /*@Override*/\n    // public toString(): string {\n    //   return toString(\": \"X, \"  \")\n    // }\n    /**\n     * @param setString representation of a set bit\n     * @param unsetString representation of an unset bit\n     * @return string representation of entire matrix utilizing given strings\n     */\n    // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\n    //   return this.buildToString(setString, unsetString, \"\\n\")\n    // }\n    /**\n     * @param setString representation of a set bit\n     * @param unsetString representation of an unset bit\n     * @param lineSeparator newline character in string representation\n     * @return string representation of entire matrix utilizing given strings and line separator\n     * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\n     */\n    // @Deprecated\n    BitMatrix.prototype.toString = function (setString, unsetString, lineSeparator) {\n        if (setString === void 0) { setString = 'X '; }\n        if (unsetString === void 0) { unsetString = '  '; }\n        if (lineSeparator === void 0) { lineSeparator = '\\n'; }\n        return this.buildToString(setString, unsetString, lineSeparator);\n    };\n    BitMatrix.prototype.buildToString = function (setString, unsetString, lineSeparator) {\n        var result = new StringBuilder_1.default();\n        // result.append(lineSeparator);\n        for (var y = 0, height = this.height; y < height; y++) {\n            for (var x = 0, width = this.width; x < width; x++) {\n                result.append(this.get(x, y) ? setString : unsetString);\n            }\n            result.append(lineSeparator);\n        }\n        return result.toString();\n    };\n    /*@Override*/\n    BitMatrix.prototype.clone = function () {\n        return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\n    };\n    return BitMatrix;\n}());\nexports.default = BitMatrix;\n//# sourceMappingURL=BitMatrix.js.map"]},"metadata":{},"sourceType":"script"}