{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n/*import java.util.Arrays;*/\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar ByteMatrix = /** @class */function () {\n  function ByteMatrix(width /*int*/, height /*int*/) {\n    this.width = width;\n    this.height = height;\n    var bytes = new Array(height); // [height][width]\n    for (var i = 0; i !== height; i++) {\n      bytes[i] = new Uint8Array(width);\n    }\n    this.bytes = bytes;\n  }\n  ByteMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n  ByteMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n  ByteMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n    return this.bytes[y][x];\n  };\n  /**\n   * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n   */\n  ByteMatrix.prototype.getArray = function () {\n    return this.bytes;\n  };\n  // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n  ByteMatrix.prototype.setNumber = function (x /*int*/, y /*int*/, value /*byte|int*/) {\n    this.bytes[y][x] = value;\n  };\n  // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n  //   bytes[y][x] = (byte) value\n  // }\n  ByteMatrix.prototype.setBoolean = function (x /*int*/, y /*int*/, value) {\n    this.bytes[y][x] = /*(byte) */value ? 1 : 0;\n  };\n  ByteMatrix.prototype.clear = function (value /*byte*/) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var aByte = _c.value;\n        Arrays_1.default.fill(aByte, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  ByteMatrix.prototype.equals = function (o) {\n    if (!(o instanceof ByteMatrix)) {\n      return false;\n    }\n    var other = o;\n    if (this.width !== other.width) {\n      return false;\n    }\n    if (this.height !== other.height) {\n      return false;\n    }\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      var otherBytesY = other.bytes[y];\n      for (var x = 0, width = this.width; x < width; ++x) {\n        if (bytesY[x] !== otherBytesY[x]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  /*@Override*/\n  ByteMatrix.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      for (var x = 0, width = this.width; x < width; ++x) {\n        switch (bytesY[x]) {\n          case 0:\n            result.append(' 0');\n            break;\n          case 1:\n            result.append(' 1');\n            break;\n          default:\n            result.append('  ');\n            break;\n        }\n      }\n      result.append('\\n');\n    }\n    return result.toString();\n  };\n  return ByteMatrix;\n}();\nexports.default = ByteMatrix;","map":{"version":3,"sources":["../../../../src/core/qrcode/encoder/ByteMatrix.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.encoder {*/\n/*import java.util.Arrays;*/\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar ByteMatrix = /** @class */ (function () {\n    function ByteMatrix(width /*int*/, height /*int*/) {\n        this.width = width;\n        this.height = height;\n        var bytes = new Array(height); // [height][width]\n        for (var i = 0; i !== height; i++) {\n            bytes[i] = new Uint8Array(width);\n        }\n        this.bytes = bytes;\n    }\n    ByteMatrix.prototype.getHeight = function () {\n        return this.height;\n    };\n    ByteMatrix.prototype.getWidth = function () {\n        return this.width;\n    };\n    ByteMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n        return this.bytes[y][x];\n    };\n    /**\n     * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n     */\n    ByteMatrix.prototype.getArray = function () {\n        return this.bytes;\n    };\n    // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n    ByteMatrix.prototype.setNumber = function (x /*int*/, y /*int*/, value /*byte|int*/) {\n        this.bytes[y][x] = value;\n    };\n    // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n    //   bytes[y][x] = (byte) value\n    // }\n    ByteMatrix.prototype.setBoolean = function (x /*int*/, y /*int*/, value) {\n        this.bytes[y][x] = /*(byte) */ (value ? 1 : 0);\n    };\n    ByteMatrix.prototype.clear = function (value /*byte*/) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var aByte = _c.value;\n                Arrays_1.default.fill(aByte, value);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    ByteMatrix.prototype.equals = function (o) {\n        if (!(o instanceof ByteMatrix)) {\n            return false;\n        }\n        var other = o;\n        if (this.width !== other.width) {\n            return false;\n        }\n        if (this.height !== other.height) {\n            return false;\n        }\n        for (var y = 0, height = this.height; y < height; ++y) {\n            var bytesY = this.bytes[y];\n            var otherBytesY = other.bytes[y];\n            for (var x = 0, width = this.width; x < width; ++x) {\n                if (bytesY[x] !== otherBytesY[x]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    /*@Override*/\n    ByteMatrix.prototype.toString = function () {\n        var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n        for (var y = 0, height = this.height; y < height; ++y) {\n            var bytesY = this.bytes[y];\n            for (var x = 0, width = this.width; x < width; ++x) {\n                switch (bytesY[x]) {\n                    case 0:\n                        result.append(' 0');\n                        break;\n                    case 1:\n                        result.append(' 1');\n                        break;\n                    default:\n                        result.append('  ');\n                        break;\n                }\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    };\n    return ByteMatrix;\n}());\nexports.default = ByteMatrix;\n//# sourceMappingURL=ByteMatrix.js.map"]},"metadata":{},"sourceType":"script"}