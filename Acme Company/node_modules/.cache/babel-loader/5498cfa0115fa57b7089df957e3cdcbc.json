{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar AbstractGenericGF = /** @class */function () {\n  function AbstractGenericGF() {}\n  /**\n   * @return 2 to the power of a in GF(size)\n   */\n  AbstractGenericGF.prototype.exp = function (a) {\n    return this.expTable[a];\n  };\n  /**\n   * @return base 2 log of a in GF(size)\n   */\n  AbstractGenericGF.prototype.log = function (a /*int*/) {\n    if (a === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n    return this.logTable[a];\n  };\n  /**\n   * Implements both addition and subtraction -- they are the same in GF(size).\n   *\n   * @return sum/difference of a and b\n   */\n  AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\n    return a ^ b;\n  };\n  return AbstractGenericGF;\n}();\nexports.default = AbstractGenericGF;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/AbstractGenericGF.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;AAOH,IAAA,0BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAGA;;;;;;;;;;AAUG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,iBAAA,CAAA,EAAA,CAyCA;EA5BE;;AAEG;EACI,iBAAA,CAAA,SAAA,CAAA,GAAG,GAAV,UAAW,CAAS,EAAA;IAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACzB,CAAC;EAED;;AAEG;EACI,iBAAA,CAAA,SAAA,CAAA,GAAG,GAAV,UAAW,CAAS,CAAC,SAAO;IAC1B,IAAI,CAAC,KAAK,CAAC,EAAE;MACX,MAAM,IAAI,0BAAA,CAAA,OAAwB,EAAE;IACrC;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACzB,CAAC;EAED;;;;AAIG;EACW,iBAAA,CAAA,aAAa,GAA3B,UACE,CAAS,CAAC,SACV,CAAS,CAAC,SAAO;IAEjB,OAAO,CAAC,GAAG,CAAC;EACd,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar AbstractGenericGF = /** @class */ (function () {\n    function AbstractGenericGF() {\n    }\n    /**\n     * @return 2 to the power of a in GF(size)\n     */\n    AbstractGenericGF.prototype.exp = function (a) {\n        return this.expTable[a];\n    };\n    /**\n     * @return base 2 log of a in GF(size)\n     */\n    AbstractGenericGF.prototype.log = function (a /*int*/) {\n        if (a === 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return this.logTable[a];\n    };\n    /**\n     * Implements both addition and subtraction -- they are the same in GF(size).\n     *\n     * @return sum/difference of a and b\n     */\n    AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\n        return a ^ b;\n    };\n    return AbstractGenericGF;\n}());\nexports.default = AbstractGenericGF;\n//# sourceMappingURL=AbstractGenericGF.js.map"]},"metadata":{},"sourceType":"script"}