{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n    i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar Formatter_1 = require(\"../../util/Formatter\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResult = /** @class */function () {\n  function DetectionResult(barcodeMetadata, boundingBox) {\n    /*final*/this.ADJUST_ROW_NUMBER_SKIP = 2;\n    this.barcodeMetadata = barcodeMetadata;\n    this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n    this.boundingBox = boundingBox;\n    // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n    this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n  }\n  DetectionResult.prototype.getDetectionResultColumns = function () {\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n    var unadjustedCodewordCount = PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE;\n    var previousUnadjustedCount;\n    do {\n      previousUnadjustedCount = unadjustedCodewordCount;\n      unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n    } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n    return this.detectionResultColumns;\n  };\n  DetectionResult.prototype.adjustIndicatorColumnRowNumbers = function (detectionResultColumn) {\n    if (detectionResultColumn != null) {\n      detectionResultColumn.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n    }\n  };\n  // TODO ensure that no detected codewords with unknown row number are left\n  // we should be able to estimate the row height and use it as a hint for the row number\n  // we should also fill the rows top to bottom and bottom to top\n  /**\n   * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n   * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n   */\n  DetectionResult.prototype.adjustRowNumbersAndGetCount = function () {\n    var unadjustedCount = this.adjustRowNumbersByRow();\n    if (unadjustedCount === 0) {\n      return 0;\n    }\n    for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n      var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n      for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n        if (codewords[codewordsRow] == null) {\n          continue;\n        }\n        if (!codewords[codewordsRow].hasValidRowNumber()) {\n          this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.prototype.adjustRowNumbersByRow = function () {\n    this.adjustRowNumbersFromBothRI();\n    // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n    // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n    // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n    // number starts and ends.\n    var unadjustedCount = this.adjustRowNumbersFromLRI();\n    return unadjustedCount + this.adjustRowNumbersFromRRI();\n  };\n  DetectionResult.prototype.adjustRowNumbersFromBothRI = function () {\n    if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return;\n    }\n    var LRIcodewords = this.detectionResultColumns[0].getCodewords();\n    var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n      if (LRIcodewords[codewordsRow] != null && RRIcodewords[codewordsRow] != null && LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n        for (var barcodeColumn /*int*/ = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n          if (codeword == null) {\n            continue;\n          }\n          codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n          if (!codeword.hasValidRowNumber()) {\n            this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n          }\n        }\n      }\n    }\n  };\n  DetectionResult.prototype.adjustRowNumbersFromRRI = function () {\n    if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return 0;\n    }\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n      for (var barcodeColumn /*int*/ = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.prototype.adjustRowNumbersFromLRI = function () {\n    if (this.detectionResultColumns[0] == null) {\n      return 0;\n    }\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[0].getCodewords();\n    for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n      for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n    return unadjustedCount;\n  };\n  DetectionResult.adjustRowNumberIfValid = function (rowIndicatorRowNumber, invalidRowCounts, codeword) {\n    if (codeword == null) {\n      return invalidRowCounts;\n    }\n    if (!codeword.hasValidRowNumber()) {\n      if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n        codeword.setRowNumber(rowIndicatorRowNumber);\n        invalidRowCounts = 0;\n      } else {\n        ++invalidRowCounts;\n      }\n    }\n    return invalidRowCounts;\n  };\n  DetectionResult.prototype.adjustRowNumbers = function (barcodeColumn, codewordsRow, codewords) {\n    var e_1, _a;\n    var codeword = codewords[codewordsRow];\n    var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n    var nextColumnCodewords = previousColumnCodewords;\n    if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n      nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n    }\n    // let otherCodewords: Codeword[] = new Codeword[14];\n    var otherCodewords = new Array(14);\n    otherCodewords[2] = previousColumnCodewords[codewordsRow];\n    otherCodewords[3] = nextColumnCodewords[codewordsRow];\n    if (codewordsRow > 0) {\n      otherCodewords[0] = codewords[codewordsRow - 1];\n      otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n      otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n    }\n    if (codewordsRow > 1) {\n      otherCodewords[8] = codewords[codewordsRow - 2];\n      otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n      otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n    }\n    if (codewordsRow < codewords.length - 1) {\n      otherCodewords[1] = codewords[codewordsRow + 1];\n      otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n      otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n    }\n    if (codewordsRow < codewords.length - 2) {\n      otherCodewords[9] = codewords[codewordsRow + 2];\n      otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n      otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n    }\n    try {\n      for (var otherCodewords_1 = __values(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {\n        var otherCodeword = otherCodewords_1_1.value;\n        if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a = otherCodewords_1.return)) _a.call(otherCodewords_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @return true, if row number was adjusted, false otherwise\n   */\n  DetectionResult.adjustRowNumber = function (codeword, otherCodeword) {\n    if (otherCodeword == null) {\n      return false;\n    }\n    if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n      codeword.setRowNumber(otherCodeword.getRowNumber());\n      return true;\n    }\n    return false;\n  };\n  DetectionResult.prototype.getBarcodeColumnCount = function () {\n    return this.barcodeColumnCount;\n  };\n  DetectionResult.prototype.getBarcodeRowCount = function () {\n    return this.barcodeMetadata.getRowCount();\n  };\n  DetectionResult.prototype.getBarcodeECLevel = function () {\n    return this.barcodeMetadata.getErrorCorrectionLevel();\n  };\n  DetectionResult.prototype.setBoundingBox = function (boundingBox) {\n    this.boundingBox = boundingBox;\n  };\n  DetectionResult.prototype.getBoundingBox = function () {\n    return this.boundingBox;\n  };\n  DetectionResult.prototype.setDetectionResultColumn = function (barcodeColumn, detectionResultColumn) {\n    this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n  };\n  DetectionResult.prototype.getDetectionResultColumn = function (barcodeColumn) {\n    return this.detectionResultColumns[barcodeColumn];\n  };\n  // @Override\n  DetectionResult.prototype.toString = function () {\n    var rowIndicatorColumn = this.detectionResultColumns[0];\n    if (rowIndicatorColumn == null) {\n      rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n    }\n    // try (\n    var formatter = new Formatter_1.default();\n    // ) {\n    for (var codewordsRow /*int*/ = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n      formatter.format('CW %3d:', codewordsRow);\n      for (var barcodeColumn /*int*/ = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n        if (this.detectionResultColumns[barcodeColumn] == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n        if (codeword == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n        formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n      }\n      formatter.format('%n');\n    }\n    return formatter.toString();\n    // }\n  };\n\n  return DetectionResult;\n}();\nexports.default = DetectionResult;","map":{"version":3,"names":["PDF417Common_1","require","Formatter_1","DetectionResult","barcodeMetadata","boundingBox","ADJUST_ROW_NUMBER_SKIP","barcodeColumnCount","getColumnCount","detectionResultColumns","Array","prototype","getDetectionResultColumns","adjustIndicatorColumnRowNumbers","unadjustedCodewordCount","default","MAX_CODEWORDS_IN_BARCODE","previousUnadjustedCount","adjustRowNumbersAndGetCount","detectionResultColumn","adjustCompleteIndicatorColumnRowNumbers","unadjustedCount","adjustRowNumbersByRow","barcodeColumn","codewords","getCodewords","codewordsRow","length","hasValidRowNumber","adjustRowNumbers","adjustRowNumbersFromBothRI","adjustRowNumbersFromLRI","adjustRowNumbersFromRRI","LRIcodewords","RRIcodewords","getRowNumber","codeword","setRowNumber","rowIndicatorRowNumber","invalidRowCounts","adjustRowNumberIfValid","isValidRowNumber","previousColumnCodewords","nextColumnCodewords","otherCodewords","otherCodewords_1","__values","otherCodewords_1_1","next","done","otherCodeword","value","adjustRowNumber","getBucket","getBarcodeColumnCount","getBarcodeRowCount","getRowCount","getBarcodeECLevel","getErrorCorrectionLevel","setBoundingBox","getBoundingBox","setDetectionResultColumn","getDetectionResultColumn","toString","rowIndicatorColumn","formatter","format","getValue"],"sources":["../../../../src/core/pdf417/decoder/DetectionResult.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}