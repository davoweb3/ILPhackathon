{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar System_1 = require(\"./util/System\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\nvar RGBLuminanceSource = /** @class */function (_super) {\n  __extends(RGBLuminanceSource, _super);\n  function RGBLuminanceSource(luminances, width /*int*/, height /*int*/, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/) {\n    var _this = _super.call(this, width, height) || this;\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n    if (luminances.BYTES_PER_ELEMENT === 4) {\n      // Int32Array\n      var size = width * height;\n      var luminancesUint8Array = new Uint8ClampedArray(size);\n      for (var offset = 0; offset < size; offset++) {\n        var pixel = luminances[offset];\n        var r = pixel >> 16 & 0xff; // red\n        var g2 = pixel >> 7 & 0x1fe; // 2 * green\n        var b = pixel & 0xff; // blue\n        // Calculate green-favouring average cheaply\n        luminancesUint8Array[offset] = /*(byte) */(r + g2 + b) / 4 & 0xFF;\n      }\n      _this.luminances = luminancesUint8Array;\n    } else {\n      _this.luminances = luminances;\n    }\n    if (undefined === dataWidth) {\n      _this.dataWidth = width;\n    }\n    if (undefined === dataHeight) {\n      _this.dataHeight = height;\n    }\n    if (undefined === left) {\n      _this.left = 0;\n    }\n    if (undefined === top) {\n      _this.top = 0;\n    }\n    if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n      throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n    }\n    return _this;\n  }\n  /*@Override*/\n  RGBLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n    var width = this.getWidth();\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.luminances;\n    }\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left;\n    // If the width matches the full width of the underlying data, perform a single copy.\n    if (width === this.dataWidth) {\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n      return matrix;\n    }\n    // Otherwise copy one cropped row at a time.\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n    return matrix;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n  RGBLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n    return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n  };\n  RGBLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n  return RGBLuminanceSource;\n}(LuminanceSource_1.default);\nexports.default = RGBLuminanceSource;","map":{"version":3,"sources":["../../src/core/RGBLuminanceSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing {*/\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar System_1 = require(\"./util/System\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\nvar RGBLuminanceSource = /** @class */ (function (_super) {\n    __extends(RGBLuminanceSource, _super);\n    function RGBLuminanceSource(luminances, width /*int*/, height /*int*/, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/) {\n        var _this = _super.call(this, width, height) || this;\n        _this.dataWidth = dataWidth;\n        _this.dataHeight = dataHeight;\n        _this.left = left;\n        _this.top = top;\n        if (luminances.BYTES_PER_ELEMENT === 4) { // Int32Array\n            var size = width * height;\n            var luminancesUint8Array = new Uint8ClampedArray(size);\n            for (var offset = 0; offset < size; offset++) {\n                var pixel = luminances[offset];\n                var r = (pixel >> 16) & 0xff; // red\n                var g2 = (pixel >> 7) & 0x1fe; // 2 * green\n                var b = pixel & 0xff; // blue\n                // Calculate green-favouring average cheaply\n                luminancesUint8Array[offset] = /*(byte) */ ((r + g2 + b) / 4) & 0xFF;\n            }\n            _this.luminances = luminancesUint8Array;\n        }\n        else {\n            _this.luminances = luminances;\n        }\n        if (undefined === dataWidth) {\n            _this.dataWidth = width;\n        }\n        if (undefined === dataHeight) {\n            _this.dataHeight = height;\n        }\n        if (undefined === left) {\n            _this.left = 0;\n        }\n        if (undefined === top) {\n            _this.top = 0;\n        }\n        if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n            throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n        }\n        return _this;\n    }\n    /*@Override*/\n    RGBLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        if (row === null || row === undefined || row.length < width) {\n            row = new Uint8ClampedArray(width);\n        }\n        var offset = (y + this.top) * this.dataWidth + this.left;\n        System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n        return row;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.getMatrix = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        // If the caller asks for the entire underlying image, save the copy and give them the\n        // original data. The docs specifically warn that result.length must be ignored.\n        if (width === this.dataWidth && height === this.dataHeight) {\n            return this.luminances;\n        }\n        var area = width * height;\n        var matrix = new Uint8ClampedArray(area);\n        var inputOffset = this.top * this.dataWidth + this.left;\n        // If the width matches the full width of the underlying data, perform a single copy.\n        if (width === this.dataWidth) {\n            System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n            return matrix;\n        }\n        // Otherwise copy one cropped row at a time.\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n            inputOffset += this.dataWidth;\n        }\n        return matrix;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n    };\n    RGBLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource_1.default(this);\n    };\n    return RGBLuminanceSource;\n}(LuminanceSource_1.default));\nexports.default = RGBLuminanceSource;\n//# sourceMappingURL=RGBLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}