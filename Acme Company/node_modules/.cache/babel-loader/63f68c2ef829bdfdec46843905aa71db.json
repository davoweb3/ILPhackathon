{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar StringUtils_1 = require(\"../common/StringUtils\");\nvar StringBuilder = /** @class */function () {\n  function StringBuilder(value) {\n    if (value === void 0) {\n      value = '';\n    }\n    this.value = value;\n  }\n  StringBuilder.prototype.enableDecoding = function (encoding) {\n    this.encoding = encoding;\n    return this;\n  };\n  StringBuilder.prototype.append = function (s) {\n    if (typeof s === 'string') {\n      this.value += s.toString();\n    } else if (this.encoding) {\n      // use passed format (fromCharCode will return UTF8 encoding)\n      this.value += StringUtils_1.default.castAsNonUtf8Char(s, this.encoding);\n    } else {\n      // correctly converts from UTF-8, but not other encodings\n      this.value += String.fromCharCode(s);\n    }\n    return this;\n  };\n  StringBuilder.prototype.length = function () {\n    return this.value.length;\n  };\n  StringBuilder.prototype.charAt = function (n) {\n    return this.value.charAt(n);\n  };\n  StringBuilder.prototype.deleteCharAt = function (n) {\n    this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n  };\n  StringBuilder.prototype.setCharAt = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n  };\n  StringBuilder.prototype.substring = function (start, end) {\n    return this.value.substring(start, end);\n  };\n  /**\n   * @note helper method for RSS Expanded\n   */\n  StringBuilder.prototype.setLengthToZero = function () {\n    this.value = \"\";\n  };\n  StringBuilder.prototype.toString = function () {\n    return this.value;\n  };\n  StringBuilder.prototype.insert = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n  };\n  return StringBuilder;\n}();\nexports.default = StringBuilder;","map":{"version":3,"sources":["../../../src/core/util/StringBuilder.ts"],"names":[],"mappings":";;;;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAGA,IAAA,aAAA,GAAA,aAAA,YAAA;EAIE,SAAA,aAAA,CAA2B,KAAkB,EAAA;IAAlB,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAAA,EAAkB;IAAA;IAAlB,IAAA,CAAA,KAAK,GAAL,KAAK;EAAgB;EAEzC,aAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UAAsB,QAAyB,EAAA;IAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,OAAO,IAAI;EACb,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,CAAkB,EAAA;IAC9B,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;MACzB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,QAAQ,EAAE;KAC3B,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;MACxB;MACA,IAAI,CAAC,KAAK,IAAI,aAAA,CAAA,OAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC;KAC9D,MAAM;MACL;MACA,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;IACrC;IACD,OAAO,IAAI;EACb,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM;EAC1B,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,CAAS,EAAA;IACrB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;EAC7B,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,UAAoB,CAAS,EAAA;IAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;EACpE,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,CAAS,EAAE,CAAS,EAAA;IACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACrE,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,KAAU,EAAE,GAAQ,EAAA;IACnC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC;EACzC,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,YAAA;IACI,IAAI,CAAC,KAAK,GAAG,EAAE;EACnB,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,IAAI,CAAC,KAAK;EACnB,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,CAAS,EAAE,CAAS,EAAA;IAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;EAC5E,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StringUtils_1 = require(\"../common/StringUtils\");\nvar StringBuilder = /** @class */ (function () {\n    function StringBuilder(value) {\n        if (value === void 0) { value = ''; }\n        this.value = value;\n    }\n    StringBuilder.prototype.enableDecoding = function (encoding) {\n        this.encoding = encoding;\n        return this;\n    };\n    StringBuilder.prototype.append = function (s) {\n        if (typeof s === 'string') {\n            this.value += s.toString();\n        }\n        else if (this.encoding) {\n            // use passed format (fromCharCode will return UTF8 encoding)\n            this.value += StringUtils_1.default.castAsNonUtf8Char(s, this.encoding);\n        }\n        else {\n            // correctly converts from UTF-8, but not other encodings\n            this.value += String.fromCharCode(s);\n        }\n        return this;\n    };\n    StringBuilder.prototype.length = function () {\n        return this.value.length;\n    };\n    StringBuilder.prototype.charAt = function (n) {\n        return this.value.charAt(n);\n    };\n    StringBuilder.prototype.deleteCharAt = function (n) {\n        this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n    };\n    StringBuilder.prototype.setCharAt = function (n, c) {\n        this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n    };\n    StringBuilder.prototype.substring = function (start, end) {\n        return this.value.substring(start, end);\n    };\n    /**\n     * @note helper method for RSS Expanded\n     */\n    StringBuilder.prototype.setLengthToZero = function () {\n        this.value = \"\";\n    };\n    StringBuilder.prototype.toString = function () {\n        return this.value;\n    };\n    StringBuilder.prototype.insert = function (n, c) {\n        this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n    };\n    return StringBuilder;\n}());\nexports.default = StringBuilder;\n//# sourceMappingURL=StringBuilder.js.map"]},"metadata":{},"sourceType":"script"}