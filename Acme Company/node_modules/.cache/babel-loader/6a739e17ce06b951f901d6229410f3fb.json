{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar AI01decoder_1 = require(\"./AI01decoder\");\nvar StringBuilder_1 = require(\"../../../../util/StringBuilder\");\nvar AI01AndOtherAIs = /** @class */function (_super) {\n  __extends(AI01AndOtherAIs, _super);\n  //the second one is the encodation method, and the other two are for the variable length\n  function AI01AndOtherAIs(information) {\n    return _super.call(this, information) || this;\n  }\n  AI01AndOtherAIs.prototype.parseInformation = function () {\n    var buff = new StringBuilder_1.default();\n    buff.append(\"(01)\");\n    var initialGtinPosition = buff.length();\n    var firstGtinDigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01AndOtherAIs.HEADER_SIZE, 4);\n    buff.append(firstGtinDigit);\n    this.encodeCompressedGtinWithoutAI(buff, AI01AndOtherAIs.HEADER_SIZE + 4, initialGtinPosition);\n    return this.getGeneralDecoder().decodeAllCodes(buff, AI01AndOtherAIs.HEADER_SIZE + 44);\n  };\n  AI01AndOtherAIs.HEADER_SIZE = 1 + 1 + 2; //first bit encodes the linkage flag,\n  return AI01AndOtherAIs;\n}(AI01decoder_1.default);\nexports.default = AI01AndOtherAIs;","map":{"version":3,"names":["AI01decoder_1","require","StringBuilder_1","AI01AndOtherAIs","_super","__extends","information","call","prototype","parseInformation","buff","default","append","initialGtinPosition","length","firstGtinDigit","getGeneralDecoder","extractNumericValueFromBitArray","HEADER_SIZE","encodeCompressedGtinWithoutAI","decodeAllCodes"],"sources":["../../../../../../src/core/oned/rss/expanded/decoders/AI01AndOtherAIs.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AAEA,IAAAC,eAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAG3C;EAEA,SAAAD,gBAAYG,WAAqB;WAC/BF,MAAA,CAAAG,IAAA,OAAMD,WAAW,CAAC;EACpB;EAEOH,eAAA,CAAAK,SAAA,CAAAC,gBAAgB,GAAvB;IAEA,IAAIC,IAAI,GAAG,IAAIR,eAAA,CAAAS,OAAa,EAAE;IAC9BD,IAAI,CAACE,MAAM,CAAC,MAAM,CAAC;IACnB,IAAIC,mBAAmB,GAAGH,IAAI,CAACI,MAAM,EAAE;IACvC,IAAKC,cAAc,GAAG,IAAI,CAACC,iBAAiB,EAAE,CAACC,+BAA+B,CAACd,eAAe,CAACe,WAAW,EAAE,CAAC,CAAC;IAC9GR,IAAI,CAACE,MAAM,CAACG,cAAc,CAAC;IAC3B,IAAI,CAACI,6BAA6B,CAACT,IAAI,EAAEP,eAAe,CAACe,WAAW,GAAG,CAAC,EAAEL,mBAAmB,CAAC;IAC9F,OAAO,IAAI,CAACG,iBAAiB,EAAE,CAACI,cAAc,CAACV,IAAI,EAAEP,eAAe,CAACe,WAAW,GAAG,EAAE,CAAC;EACxF,CAAC;EAhB0Bf,eAAA,CAAAe,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAkBpD,OAAAf,eAAC;CAAA,CApB4CH,aAAA,CAAAW,OAAW;kBAAnCR,eAAe"},"metadata":{},"sourceType":"script"}